{
  "file_name": "XPGranterDevice.verse",
  "questions": [
    "How do I create a centralized XP manager to handle all experience point rewards?",
    "What is the Verse code for a system that grants different amounts of XP for different actions like kills, headshots, and winning a match?",
    "How can I use an enum to manage different XP reward types and amounts?"
  ],
  "explanation": "This script defines a 'custom_xp_granter', a centralized device for managing and awarding all types of experience points (XP) in the game. It uses enums (`xp_type` and `xp_enum`) to create a highly organized system for different reward triggers and sizes.\n\n- **Structure:** The script defines different categories of XP events (like 'KilledEnemy', 'Headshot', 'Victory') and groups multiple 'accolades_device' instances to handle different reward tiers (Medium, Large, Very Large).\n- **Core Logic:** The main public function is 'GrantXP'. Other game manager scripts call this function when a player performs a notable action. 'GrantXP' uses a 'case' statement to check the action type, adds a specific amount of raw XP to the player's stats via a 'PlayerController', and triggers the appropriate 'accolades_device'. It also has a separate function, 'GrantChallengeCompletedXP', specifically for granting rewards from the daily and bootcamp challenge systems.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Fortnite.com/Characters }\nusing { /Fortnite.com/Game }\nusing { /Verse.org/Simulation/Tags }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /Verse.org/Simulation }\n\n    \nxp_enum<public>:= enum:\n    Medium\n    Large\n    VeryLarge\n\n\nxp_type<public>:=enum{\n    KilledEnemy\n    Headshot\n    LongShot\n    Victory\n    Defeat\n    Draw\n    SurviveFor3min\n    SurviveFor5min\n    SurviveFor10min\n    RoundMVP\n}\n\nxp_granter_devices:=class<concrete>{\n    @editable\n    VerySmallXPGranter:accolades_device=accolades_device{}\n    @editable\n    SmallXPGranter:accolades_device=accolades_device{}\n    @editable\n    MediumXPGranter:accolades_device=accolades_device{}\n    @editable\n    HighXPGranter:accolades_device=accolades_device{}\n    @editable\n    VeryHighXPGranter:accolades_device=accolades_device{}\n}\n\ncustom_xp_granter:=class(creative_device){\n\n    @editable\n    XPGranterDevices:xp_granter_devices=xp_granter_devices{}\n\n    @editable\n    KilledEnemy_XP:int=0\n\n    @editable\n    Headshot_XP:int=0\n    @editable\n    LongShot_XP:int=0\n    @editable\n    Victory:int=0\n    @editable\n    Defeat:int=0\n    @editable\n    Draw:int=0\n    @editable\n    SurviveFor_3_Min_XP:int=0\n    @editable\n    SurviveFor_5_Min_XP:int=0\n    @editable\n    SurviveFor_10_Min_XP:int=0\n    @editable\n    RoundMVP:int=0\n\n    GrantXP(Agent:agent, XP_Type:xp_type):void={\n\n        if:\n            Player := player[Agent]\n            Player.IsActive[]\n            PlayerController := Player.GetPlayerController[Self]\n            CurrentPlayerStats := PlayerController.PlayerStatsManager.GetPlayerStats[Player]\n            GM := GetGameManager[]\n            NotifyDevice := GetNotifyDevice[]\n        then:\n\n            case (XP_Type):\n                xp_type.KilledEnemy =>\n                    PlayerController.AddPlayerXP(Agent, KilledEnemy_XP * 1.0)\n                    XPGranterDevices.MediumXPGranter.Award(Agent)\n                    \n                xp_type.Headshot =>\n                    PlayerController.AddPlayerXP(Agent, Headshot_XP * 1.0)\n                    XPGranterDevices.MediumXPGranter.Award(Agent)\n\n                    if:\n                        not GM.DisableNotifications?\n                    then:\n                        NotifyDevice.HS_Badge.Show(Agent)\n                        NotifyDevice.Badge_AudioPlayer.Play(Agent)\n\n                xp_type.LongShot =>\n                    PlayerController.AddPlayerXP(Agent, LongShot_XP * 1.0)\n                    XPGranterDevices.HighXPGranter.Award(Agent)\n\n                    if:\n                        not GM.DisableNotifications?\n                    then:\n                        NotifyDevice.LS_Badge.Show(Agent)\n                        NotifyDevice.Badge_AudioPlayer.Play(Agent)\n\n                xp_type.Victory =>\n\n                    PlayerController.AddPlayerXP(Agent, Victory * 1.0)\n                    XPGranterDevices.VeryHighXPGranter.Award(Agent)\n\n                xp_type.Defeat =>\n                    PlayerController.AddPlayerXP(Agent, Defeat * 1.0)\n                    XPGranterDevices.HighXPGranter.Award(Agent)\n\n                xp_type.Draw =>\n                    PlayerController.AddPlayerXP(Agent, Draw * 1.0)\n                    XPGranterDevices.HighXPGranter.Award(Agent)\n\n                xp_type.SurviveFor3min =>\n                    PlayerController.AddPlayerXP(Agent, SurviveFor_3_Min_XP * 1.0)\n                    XPGranterDevices.SmallXPGranter.Award(Agent)\n\n                    if:\n                        not GM.DisableNotifications?\n                    then:\n                        NotifyDevice.SurvivalXP(Agent, \"Survived For 3min\")\n\n                xp_type.SurviveFor5min =>\n                    PlayerController.AddPlayerXP(Agent, SurviveFor_5_Min_XP * 1.0)\n                    XPGranterDevices.SmallXPGranter.Award(Agent)\n\n                    if:\n                        not GM.DisableNotifications?\n                    then:\n                        NotifyDevice.SurvivalXP(Agent, \"Survived For 5min\")\n\n                xp_type.SurviveFor10min =>\n                    PlayerController.AddPlayerXP(Agent, SurviveFor_10_Min_XP * 1.0)\n                    XPGranterDevices.SmallXPGranter.Award(Agent)\n\n                    if:\n                        not GM.DisableNotifications?\n                    then:\n                        NotifyDevice.SurvivalXP(Agent, \"Survived For 10min\")\n\n                xp_type.RoundMVP =>\n                    PlayerController.AddPlayerXP(Agent, RoundMVP * 1.0)\n                    XPGranterDevices.VeryHighXPGranter.Award(Agent)\n\n    }\n    GrantChallengeCompletedXP(Agent:agent, ?DailyChallenge:?DailyChallengeModule.challenge_data_properties=false, ?BootcampChallenge:?BootcampChallengeModule.challenge_data_properties=false):void={\n        if:\n            Player := player[Agent]\n            PlayerController := Player.GetPlayerController[Self]\n        then:\n\n            if:\n                Challenge := DailyChallengeModule.challenge_data_properties[DailyChallenge?]\n            then:\n                PlayerController.AddPlayerXP(Agent, Challenge.Reward.Reward * 1.0)\n                XPGranterDevices.MediumXPGranter.Award(Agent)\n\n            if:\n                Challenge := BootcampChallengeModule.challenge_data_properties[BootcampChallenge?]\n            then:\n                PlayerController.AddPlayerXP(Agent, Challenge.Reward.Reward * 1.0)\n\n                case (Challenge.Reward.XP_Award):\n                    xp_enum.Medium => XPGranterDevices.MediumXPGranter.Award(Agent)\n                    xp_enum.Large => XPGranterDevices.HighXPGranter.Award(Agent)\n                    xp_enum.VeryLarge => XPGranterDevices.VeryHighXPGranter.Award(Agent)\n\n    }\n\n}",
  "external_calls": [
    "player_controller.verse",
    "player_stats_manager.verse",
    "game_manager.verse",
    "notification_device.verse",
    "DailyChallenges.verse",
    "BootcampChallenges.verse"
  ]
}
