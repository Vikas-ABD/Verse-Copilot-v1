{
  "file_name": "VotingUI.verse",
  "questions": [
    "How do I create the UI for a map voting screen?",
    "What is the Verse code to dynamically create vote buttons and handle player clicks?",
    "How can I make a UI that highlights the map a player has voted for?"
  ],
  "explanation": "This script, 'VotingUI.verse', defines the user interface component for the map voting system. It is responsible for creating, managing, and handling interactions with the visual elements of the voting screen, while the core logic resides in 'VotingSystem.verse'.\n\n- **Structure:** The script defines a 'VotingUI' class that inherits from the 'ui_base' framework. It creates a set of custom 'current_button' widgets, one for each map, which include properties for handling selection highlights.\n- **Core Logic:**\n  - `GetUI`: This function is the entry point for creating the visual interface. It calls the `CreateUI` function to dynamically build the canvas with map images and vote buttons.\n  - `OnVoteClicked`: This is the most important function. When a player clicks a map button, this handler updates the visual state of the buttons (highlighting the new selection and un-highlighting the old one) and then calls back to the main 'VotingSystem' device to register the vote.",
  "code": "using { /UnrealEngine.com/Temporary/UI }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Verse.org/Colors }\nusing { /Fortnite.com/UI }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/Assets }\n\n\nVotingUI_module:=module:\n\n    current_button<public>:=class(CustomUI.button_base){\n        BackgroundSize<override> :vector2=vector2{X:= 245.0,Y:= 50.0}\n        MapName<public>:votingSystemModule.currentmap\n\n        MapHighlightColorBlock<public>:color_block=color_block{DefaultOpacity:=0.0, DefaultDesiredSize:= vector2{X:= 256.0,Y:= 256.0}}\n\n    }\n\n\n    VotingUI<public>:=class<unique>(CustomUI.ui_base){\n\n        UIClosedEvent:event():=event(){}\n\n        var MaybeOldPageCanvas:?canvas=false \n        var Current_button<public>:[]current_button=array{}\n        var MaybeVotingSystem<public>:?votingSystemModule.VotingSystem= false\n\n        var MaybeOldVotedBTN<public>:?current_button=false\n\n        Init<public>():void={\n\n            Shipment := current_button{\n                    Widget:=button_quiet{DefaultText := TextForUI(\"0\")},\n\n                    Background:=option{texture_block{DefaultImage:=UIAssets.Lobby_Button}},\n\n                    DefaultTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonDefaultTint() else NamedColors.Green , \n                    SelectedTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonSelectedTint() else NamedColors.Green ,\n                    MapName:=votingSystemModule.currentmap.Shipment\n                }\n            set Current_button += array{Shipment}\n            \n            KillHouse := current_button{\n                    Widget:=button_quiet{DefaultText := TextForUI(\"0\")},\n\n                    Background:=option{texture_block{DefaultImage:=UIAssets.Lobby_Button}},\n\n                    DefaultTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonDefaultTint() else NamedColors.Green, \n                    SelectedTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonSelectedTint() else NamedColors.Green ,\n                    MapName:=votingSystemModule.currentmap.KillHouse\n                }\n            set Current_button += array{KillHouse}\n      \n            Market := current_button{\n                    Widget:=button_quiet{DefaultText := TextForUI(\"0\")},\n\n                    Background:=option{texture_block{DefaultImage:=UIAssets.Lobby_Button}},\n                    DefaultTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonDefaultTint() else NamedColors.Green, \n                    SelectedTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonSelectedTint() else NamedColors.Green ,\n                    MapName:=votingSystemModule.currentmap.Market\n                }\n            set Current_button += array{Market}\n            Village := current_button{\n                    Widget:=button_quiet{DefaultText := TextForUI(\"0\")},\n\n                    Background:=option{texture_block{DefaultImage:=UIAssets.Lobby_Button}},\n                    DefaultTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonDefaultTint() else NamedColors.Green, \n                    SelectedTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonSelectedTint() else NamedColors.Green ,\n                    MapName:=votingSystemModule.currentmap.Market\n                }\n            set Current_button += array{Village}\n            Crash := current_button{\n                    Widget:=button_quiet{DefaultText := TextForUI(\"0\")},\n\n                    Background:=option{texture_block{DefaultImage:=UIAssets.Lobby_Button}},\n                    DefaultTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonDefaultTint() else NamedColors.Green, \n                    SelectedTint:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetButtonSelectedTint() else NamedColors.Green ,\n                    MapName:=votingSystemModule.currentmap.Market\n                }\n            set Current_button += array{Crash}\n            \n        }\n\n        RemoveWidget<override>(Agent:agent):void={\n            UIClosedEvent.Signal()\n            Reset()\n            (super:)RemoveWidget(Agent)\n        }\n\n        GetUI<public>(Agent:agent):canvas={\n            Init()\n            Print(\"Create Voting UI\")\n            Canvas := CreateUI(Agent)\n            set MaybeCanvas = option{Canvas}\n            Canvas\n        }\n\n\n        Reset<public>():void={\n            \n\n\n\n            for(i:=0..Current_button.Length-1){\n            if:\n            \n                CurrentBtnref:=Current_button[i]\n            then:\n                CurrentBtnref.Widget.SetText(TextForUI(\"0\"))\n                # #C Print(\"reseted votingSystem script\")\n                \n            }\n\n        }\n\n        OnVoteClicked(WidgetMessage:widget_message,Btn:current_button):void ={\n            if:\n                VotingSystemDevice := MaybeVotingSystem?\n                Index:= Current_button.Find[Btn]\n                VotingSystemDevice.VoteCount = VotingSystemDevice.voteonmaps[Index]\n            then:\n\n                if(OldBtn := MaybeOldVotedBTN?): # check if there is old voted btn \n                    if(not OldBtn  = Btn): # check if old btn is same as new btn\n\n                        if(Background := OldBtn.Background?):\n                            Background.SetTint(OldBtn.DefaultTint)\n\n                            OldBtn.MapHighlightColorBlock.SetColor(OldBtn.DefaultTint)\n                            OldBtn.MapHighlightColorBlock.SetOpacity(0.0)\n\n                        if(Background := Btn.Background?):\n                            Background.SetTint(Btn.SelectedTint)\n\n                            Btn.MapHighlightColorBlock.SetColor(Btn.SelectedTint)\n                            Btn.MapHighlightColorBlock.SetOpacity(1.0)\n\n                        set MaybeOldVotedBTN = option{Btn}\n\n                else:\n                    if(Background := Btn.Background?):\n                        Background.SetTint(Btn.SelectedTint)\n\n                        Btn.MapHighlightColorBlock.SetColor(Btn.SelectedTint)\n                        Btn.MapHighlightColorBlock.SetOpacity(1.0)\n\n                    set MaybeOldVotedBTN = option{Btn}\n\n\n\n                \n                if(OldVoteIndex:= VotingSystemDevice.CastedVoteperPlayer[WidgetMessage.Player],set VotingSystemDevice.CastedVotes[OldVoteIndex]-=1){}\n                \n                if(set VotingSystemDevice.CastedVoteperPlayer[WidgetMessage.Player]=Index){}\n                \n                if(set VotingSystemDevice.CastedVotes[Index]+=1){}\n                \n                VotingSystemDevice.updateBtnText()\n            \n        }\n\n    #------------set vote button text--------------  \n\n\n\n        (BTN:current_button).AwaitButtonInteract(IntegerParam :int)<suspends>:void={\n            race:\n                block:\n                    UIClosedEvent.Await()\n\n                loop:\n                    Result := BTN.Widget.OnClick().Await()\n                    \n                    OnVoteClicked(Result,BTN)\n        }\n\n        CreateUI<private>(Agent:agent):canvas={\n\n            HORI_Maps_Stack_Box:stack_box= stack_box:\n                Orientation:=orientation.Horizontal\n                    Slots:=array:\n                    \n            for(i:=0..MaybeVotingSystem?.MaxMapToShow-1){\n                \n                if:\n                    VotingSystemRef := MaybeVotingSystem?\n                    VotedDataTuple:= VotingSystemRef.SelectedVotesData[i]\n                    Curr_button:=Current_button[i] \n                then:\n                    set VotingSystemRef.CurrentMapIndex = i\n                    spawn{Curr_button.AwaitButtonInteract(VotingSystemRef.CurrentMapIndex)}\n    \n                    VotingSystemRef.updateBtnText()\n\n                    VoteTexture:texture=VotedDataTuple(0)\n                    VoteString:string = VotedDataTuple(1)\n                    # #C Print(\"currentindex  {VotingSystemRef.CurrentMapIndex}  {VoteString}\")\n    \n                    if(Background := Curr_button.Background?):\n                        Background.SetDesiredSize(Curr_button.BackgroundSize) \n\n                    HORI_Maps_Stack_Box.AddWidget(\n                        stack_box_slot:\n                            HorizontalAlignment:=horizontal_alignment.Fill\n                            VerticalAlignment:=vertical_alignment.Fill\n                            Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n\n                            Widget:=stack_box:\n                                Orientation:=orientation.Vertical\n                                Slots:=array:\n                                    stack_box_slot:\n                                        Distribution := option{0.7}\n                                        HorizontalAlignment:=horizontal_alignment.Fill\n                                        VerticalAlignment:=vertical_alignment.Fill\n                                        Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n\n                                        Widget:=overlay:\n                                            Slots:=array:\n                                                overlay_slot:\n                                                    HorizontalAlignment:=horizontal_alignment.Fill\n                                                    VerticalAlignment:=vertical_alignment.Fill\n                                                    Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n                                                    \n                                                    Widget:=overlay:\n                                                        Slots:=array:\n                                                            overlay_slot:\n                                                                HorizontalAlignment := horizontal_alignment.Center\n                                                                VerticalAlignment := vertical_alignment.Center\n                                                                Padding := margin{Top := 5.0, Left := 5.0, Right := 5.0, Bottom := 5.0}\n                                                                \n                                                                Widget:=Curr_button.MapHighlightColorBlock\n\n                                                            overlay_slot:\n                                                                HorizontalAlignment := horizontal_alignment.Center\n                                                                VerticalAlignment := vertical_alignment.Center\n                                                                Padding := margin{Top := 5.0, Left := 5.0, Right := 5.0, Bottom := 5.0}\n                                                                \n                                                                Widget:= texture_block{DefaultImage:= VoteTexture, DefaultDesiredSize := vector2{X:= 251.0,Y:= 251.0} }\n                                                                \n                                                            overlay_slot:\n                                                                HorizontalAlignment := horizontal_alignment.Center\n                                                                VerticalAlignment := vertical_alignment.Bottom\n                                                                Padding := margin{Top := 0.0, Left := 0.0, Right := 0.0, Bottom := 5.0}\n                                                                \n                                                                Widget:= text_block{\n                                                                DefaultTextColor:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetDefaultTextColor() else NamedColors.Green , \n                                                                DefaultText:= TextForUI(\"{VoteString}\")\n                                                                }\n\n                                    stack_box_slot:\n                                \n                                        HorizontalAlignment:=horizontal_alignment.Fill\n                                        VerticalAlignment:=vertical_alignment.Fill\n                                        Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n                                        Widget:=overlay:\n                                            Slots:=array:\n                                                overlay_slot:\n                                                    HorizontalAlignment:=horizontal_alignment.Fill\n                                                    VerticalAlignment:=vertical_alignment.Fill\n                                                    Padding:=margin{Top:=10.0,Left:=10.0,Right:=10.0,Bottom:=10.0}\n                                                    Widget:=overlay:\n                                                        Slots:=array:\n                                                            overlay_slot:\n                                                                HorizontalAlignment := horizontal_alignment.Center\n                                                                VerticalAlignment := vertical_alignment.Fill\n                                                                Padding := margin{Top := 0.0, Left := 0.0, Right := 0.0, Bottom := 0.0}\n                                                                Widget:= if(Background := Curr_button.Background?) then Background else color_block{DefaultOpacity:=0.0, DefaultDesiredSize:=Curr_button.BackgroundSize} \n                                                                \n                                                            #   Widget:= color_block{DefaultOpacity:=1.0, DefaultDesiredSize:= vector2{X:= 245.0, Y:= 55.0}}\n                                                            overlay_slot:\n                                                                HorizontalAlignment:=horizontal_alignment.Fill\n                                                                VerticalAlignment:=vertical_alignment.Fill\n                                \n                                                                Widget:= Curr_button.Widget\n                                \n                        )\n            }\n\n            MapVoteOverlay:= overlay:\n                Slots:=array:\n                    overlay_slot:\n                        HorizontalAlignment:=horizontal_alignment.Fill\n                        VerticalAlignment:=vertical_alignment.Fill\n                        Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n        \n                        Widget:=color_block{DefaultOpacity:=0.2, DefaultDesiredSize:= vector2{X:= 530.0, Y:= 405.0}}#\n\n                    overlay_slot:\n                        HorizontalAlignment:=horizontal_alignment.Fill\n                        VerticalAlignment:=vertical_alignment.Fill\n                        Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n        \n                        Widget:=stack_box:\n                            Orientation:=orientation.Vertical\n                            Slots:=array:\n                                stack_box_slot:\n                                    HorizontalAlignment:=horizontal_alignment.Fill\n                                    VerticalAlignment:=vertical_alignment.Fill\n                                    Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n                                    Widget:=overlay:\n                                        Slots:=array:\n                                            overlay_slot:\n                                                HorizontalAlignment:=horizontal_alignment.Fill\n                                                VerticalAlignment:=vertical_alignment.Fill\n                                                Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n                                                Widget:=color_block{\n                                                DefaultColor:=if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetHeaderTint() else NamedColors.Green , \n                                                DefaultDesiredSize:= vector2{X:= 530.0, Y:= 65.0}\n                                                }\n                                            overlay_slot:\n                                                HorizontalAlignment:=horizontal_alignment.Center\n                                                VerticalAlignment:=vertical_alignment.Center\n                                                Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n                                                Widget:= text_block{\n                                                DefaultTextColor:= if(UIControllPanel:=MaybeUIControllPanel?) then UIControllPanel.GetDefaultTextColor() else NamedColors.Green , \n                                                DefaultText:= TextForUI(\"VOTE\")\n                                                }\n                                \n                                stack_box_slot:\n                                    HorizontalAlignment:=horizontal_alignment.Fill\n                                    VerticalAlignment:=vertical_alignment.Fill\n                                    Padding:=margin{Top:=0.0,Left:=0.0,Right:=0.0,Bottom:=0.0}\n        \n                                    Widget:=HORI_Maps_Stack_Box\n            \n            Canvas:canvas = canvas:\n                Slots:= array:\n                    canvas_slot:\n                        Anchors:=anchors{Minimum:=vector2{X:=0.0,Y:=1.0},Maximum:=vector2{X:=0.0,Y:=1.0}}\n                        Offsets:= margin{Top:=-70.0,Left:=70.0,Right:=0.0,Bottom:=-70.0}\n                        Alignment:=vector2{X:=0.0,Y:=1.0}\n                        ZOrder:= 2\n                        SizeToContent := true\n                        Widget:=MapVoteOverlay\n        \n            return Canvas\n\n        }\n        \n    }\n\n    ",
  "external_calls": [
    "ui_base.verse",
    "VotingSystem.verse",
    "ui_assets.verse"
  ]
}
