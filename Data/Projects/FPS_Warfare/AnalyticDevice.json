{
  "file_name": "AnalyticDevice.verse",
  "questions": [
    "How do I create a central analytics manager to track different player actions like using perks or selecting maps?",
    "What is the Verse code for a system that can send different analytics events based on an enum?",
    "I need a script to track which perks are used, which maps are selected, and when players reach certain levels."
  ],
  "explanation": "This script defines an 'AnalyticsModule' that acts as a centralized hub for sending various analytics events throughout the game. It uses an 'analytic_type' enum to categorize different trackable actions such as perks being used, maps being selected, levels being reached, or UI menus being opened.\n\n- **Structure:** The script uses several helper classes ('perk_used_analytic', 'map_selected_analytic', etc.) to group related 'analytics_device' instances. This provides a clean and organized way to manage a large number of tracking events in the UEFN editor.\n- **Core Logic:** The main public function is 'SendAnalytic'. Other scripts in the project call this function when a notable event occurs. The function uses a 'case' statement to check the 'analytic_type' and routes the request to the correct, specific 'analytics_device' to submit the data for the player.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Fortnite.com/Characters }\nusing { /Fortnite.com/Game }\nusing { /Verse.org/Simulation/Tags }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /Verse.org/Simulation }\n      \nAnalyticsModule := module:\n\n    analytic_type<public>:=enum{\n        PerkUsed\n        MapSelected\n        LevelReached\n\n        OpenLoadoutUI\n        OpenChallengeUI\n        OpenShopUI\n        OpenInfoUI\n\n    }\n    perk_used_analytic := class(){\n        @editable\n        HealerPerkAnalytic:analytics_device=analytics_device{}\n        @editable\n        ExtraShieldPerkAnalytic:analytics_device=analytics_device{}\n        @editable\n        ExtraAmmoPerkAnalytic:analytics_device=analytics_device{}\n        @editable\n        XPBoostPerkAnalytic:analytics_device=analytics_device{}\n        @editable\n        SpeedsterPerkAnalytic:analytics_device=analytics_device{}\n    }\n\n    map_selected_analytic := class(){\n        @editable\n        ShipmentAnalytic:analytics_device=analytics_device{}\n        @editable\n        KillHouseAnalytic:analytics_device=analytics_device{}\n        @editable\n        CrossFireAnalytic:analytics_device=analytics_device{}\n        @editable\n        VillageAnalytic:analytics_device=analytics_device{}\n        @editable\n        CrashAnalytic:analytics_device=analytics_device{}\n    }\n    level_analytic := class(){\n        @editable\n        Level_3:analytics_device=analytics_device{}\n        @editable\n        Level_5:analytics_device=analytics_device{}\n        @editable\n        Level_10:analytics_device=analytics_device{}\n        @editable\n        Level_15:analytics_device=analytics_device{}\n        @editable\n        Level_20:analytics_device=analytics_device{}\n        @editable\n        Level_25:analytics_device=analytics_device{}\n        @editable\n        Level_30:analytics_device=analytics_device{}\n        @editable\n        Level_35:analytics_device=analytics_device{}\n        @editable\n        Level_40:analytics_device=analytics_device{}\n        @editable\n        Level_45:analytics_device=analytics_device{}\n        @editable\n        Level_50:analytics_device=analytics_device{}\n        @editable\n        Level_55:analytics_device=analytics_device{}\n    }\n\n    analytic_manager<public>:=class(creative_device){\n        @editable\n        PerkUsedAnalyticDevice :perk_used_analytic=perk_used_analytic{} \n        @editable\n        MapSelectedAnalyticDevice :map_selected_analytic=map_selected_analytic{} \n        @editable\n        LevelAnalyticDevice :level_analytic=level_analytic{} \n        \n        @editable\n        OpenLoadoutUIAnalyticDevice:analytics_device=analytics_device{}\n        @editable\n        OpenChallengeUIAnalyticDevice:analytics_device=analytics_device{}\n        @editable\n        OpenShopUIAnalyticDevice:analytics_device=analytics_device{}\n        @editable\n        OpenInfoUIAnalyticDevice:analytics_device=analytics_device{}\n\n        SendAnalytic<public>(Agent:agent, Analytic_Type:analytic_type, ?PerkType:?perk_enum=false, ?MapType:?votingSystemModule.currentmap=false, ?LevelUP:logic=false):void={\n\n            if:\n                Player := player[Agent]\n                PlayerController := Player.GetPlayerController[Self]\n                CurrentPlayerStats := PlayerController.PlayerStatsManager.GetPlayerStats[Player]\n            then:\n\n                case (Analytic_Type):\n                    analytic_type.PerkUsed =>\n                        if:\n                            UsedPerk := PerkType?\n                        then:\n                            case (UsedPerk):\n                                perk_enum.Healer => PerkUsedAnalyticDevice.HealerPerkAnalytic.Submit(Agent)\n                                perk_enum.Armoured => PerkUsedAnalyticDevice.ExtraShieldPerkAnalytic.Submit(Agent)\n                                perk_enum.XpBoost => PerkUsedAnalyticDevice.XPBoostPerkAnalytic.Submit(Agent)\n                                perk_enum.AmmoMan => PerkUsedAnalyticDevice.ExtraAmmoPerkAnalytic.Submit(Agent)\n                                perk_enum.Speedster => PerkUsedAnalyticDevice.SpeedsterPerkAnalytic.Submit(Agent)\n                            \n                    analytic_type.MapSelected =>\n                        if:\n                            SelectedMap := MapType?\n                        then:\n                            case (SelectedMap):\n                                votingSystemModule.currentmap.Shipment => MapSelectedAnalyticDevice.ShipmentAnalytic.Submit(Agent)\n                                votingSystemModule.currentmap.KillHouse => MapSelectedAnalyticDevice.KillHouseAnalytic.Submit(Agent)\n                                votingSystemModule.currentmap.Market => MapSelectedAnalyticDevice.CrossFireAnalytic.Submit(Agent)\n                                votingSystemModule.currentmap.Village => MapSelectedAnalyticDevice.VillageAnalytic.Submit(Agent)\n                                votingSystemModule.currentmap.Crash => MapSelectedAnalyticDevice.CrashAnalytic.Submit(Agent)\n\n                    analytic_type.LevelReached =>\n                        if:\n                            LevelUP?\n                        then:\n                            case (CurrentPlayerStats.Level):\n\n                                3 => LevelAnalyticDevice.Level_3.Submit(Agent)\n                                5 => LevelAnalyticDevice.Level_5.Submit(Agent)\n                                10 => LevelAnalyticDevice.Level_10.Submit(Agent)\n                                15 => LevelAnalyticDevice.Level_15.Submit(Agent)\n                                20 => LevelAnalyticDevice.Level_20.Submit(Agent)\n                                25 => LevelAnalyticDevice.Level_25.Submit(Agent)\n                                30 => LevelAnalyticDevice.Level_30.Submit(Agent)\n                                35 => LevelAnalyticDevice.Level_35.Submit(Agent)\n                                40 => LevelAnalyticDevice.Level_40.Submit(Agent)\n                                45 => LevelAnalyticDevice.Level_45.Submit(Agent)\n                                50 => LevelAnalyticDevice.Level_50.Submit(Agent)\n                                55 => LevelAnalyticDevice.Level_55.Submit(Agent)\n                                _ => # default\n                                    Print(\"Default case body\")\n                    analytic_type.OpenLoadoutUI =>\n                        OpenLoadoutUIAnalyticDevice.Submit(Agent)\n\n                    analytic_type.OpenChallengeUI =>\n                        OpenChallengeUIAnalyticDevice.Submit(Agent)\n                        \n                    analytic_type.OpenShopUI =>\n                        OpenShopUIAnalyticDevice.Submit(Agent)\n                        \n                    analytic_type.OpenInfoUI =>\n                        OpenInfoUIAnalyticDevice.Submit(Agent)\n        }           \n\n    }",
  "external_calls": [
    "player_controller.verse",
    "player_stats_manager.verse",
    "perks.verse",
    "voting_system.verse"
  ]
}