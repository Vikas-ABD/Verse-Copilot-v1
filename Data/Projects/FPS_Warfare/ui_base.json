{
  "file_name": "ui_base.verse",
  "questions": [
    "How do I create a foundational framework for all my game's UI in Verse?",
    "What is the Verse code for a central UI settings device to control colors and styles across multiple menus?",
    "How can I create a base class for managing UI canvases that can be added or removed from a player's screen?"
  ],
  "explanation": "This script, 'ui_base.verse', establishes a foundational framework for the entire user interface of the game. It is not a single UI, but rather a collection of base classes, enums, and settings managers that other, more specific UI scripts will use.\n\n- **Structure:** It defines a 'CustomUI' module that contains abstract base classes like 'ui_base' (for managing canvases) and 'button_base'. It also includes numerous settings classes (e.g., 'universal_setting', 'progress_bar_settings', 'ScoreBoard_ui_settings') to hold configurable properties like colors and opacity.\n- **Central Control:** The most important component is the 'ui_controll_panel_device'. This device acts as a central hub where a designer can set all the visual styles for the game's UI in one place in the UEFN editor. Other scripts can then query this device to get the correct colors and tints, ensuring a consistent look and feel across all menus.",
  "code": "using { /UnrealEngine.com/Temporary/UI }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Verse.org/Colors }\nusing { /Fortnite.com/UI }\nusing { /Verse.org/Simulation }\nusing { /Fortnite.com/Devices }\n\nCustomUI:=module:\n\n    action_type_enum<public>:=enum{\n        Exit\n        NextWeaponPage\n        PreviousWeaponPage\n        Info\n        NextLoadout\n        PreviousLoadout\n        \n    }\n\n    action_button<public>:=class(CustomUI.button_base){\n        BackgroundSize<override>:vector2=vector2{X:= 200.0, Y:= 55.0}\n        ActionType<public>:action_type_enum\n    }\n\n\n    ui_settings_base<public>:=class<abstract>:\n        \n        @editable\n        DefaultTextColor<public>:color=NamedColors.White\n        @editable\n        HeaderTint<public>:color=NamedColors.White\n        @editable\n        ButtonDefaultTint<public>:color=NamedColors.White\n        @editable\n        ButtonSelectedTint<public>:color=NamedColors.White\n        @editable\n        LobbyPagesBackgroundColor<public>:color=NamedColors.White\n        \n    \n    universal_setting<public>:= class<final><concrete>(ui_settings_base){\n\n    }\n    progress_bar_settings<public>:= class<final><concrete>{\n        @editable\n        BackgroundColor<public>:color=NamedColors.Black\n        @editable\n        ForegroundColor<public>:color=NamedColors.White\n    }\n    team_score_progress_bar_settings<public>:= class<final><concrete>{\n        @editable\n        BackgroundColor<public>:color=NamedColors.Black\n        @editable\n        ForegroundColor<public>:color=NamedColors.White\n    }\n    challenge_ui_settings<public>:= class<final><concrete>{\n        @editable\n        MainContainerColor<public>:color=NamedColors.White\n        @editable\n        MainContainerOpacity<public>:type{ X:float where X >=0.0, X<= 1.0}= 1.0\n        @editable\n        DailyChallengeContainerColor<public>:color=NamedColors.White\n        @editable\n        DailyChallengeContainerOpacity<public>:type{ X:float where X >=0.0, X<= 1.0}= 1.0\n        @editable\n        BootcampChallengeContainerColor<public>:color=NamedColors.White\n        @editable\n        BootcampChallengeContainerOpacity<public>:type{ X:float where X >=0.0, X<= 1.0}= 1.0\n    }\n    ScoreBoard_ui_settings<public>:= class<final><concrete>{\n        @editable\n        BG<public>:color=NamedColors.White\n        @editable\n        BGScoreMain<public>:color=NamedColors.White\n        @editable\n        BGScoreMainContainer<public>:type{ X:float where X >=0.0, X<= 1.0}= 0.1\n        @editable\n        Team1Header<public>:color=NamedColors.White\n        @editable\n        Team1Container<public>:color=NamedColors.White\n        @editable\n        Team1ContainerOpacity<public>:type{ X:float where X >=0.0, X<= 1.0}= 0.15\n        @editable\n        Team2Header<public>:color=NamedColors.White\n        @editable\n        Team2Container<public>:color=NamedColors.White\n        @editable\n        Team2ContainerOpacity<public>:type{ X:float where X >=0.0, X<= 1.0}= 0.15\n        @editable\n        Footer<public>:color=NamedColors.White\n        @editable\n        FooterScoreColor<public>:color=NamedColors.White\n        @editable\n        Team1Highlight<public>:color=NamedColors.White\n        @editable\n        Team2Highlight<public>:color=NamedColors.White\n        @editable\n        HeaderHighlight<public>:color=NamedColors.White\n        @editable\n        ScoreHighlight<public>:color=NamedColors.White\n        \n    }\n\n    \n\n    button_base<public>:=class<unique><abstract>{\n        # @editable\n        Widget<public>:text_button_base\n        # Text:string\n        BackgroundSize<public>:vector2\n        Background<public>:?texture_block \n        DefaultTint<public>:color\n        SelectedTint<public>:color\n    }\n\n    ui_base<public>:=class<abstract>{\n\n        MaybeWeaponLoadoutDevice<public>:?weapon_loadout_device = false\n\n        MaybeUIControllPanel<public>:?ui_controll_panel_device = false\n\n        var MaybeCanvas<public>:?canvas  = false\n\n        AddWidget<public>(Agent:agent, CreateUI : agent->canvas):void={\n            if:\n                InPlayer:=player[Agent]\n                PlayerUI:= GetPlayerUI[InPlayer]\n                not MaybeCanvas?\n            then:  \n                Canvas := CreateUI(Agent)\n\n                Print(\"AddWidget\")\n                PlayerUI.AddWidget(Canvas,player_ui_slot{InputMode := ui_input_mode.All, ZOrder := 3})\n                set MaybeCanvas = option{Canvas}\n                if(MaybeCanvas?){\n                    Print(\"MaybeCanvas  set \")\n                }\n            else:\n                #C Print(\"Widget not Added\", ?Duration:=6.0)\n        }\n\n        RemoveWidget<public>(Agent:agent):void={\n\n            if:\n                InPlayer:=player[Agent]\n                PlayerUI:= GetPlayerUI[InPlayer]\n                MyCanvas := MaybeCanvas?\n            then:\n                Print(\"Widget removed\", ?Duration:=6.0)\n                PlayerUI.RemoveWidget(MyCanvas)\n\n                set MaybeCanvas = false\n\n        }\n\n    }\n\n    ui_controll_panel_device<public>:= class(creative_device){\n\n        @editable\n        UniversalSettings<public>:universal_setting=universal_setting{}\n        @editable\n        ProgressBarSettings<public>:progress_bar_settings=progress_bar_settings{}\n\n        @editable\n        Team_1_BarSettings<public>:team_score_progress_bar_settings=team_score_progress_bar_settings{}\n        @editable\n        Team_2_BarSettings<public>:team_score_progress_bar_settings=team_score_progress_bar_settings{}\n\n        @editable\n        ChallengeUISettings<public>:challenge_ui_settings=challenge_ui_settings{}\n        @editable\n        ScoreBoardUISettings<public>:ScoreBoard_ui_settings=ScoreBoard_ui_settings{}\n\n        @editable\n        LoadoutTextBGColor<public>:color=NamedColors.White\n        # @editable\n        # LoadoutUISettings<public>:loadout_ui_setting=loadout_ui_setting{}\n\n        GetDefaultTextColor<public>():color=\n            UniversalSettings.DefaultTextColor\n\n        GetHeaderTint<public>():color=\n            UniversalSettings.HeaderTint\n\n        GetButtonDefaultTint<public>():color=\n            UniversalSettings.ButtonDefaultTint\n\n        GetButtonSelectedTint<public>():color=\n            UniversalSettings.ButtonSelectedTint\n\n        GetLobbyPageBackgroundColor<public>():color=\n            UniversalSettings.LobbyPagesBackgroundColor\n    }",
  "external_calls": [
    "weapon_loadout_device.verse"
  ]
}
