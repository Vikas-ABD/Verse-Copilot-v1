{
  "file_name": "UI_progressbar.verse",
  "questions": [
    "How do I create a reusable custom progress bar for my UI in Verse?",
    "What is the Verse code for a progress bar that can be styled with colors or textures?",
    "How can I smoothly animate a progress bar's value over time instead of having it update instantly?"
  ],
  "explanation": "This script defines a 'ui_progress_bar' class, which is a powerful and reusable UI component for creating custom progress bars. It is not a device itself but a helper class intended to be used by other HUD scripts.\n\n- **Customization:** The progress bar is highly configurable. It can be created with solid colors or with custom textures for both its foreground (the fill) and background. Its size and orientation (left-to-right or right-to-left) can also be set.\n- **Core Logic:** The `GetWidget()` function assembles the final UI element by layering a foreground color/texture block on top of a background one. The `SetProgress()` method is the key function for updating the bar; it calculates the new width of the foreground block based on the current progress percentage.\n- **Animation:** A key feature is the `AnimatedProgress` function. This is a `suspends` function that runs a loop to smoothly animate the progress bar from one value to another over a specified duration, providing a much more polished visual effect than an instant update.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Fortnite.com/Characters }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/Random }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /UnrealEngine.com/Temporary/UI }\nusing { /Fortnite.com/UI }\nusing { /UnrealEngine.com/Temporary/SpatialMath}\nusing { /Verse.org/Colors }\nusing { /Verse.org/Colors/NamedColors }\nusing { /Verse.org/Assets }\n\nui_progress_bar_RightToLeft:tuple(horizontal_alignment,vertical_alignment) = (horizontal_alignment.Right,vertical_alignment.Center)\nui_progress_bar_LeftToRight:tuple(horizontal_alignment,vertical_alignment) = (horizontal_alignment.Left,vertical_alignment.Center)\n\nMake_ui_progress_bar(iCurrentProgress:float,iTotalProgress:float,InOrientation: tuple(horizontal_alignment,vertical_alignment),InSize:vector2, ?InFrontColor:?color=false, ?InFrontTexture:?texture=false, ?InBackColor:?color=false, ?InBackTexture:?texture=false):ui_progress_bar={\n\n    var MaybeFrontTextureBlock : ?texture_block = false\n    var MaybeBackTextureBlock : ?texture_block = false\n    if:\n        Texture := InBackTexture?\n    then:\n        BackTextureBlock:=texture_block{\n            DefaultImage := Texture,\n            DefaultDesiredSize := InSize\n        }\n        set MaybeBackTextureBlock = option{BackTextureBlock}\n\n    if:\n        Texture := InFrontTexture?\n    then:\n        TextureBlock:=texture_block{\n            DefaultImage := Texture\n        }\n        set MaybeFrontTextureBlock = option{TextureBlock}\n\n\n    return ui_progress_bar{CurrentProgress:=iCurrentProgress,TotalProgress:=iTotalProgress,Orientation:=InOrientation,Size:=InSize,FrontColor:=InFrontColor, MaybeFrontTextureBlock := MaybeFrontTextureBlock, BackColor:= InBackColor, MaybeBackTextureBlock := MaybeBackTextureBlock}\n}\n\n\nui_progress_bar := class(){\n\n    # TextForUI<localizes>(name:string, current_hp:float, total_hp:float): message =  \"{name}: {current_hp}/{total_hp}\"\n\n    # var Progress: float = 100.0\n    var CurrentProgress: float = 0.0\n    var TotalProgress: float = 0.0\n\n    Orientation: tuple(horizontal_alignment,vertical_alignment)\n\n    Size: vector2\n\n    var FrontColor: ?color = false\n    var BackColor: ?color = false\n\n    var FrontColorBlock : color_block = color_block{}\n    var BackColorBlock : color_block = color_block{}\n\n    var MaybeFrontTextureBlock : ?texture_block = false\n    var MaybeBackTextureBlock : ?texture_block = false\n    # var TextBlock : text_block = text_block{}\n\n    GetWidget():overlay={\n        if:\n            Color := FrontColor?\n        then:\n            set FrontColorBlock = color_block{                                         \n                DefaultColor := Color,\n                DefaultOpacity := 1.0,\n                DefaultDesiredSize := vector2{X := ( (Size.X - 6.0) * CurrentProgress)/TotalProgress  , Y := Size.Y - 5.0}      \n            }\n        if:\n            FrontTextureBlock := MaybeFrontTextureBlock?\n        then:\n            FrontTextureBlock.SetDesiredSize(vector2{X :=((Size.X - 6.0) * CurrentProgress)/TotalProgress  , Y := Size.Y - 5.0})\n\n        if:\n            Color := BackColor?\n        then:\n            set BackColorBlock = color_block{                                         \n                DefaultColor := Color,\n                DefaultOpacity := 1.0,\n                DefaultDesiredSize := Size\n            }\n        \n        \n        # SetProgress(CurrentProgress)\n\n\n        MyOverlay : overlay = overlay:\n            Slots := array:\n                overlay_slot:\n                    HorizontalAlignment := horizontal_alignment.Fill      \n                    VerticalAlignment := vertical_alignment.Fill\n                    Widget := if(BackTextureBlock := MaybeBackTextureBlock?) then BackTextureBlock else BackColorBlock\n\n                overlay_slot:\n                    HorizontalAlignment := Orientation(0)    \n                    VerticalAlignment := Orientation(1)\n\n                    Padding := margin{Top := 0.0, Left := 3.0, Right := 3.0, Bottom := 0.0}\n\n                    Widget := if(FrontTextureBlock := MaybeFrontTextureBlock?) then FrontTextureBlock else FrontColorBlock\n        return MyOverlay\n    }\n    AnimatedProgress(ParentOverlay:overlay, Duration:float,LastProgress:float , Progress:float)<suspends>:void={\n        var TimeStep: float = 0.016  # Simulating ~60 FPS (1/60 seconds per frame)\n        var TotalSteps:int= if(NewValue := Ceil[Duration / TimeStep]) then NewValue else 0 # Total steps needed for the animation\n        var DeltaProgress: float = Progress - LastProgress  # Total progress to animate\n        var StepIncrement: float = DeltaProgress / (TotalSteps * 1.0) # Increment per step\n\n        var XValue: float = LastProgress  # Start from the initial progress\n\n        loop:\n            Sleep(TimeStep)  # Wait for the simulated time step\n\n            ParentOverlay.RemoveWidget(GetWidget())\n\n            # Increment the progress\n            set XValue += StepIncrement\n\n            # Clamp the progress to ensure it doesn't exceed the target\n            var ClampedValue: float = Clamp(XValue, LastProgress, Progress)\n\n            SetProgress(ClampedValue)\n\n            Print(\"Animating target progress {ClampedValue}\")\n\n            ParentOverlay.AddWidget(\n                overlay_slot:\n                    HorizontalAlignment := horizontal_alignment.Center\n                    VerticalAlignment := vertical_alignment.Fill\n                    Padding := margin{Top := 20.0, Left := 0.0, Right := 0.0, Bottom := 20.0}\n\n                    Widget := GetWidget()\n            )\n\n            # Break if we reach or exceed the target progress\n            if:\n                (DeltaProgress >= 0.0 and ClampedValue >= Progress) or\n                (DeltaProgress < 0.0 and ClampedValue <= Progress)\n            then:\n                break\n\n    }\n    SetProgress(ParentOverlay:overlay, InProgress:float):void={\n        ClampedValue := Clamp(InProgress, 0.0, TotalProgress)\n\n        set CurrentProgress = ClampedValue\n\n        if(Orientation(1)=vertical_alignment.Center){\n            #C Print(\"Updated Current Progress {CurrentProgress}, TotalProgress {TotalProgress}\")\n            FrontColorBlock.SetDesiredSize(vector2{X:= (Size.X * CurrentProgress)/TotalProgress })\n        }\n\n        ParentOverlay.AddWidget(\n            overlay_slot:\n                HorizontalAlignment := horizontal_alignment.Center\n                VerticalAlignment := vertical_alignment.Fill\n                Padding := margin{Top := 0.0, Left := 0.0, Right := 0.0, Bottom := 0.0}\n\n                Widget:= GetWidget()\n        )\n\n    }\n\n    SetProgress(InProgress:float):void={\n        set CurrentProgress = InProgress\n\n        if(Orientation(1)=vertical_alignment.Center){\n            #C Print(\"Updated Current Progress {CurrentProgress}, TotalProgress {TotalProgress}\")\n            FrontColorBlock.SetDesiredSize(vector2{X:= (Size.X * CurrentProgress)/TotalProgress })\n        }\n    }\n\n    setFrontColor(Color:color):void={\n        set FrontColor = option{Color}\n        FrontColorBlock.SetColor(Color)\n    }\n\n    setBackColor(Color:color):void={\n        set BackColor = option{Color}\n        BackColorBlock.SetColor(Color)\n    }\n\n}",
  "external_calls": [
    "ui_assets.verse"
  ]
}
