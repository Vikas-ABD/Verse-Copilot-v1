{
  "file_name": "hud_custom_slider_device.verse",
  "questions": [
    "How do I create a custom progress bar or slider for my HUD in Verse?",
    "What is the code for a reusable progress bar UI widget?",
    "I need a script to create a UI bar that can be filled horizontally or vertically with different colors."
  ],
  "explanation": "This script provides a flexible and reusable 'progress_bar' class for creating custom UI sliders and bars. It is not a creative device itself, but a helper class intended to be used by other HUD scripts.\n\n- **Core Components:**\n  - **Orientation & Color Constants:** It defines several constants for easy use, including tuples for orientation (like 'RightToLeft', 'DownToUp') and pre-defined 'color' variables for consistent styling.\n  - **`progress_bar` Class:** This is the main component. It is built by placing a smaller 'FrontColorBlock' on top of a larger 'BackColorBlock' inside an 'overlay'.\n\n- **How it Works:**\n  1. You create an instance of the `progress_bar` class, defining its orientation, size, and colors.\n  2. You call the `GetWidget()` method to get the final 'overlay' widget, which you can then add to your main player HUD.\n  3. To update the bar's fill level, you call the `SetProgress()` method, passing a float value between 0.0 and 1.0.\n  4. `SetProgress()` calculates the new size for the `FrontColorBlock`. For a horizontal bar, it adjusts the width; for a vertical bar, it adjusts the height, creating the visual effect of the bar filling up.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /UnrealEngine.com/Temporary/SpatialMath}\nusing { /Verse.org/Colors }\nusing { /UnrealEngine.com/Temporary/UI }\nusing { /Fortnite.com/UI }\n\nRightToLeft:tuple(horizontal_alignment,vertical_alignment)=(horizontal_alignment.Right,vertical_alignment.Fill)\nLeftToRight:tuple(horizontal_alignment,vertical_alignment)=(horizontal_alignment.Left,vertical_alignment.Fill)\nDownToUp:tuple(horizontal_alignment,vertical_alignment)=(horizontal_alignment.Fill,vertical_alignment.Bottom)\nUpToDown:tuple(horizontal_alignment,vertical_alignment)=(horizontal_alignment.Fill,vertical_alignment.Top)\n\nPitBackgroundColor<public> : color = MakeColorFromHex(\"#4F5055FF\")\nPitRedColor<public> : color = MakeColorFromHex(\"#FF4F34FF\")\nPitBlueColor<public> : color = MakeColorFromHex(\"#A4E3FFFF\")\n \nMakeProgressBar(InProgress:float,InOrientation:tuple(horizontal_alignment,vertical_alignment),InSize:vector2,InFrontColor:color,InBackColor:color):progress_bar=\n    return progress_bar{Progress:=InProgress,Orientation:=InOrientation,Size:=InSize,FrontColor:=InFrontColor,BackColor:=InBackColor}\n \nprogress_bar := class:\n \n    var Progress : float = 0.0\n    Orientation : tuple(horizontal_alignment,vertical_alignment)\n    Size : vector2\n    var FrontColor : color = color{}\n    var BackColor : color = color{}\n \n    var FrontColorBlock : color_block = color_block{}\n    var BackColorBlock : color_block = color_block{}\n \n    #Return a widget to be used in your UI\n    #As a widget, you can only use one progress_bar once.\n    GetWidget():overlay=\n        set FrontColorBlock = color_block{DefaultColor:=FrontColor,DefaultDesiredSize:=vector2{X:=0.0,Y:=0.0}}\n        set BackColorBlock = color_block{DefaultColor:=BackColor,DefaultDesiredSize:=Size}\n        SetProgress(Progress)\n        return overlay:\n            Slots:=array:\n                overlay_slot: \n                    Widget:=BackColorBlock\n                    HorizontalAlignment:=horizontal_alignment.Fill\n                    VerticalAlignment:=vertical_alignment.Fill\n                overlay_slot:\n                    Padding := margin{Top := 10.0, Left := 10.0, Right := 10.0, Bottom := 10.0}\n                    Widget:=FrontColorBlock\n                    HorizontalAlignment:=Orientation(0)\n                    VerticalAlignment:=Orientation(1)\n \n    #Updates the progress displayed\n    SetProgress(InProgress:float):void=\n        set Progress = InProgress\n        #If the orientation is vertical\n        if(Orientation(0)=horizontal_alignment.Fill):\n            FrontColorBlock.SetDesiredSize(vector2{Y:=Size.Y*Progress})\n \n        #If the orientation is horizontal\n        if(Orientation(1)=vertical_alignment.Fill):\n            FrontColorBlock.SetDesiredSize(vector2{X:=Size.X*Progress})\n \n    #Sets the color of the front of the progress bar\n    SetFrontColor(MyColor:color):void=\n        set FrontColor = MyColor\n        FrontColorBlock.SetColor(FrontColor)\n \n    #Sets the color of the back of the progress bar \n    SetBackColor(MyColor:color):void=\n        set BackColor = MyColor\n        BackColorBlock.SetColor(BackColor)",
  "external_calls": []
}