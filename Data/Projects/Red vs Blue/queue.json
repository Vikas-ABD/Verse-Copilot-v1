{
  "file_name": "queue.verse",
  "questions": [
    "How do I implement a Queue data structure in Verse?",
    "What's the code for a generic First-In, First-Out (FIFO) queue?",
    "I need a reusable queue class with Enqueue and Dequeue methods."
  ],
  "explanation": "This script defines a generic 'queue(t)' class, providing a reusable First-In, First-Out (FIFO) data structure. Because it's generic, it can be used to create a queue of any type (e.g., a queue of integers or a queue of custom class objects).\n\n- **Core Methods:**\n  - `Enqueue`: Adds a new element to the back of the queue.\n  - `Dequeue`: Removes and returns the element from the front of the queue.\n  - `Front` / `Rear`: Returns the element at the front or back of the queue without removing it.\n  - `IsEmpty` / `Size`: Checks if the queue is empty and returns its current size.\n\n- **Implementation:** The queue is built on top of a simple array. It follows an immutable pattern, where methods like `Enqueue` and `Dequeue` return a new, modified instance of the queue rather than changing the original one.",
  "code": "queue<public>(t:type) := class:\n    Elements<internal>:[]t = array{}\n \n    # Adds a new element to the back of the queue by returning a\n    # new queue with NewElement at the back.\n    Enqueue<public>(NewElement:t):queue(t)=\n        queue(t){Elements := Elements + array{NewElement}}\n \n    # Removes the element at the front of the queue and returns a tuple of\n    # both a new queue with the element removed and the removed element.\n    Dequeue<public>()<decides><transacts>:tuple(queue(t),t)=\n        FirstElement := Front[]\n        (queue(t){Elements := Elements.RemoveElement[0]}, FirstElement)\n \n    # Returns the size of the queue\n    Size<public>()<transacts>:int=\n        Elements.Length\n \n    # Succeeds if the queue is empty\n    IsEmpty<public>()<decides><transacts>:void=\n        Size() = 0\n \n    # Returns the element at the front of the queue.\n    Front<public>()<decides><transacts>:t=\n        Elements[0]\n \n    # Returns the element at the back of the queue.\n    Rear<public>()<decides><transacts>:t=\n        Elements[Elements.Length - 1]\n        \n# Creates and returns a queue from an initial array of elements InitialElements.\nCreateQueue<public><constructor>(InitialElements:[]t where t:type) := queue(t):\n    Elements := InitialElements",
  "external_calls": []
}