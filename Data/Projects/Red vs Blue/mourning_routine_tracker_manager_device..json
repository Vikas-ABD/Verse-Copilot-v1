{
  "file_name": "mourning_routine_tracker_manager_device.verse",
  "questions": [
    "How do I create a questline where players complete objectives one after another?",
    "What is the Verse code for a sequential tracker system?",
    "How can I automatically assign a new tracker to a player when they complete the previous one?"
  ],
  "explanation": "This script defines a 'sequential_tracker_manager' device that guides a player through a series of five objectives in a specific order. It uses five '@editable' 'tracker_device' instances for the objectives.\n\n- **Player Progress:** It uses a map called 'PlayerProgress' to store which objective (1 through 5) each player is currently working on.\n\n- **How it Works:\n** 1.  In 'OnBegin', the script subscribes to the 'CompleteEvent' of each tracker. It also finds every player in the game and assigns them the first tracker.\n  2. When a player completes 'Tracker1', the 'OnTracker1Completed' function is triggered. This function removes the player from 'Tracker1' and immediately assigns them to 'Tracker2'.\n  3. This pattern repeats for all subsequent trackers. When 'Tracker2' is completed, the player is moved to 'Tracker3', and so on.\n  4. When the final tracker is completed, a confirmation message is printed, and the player is removed from the last tracker, completing the sequence.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Fortnite.com/Characters }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\n\n# A device that manages sequential progression through a series of trackers\nsequential_tracker_manager<public> := class(creative_device):\n    # The five tracker devices that players will progress through\n    @editable\n    Tracker1<public>:tracker_device = tracker_device{}\n    \n    @editable\n    Tracker2<public>:tracker_device = tracker_device{}\n    \n    @editable\n    Tracker3<public>:tracker_device = tracker_device{}\n    \n    @editable\n    Tracker4<public>:tracker_device = tracker_device{}\n    \n    @editable\n    Tracker5<public>:tracker_device = tracker_device{}\n    \n    # Store which tracker each player is currently on\n    var PlayerProgress<private> : [agent]int = map{}\n    \n    # Called when the device is started in a running game\n    OnBegin<override>()<suspends>:void=\n        # Subscribe to the PlayerAddedEvent to handle new players\n        # GetPlayspace().PlayerAddedEvent().Subscribe(OnPlayerAdded)\n        \n        # Subscribe to completion events for all trackers\n        Tracker1.CompleteEvent.Subscribe(OnTracker1Completed)\n        Tracker2.CompleteEvent.Subscribe(OnTracker2Completed)\n        Tracker3.CompleteEvent.Subscribe(OnTracker3Completed)\n        Tracker4.CompleteEvent.Subscribe(OnTracker4Completed)\n        Tracker5.CompleteEvent.Subscribe(OnTracker5Completed)\n        \n        # Assign the first tracker to all players when the game begins\n        AllPlayers := GetPlayspace().GetPlayers()\n        for (Player : AllPlayers):\n            AssignFirstTracker(Player)\n            \n        # Success log\n        Print(\"Sequential Tracker Manager initialized with 5 trackers\", ?Duration:=5.0)\n    \n    # Called when a new player joins the game\n    # OnPlayerAdded(Player:agent):void=\n    #     Print(\"New player joined! Assigning first tracker.\", ?Duration:=3.0)\n    #     AssignFirstTracker(Player)\n    \n    # Assigns the first tracker to a player\n    AssignFirstTracker(Player:agent):void=\n        if(CurrentProgress := PlayerProgress[Player]):\n            # Check if player has no progress or progress is 0\n            if (CurrentProgress = 0):\n                Print(\"Assigning Tracker 1 to Player\", ?Duration:=3.0)\n                # First untrack from all other trackers to be safe\n                Tracker1.Remove(Player)\n                Tracker2.Remove(Player)\n                Tracker3.Remove(Player)\n                Tracker4.Remove(Player)\n                Tracker5.Remove(Player)\n                \n                # Now track with the first tracker\n                Tracker1.Assign(Player)\n                if (set PlayerProgress[Player] = 1) {}\n    \n    # Event handlers for each tracker completion\n    OnTracker1Completed(Agent:agent):void=\n        Print(\"Player completed Tracker 1\", ?Duration:=3.0)\n        # # Only proceed if they were actually on tracker 1\n        # if(CurrentProgress := PlayerProgress[Agent]):\n        #     if (CurrentProgress = 1):\n        #         if (set PlayerProgress[Agent] = 2):\n        #             # First untrack from the previous tracker\n        Tracker1.Remove(Agent)\n        # Then track with the next tracker\n        Tracker2.Assign(Agent)\n    \n    OnTracker2Completed(Agent:agent):void=\n        Print(\"Player completed Tracker 2\", ?Duration:=3.0)\n        # # Only proceed if they were actually on tracker 2\n        # if(CurrentProgress := PlayerProgress[Agent]):\n        #     if (CurrentProgress = 2):\n        #         if (set PlayerProgress[Agent] = 3):\n        #             # First untrack from the previous tracker\n        Tracker2.Remove(Agent)\n        # Then track with the next tracker\n        Tracker3.Assign(Agent)\n    \n    OnTracker3Completed(Agent:agent):void=\n        Print(\"Player completed Tracker 3\", ?Duration:=3.0)\n        # # Only proceed if they were actually on tracker 3\n        # if(CurrentProgress := PlayerProgress[Agent]):\n        #     if (CurrentProgress = 3):\n        #         if (set PlayerProgress[Agent] = 4):\n                    # First untrack from the previous tracker\n        Tracker3.Remove(Agent)\n        # Then track with the next tracker\n        Tracker4.Assign(Agent)\n    \n    OnTracker4Completed(Agent:agent):void=\n        Print(\"Player completed Tracker 4\", ?Duration:=3.0)\n        # # Only proceed if they were actually on tracker 4\n        # if(CurrentProgress := PlayerProgress[Agent]):\n        #     if (CurrentProgress = 4):\n        #         if (set PlayerProgress[Agent] = 5):\n        #             # First untrack from the previous tracker\n        Tracker4.Remove(Agent)\n        # Then track with the next tracker\n        Tracker5.Assign(Agent)\n    \n    OnTracker5Completed(Agent:agent):void=\n        Print(\"Player completed all trackers!\", ?Duration:=5.0)\n        # Only proceed if they were actually on tracker 5\n        # if(CurrentProgress := PlayerProgress[Agent]):\n        #     if (CurrentProgress = 5):\n        #         if (set PlayerProgress[Agent] = 6) {}\n                # Untrack from the final tracker\n        Tracker5.Remove(Agent)\n                # You can add additional rewards or effects here\n                # for when a player completes all trackers",
  "external_calls": []
}