{
  "file_name": "timed_barrier_manager_device.verse",
  "questions": [
    "How do I open a barrier for a player only after a timer runs out?",
    "What is the Verse code for a time-locked vault door?",
    "How can I create a sequence of timed trackers to unlock something for a player?"
  ],
  "explanation": "This script defines a 'timed_barrier_manager_device' that creates a time-locked sequence. A barrier remains active for each player until they complete two sequential timed objectives, which are managed by 'tracker_device' instances.\n\n- **How it Works:**\n  1. When a player joins the game, the `StartTimers` function assigns them to the first tracker, 'TimerStarter'.\n  2. When the first tracker is completed (e.g., after its set time expires), the `StartTracker1` function is automatically called.\n  3. `StartTracker1` then assigns the player to the second tracker, 'TimerTracker1'.\n  4. When the second tracker is completed, the `OpenVault` function is called.\n  5. `OpenVault` adds the specific player who completed the sequence to the 'Barrier' device's ignore list, allowing them to pass through while it remains solid for others.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\n\n# Timed barrier manager that starts timers when players join the game\ntimed_barrier_manager_device := class(creative_device):\n\n    @editable TimerStarter : tracker_device = tracker_device{} \n    @editable TimerTracker1 : tracker_device = tracker_device{} \n    @editable Timers : timer_device = timer_device{}  \n    @editable Barrier : barrier_device = barrier_device{}\n    OnBegin<override>()<suspends> : void =\n        AllPlayers := GetPlayspace().GetPlayers()\n        GetPlayspace().PlayerAddedEvent().Subscribe(StartTimers)\n        TimerStarter.CompleteEvent.Subscribe(StartTracker1)\n        TimerTracker1.CompleteEvent.Subscribe(OpenVault)\n        for(Player:AllPlayers):\n            StartTimers(Player)\n\n    StartTimers(Agent:agent):void=\n        TimerStarter.Assign(Agent)\n\n    StartTracker1(Agent:agent):void=\n        TimerTracker1.Assign(Agent)\n \n    OpenVault(Agent:agent):void=\n        Barrier.AddToIgnoreList(Agent)",
  "external_calls": []
}