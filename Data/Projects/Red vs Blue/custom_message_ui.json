{
  "file_name": "custom_message_ui.verse",
  "questions": [
    "How can I show on-screen messages to a player without them overlapping?",
    "What is the Verse code for a UI message queue system?",
    "I need a script that can display text on the UI with different colors and styles for a set duration."
  ],
  "explanation": "This script creates a robust system for displaying custom text messages on the UI one at a time. Its primary feature is a message queue that prevents multiple messages from being shown simultaneously and overwriting each other.\n\n- **Core Components:**\n  - `message_style`: A public enum defining different visual styles for the text, such as 'Warning', 'Error', 'Gold', etc.\n  - `custom_message_info`: A simple class that acts as a data container for a single message, holding its text content, display duration, and style.\n  - `custom_messesage_ui`: The main class that drives the logic. It contains a `text_block` UI element and a `queue` to hold incoming messages.\n\n- **How it Works (The Queue System):**\n  1. An external script calls the public function `ShowMessage()`, passing in the text, duration, and style.\n  2. `ShowMessage()` packages this information into a `custom_message_info` object and adds it to the end of the `MessageQueue`.\n  3. It then calls `CheckPendingMessages()`.\n  4. `CheckPendingMessages()` checks if a message is already being displayed. If not, it pulls the next message from the front of the queue.\n  5. It then `spawn`s a new coroutine, `RunCountdown`, to handle the display for that single message.\n  6. `RunCountdown` sets the text content and style, waits for the specified duration, clears the text, and, most importantly, calls `CheckPendingMessages()` again to start the process for the next item in the queue.\nThis ensures a smooth, sequential display of all requested messages.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\n\nusing { /UnrealEngine.com/Temporary/UI }\nusing { /Fortnite.com/UI }\nusing { /Verse.org/Colors } \nusing { /UnrealEngine.com/Temporary/SpatialMath }\n\nMakeCustomMessageInfo<constructor>(InMessage : string, InDuration : float, InStyle : message_style) := custom_message_info:\n    Message := InMessage\n    Duration := InDuration\n    Style := InStyle\n\ncustom_message_info := class<unique>():\n    Message : string = \"\"\n    Duration : float = 5.0\n    Style : message_style = message_style.Normal\n\nmessage_style<public> := enum{Normal, Warning, Error, Gold, Blue}\n\ncustom_messesage_ui := class<unique>():\n\n    MessageText : text_block = text_block{}\n    var MessageQueue<public>:queue(custom_message_info) = queue(custom_message_info){}\n    var IsActive : logic = false\n\n    ShowMessage(Message : string, Duration : float, Style : message_style):void=\n\n        #Print(\"Show Message. MessageQueue Count: {MessageQueue.Size()}\", ?Duration:=3.0)\n        MessageInfo := MakeCustomMessageInfo(Message, Duration, Style)\n        set MessageQueue = MessageQueue.Enqueue(MessageInfo)             \n        CheckPendingMessages()\n\n    CheckPendingMessages():void=\n        if(IsActive = true): \n            #Print(\"Message Active\", ?Duration:=3.0)\n            return\n        else:\n            #Print(\"NO Message Active \", ?Duration:=3.0)\n\n        if (not (MessageQueue.IsEmpty[])):             \n            #Print(\"Message queue not empty\", ?Duration:=3.0)\n        else:\n            #Print(\"Message queue IS EMPTY. Do nothing!\", ?Duration:=3.0)\n\n        if (DequeResult := MessageQueue.Dequeue[]):\n            set MessageQueue = DequeResult(0)\n            ActiveMessageInfo := DequeResult(1)\n            #Print(\"We have pending messages to display\", ?Duration:=3.0)\n            spawn:\n                RunCountdown(ActiveMessageInfo)\n\n    RunCountdown<private>(MessageInfo : custom_message_info)<suspends>:void =\n        set IsActive = true\n        SetStyle(MessageInfo.Style)\n        MessageText.SetText(StringToMessage(MessageInfo.Message))\n        Sleep(MessageInfo.Duration)\n        MessageText.SetText(StringToMessage(\"\"))\n        Sleep(0.25)\n        #Print(\"Done Showing Message. Check pending again\", ?Duration:=3.0)\n        set IsActive = false\n        CheckPendingMessages()\n\n    SetStyle(Style : message_style):void=\n        \n        MessageText.SetShadowOpacity(1.0)\n        MessageText.SetShadowOffset(option{vector2{X := 2.5, Y := 2.5}})\n\n        case (Style):\n            message_style.Normal =>              \n                MessageText.SetTextColor(NamedColors.White)\n                MessageText.SetShadowColor(NamedColors.Black)\n\n            message_style.Warning =>              \n                MessageText.SetTextColor(NamedColors.LightYellow)\n                MessageText.SetShadowColor(NamedColors.Black)\n\n            message_style.Error =>              \n                MessageText.SetTextColor(NamedColors.Red)\n                MessageText.SetShadowColor(NamedColors.Black)\n\n            message_style.Gold =>              \n                MessageText.SetTextColor(NamedColors.Gold)\n                MessageText.SetShadowColor(NamedColors.Black)\n\n            message_style.Blue =>              \n                MessageText.SetTextColor(NamedColors.LightSkyBlue)\n                MessageText.SetShadowColor(NamedColors.Black)",
  "external_calls": []
}