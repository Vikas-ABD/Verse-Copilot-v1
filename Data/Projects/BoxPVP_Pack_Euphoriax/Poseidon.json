{
  "file_name": "Poseidon.verse",
  "questions": [
    "How do I create a water-based ability that floods an area and gives the user a damage boost?",
    "What is the Verse code to make rising water that damages enemies but empowers the user?",
    "How can I use the AgentEntersWaterEvent to apply different effects to the activator versus other players?"
  ],
  "explanation": "This script defines a 'Poseidon' device that grants a powerful water-based ability to a specific player class. When activated, it floods an area with water that damages enemies but grants a damage boost to the player who used the ability.\n\n- **Class System:** It uses a 'tracker_device' to ensure only players of the correct 'Class' receive the activation item.\n- **Activation:** Players use an item linked to a 'signal_remote_manager_device' to trigger the 'FloodWater' function, which moves a 'water_device' up and then down to simulate a temporary flood.\n- **Core Logic:** The script subscribes to the 'AgentEntersWaterEvent'. When any player enters the water, the 'WaterEnter' function checks if they are the original activator. If so, it grants them a 'damage_amplifier_powerup_device'. If it's any other player, and 'WaterDoesDamage' is enabled, it damages them.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Fortnite.com/Characters }\n\nPoseidon := class(creative_device):\n    @editable var Class : int = 0\n    @editable ClassTracker : tracker_device = tracker_device{}\n    @editable HUDablity : hud_message_device = hud_message_device{}\n\n    @editable WaterDMGBoost : damage_amplifier_powerup_device = damage_amplifier_powerup_device{}\n    @editable WaterDevice : water_device = water_device{}\n    @editable RemoteControl : signal_remote_manager_device = signal_remote_manager_device{}\n    @editable ItemGranter : item_granter_device = item_granter_device{}\n\n    @editable WaterMaxHeight : float = 0.0\n    @editable WaterCoordinateX : float = 0.0\n    @editable WaterCoordinateY : float = 0.0\n    @editable WaterCoordinateZ : float = 0.0\n\n    @editable Superpowerused : accolades_device = accolades_device{}\n\n    @editable WaterIncreasesYourDamage : float = 0.0\n\n    @editable TimeStill : float = 0.0\n    @editable TimeRise : float = 0.0\n\n    @editable WaterDoesDamage : logic = false\n    @editable WaterDamageAmount : float = 0.0\n\n\n\n    var HasPowers : logic = false\n    var PlayerAgent : []agent = array{} \n\n    OnBegin<override>()<suspends>:void=\n        InitSpawners()\n        WaterDMGBoost.SetMagnitude(WaterIncreasesYourDamage)\n        WaterDevice.AgentEntersWaterEvent.Subscribe(WaterEnterSleep)\n        RemoteControl.PrimarySignalEvent.Subscribe(FloodWatercall)\n\n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n            \n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{CheckClass(Agent)}\n\n    CheckClass(Agent : agent)<suspends>:void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            ItemGranter.GrantItem(Agent)\n            HUDablity.Show(Agent)\n\n    FloodWatercall(Agent : agent): void=\n        spawn{FloodWater(Agent)}\n\n    FloodWater(Agent:agent)<suspends> : void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            Superpowerused.Award(Agent)\n            set PlayerAgent = array{}\n            set PlayerAgent += array{Agent}\n\n            WaterMaxPosition := vector3{X:=WaterCoordinateX,Y:=WaterCoordinateY,Z:=WaterMaxHeight}\n            if(WaterDevice.TeleportTo[vector3{X:=WaterCoordinateX,Y:=WaterCoordinateY,Z:=WaterCoordinateZ} , WaterDevice.GetTransform().Rotation]){}\n\n            WaterDevice.MoveTo(WaterMaxPosition , WaterDevice.GetTransform().Rotation , TimeRise)\n            Sleep(TimeStill)\n            WaterDevice.MoveTo(vector3{X:=WaterCoordinateX,Y:=WaterCoordinateY,Z:=WaterCoordinateZ} , WaterDevice.GetTransform().Rotation , TimeRise)\n\n            if(WaterDevice.TeleportTo[vector3{X:=10000.0,Y:=10000.0,Z:=-10000.0} , WaterDevice.GetTransform().Rotation]){}\n\n    WaterEnterSleep(Agent:agent) : void=\n        spawn:\n            WaterEnter(Agent)\n            \n    WaterEnter(Agent:agent)<suspends> : void=\n        if(Player := player[Agent],FC := Player.GetFortCharacter[]):\n            loop:\n                Sleep(1.0)\n                if(FC.IsInWater[]):\n                    if(Agent = PlayerAgent[0]):\n                        if(HasPowers = false):\n                            set HasPowers = true\n                            spawn:\n                                ResetHasPowers()\n                            WaterDMGBoost.Pickup(Agent)\n                    else:\n                        if(WaterDoesDamage = true):\n                            FC.Damage(WaterDamageAmount)\n    ResetHasPowers()<suspends> : void=\n        Sleep(5.0)\n        set HasPowers = false",
  "external_calls": [
    "tags.verse"
  ]
}
