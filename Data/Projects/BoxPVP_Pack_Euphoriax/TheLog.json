{
  "file_name": "TheLog.verse",
  "questions": [
    "How do I create a rolling thunder or barrage ability that sets off a sequence of explosions?",
    "What is the Verse code for an ability that teleports props to a player's location and then starts a timed explosion chain?",
    "How can I make a class-specific power-up that is activated by a remote and creates a line of explosions?"
  ],
  "explanation": "This script defines a 'TheLogEffect' device that grants a powerful, sequential explosion ability to players of a specific class.\n\n- **Class System:** It uses a 'tracker_device' to ensure only players of the correct 'Class' receive the activation item.\n- **Activation:** Eligible players are given an item linked to a 'signal_remote_manager_device'. Using this remote triggers the 'SetLocation' function.\n- **Core Logic:** When activated, the script teleports two visual props ('TheLog' and 'ExplosionLine') to the player's current position to mark the ability's location. It then immediately begins a timed sequence in the 'Explosion' function, calling `.Explode()` on six different 'explosive_device' instances with short `Sleep` delays in between. This creates a rapid, chain-reaction explosion effect. After the sequence, a series of reset functions are called to clean up and teleport the visual props back to their original starting position.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/Verse }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Fortnite.com/Characters }\nusing { /Fortnite.com/FortPlayerUtilities }\n#VERSE SCRIPT\n#A device that spawns a Blueprint Prop (in the example shown, inside is a Niagra Particle System Component) upon player death\n\n#TO-DO: \n# - Drag your Blueprint with a Niagra System inside, from your content browser, into the details panel into \"DeathNiagraFX\"\n# - Select your Elimination Manager Device in the details panel\n\nTheLogEffect := class(creative_device):\n\n    @editable var Class : int = 0\n    @editable ClassTracker : tracker_device = tracker_device{}\n    @editable HUDablity : hud_message_device = hud_message_device{}\n\n    @editable \n    TheLog : creative_prop= creative_prop{}\n    @editable\n    explosive_device1 : explosive_device = explosive_device {}\n    @editable\n    explosive_device2 : explosive_device = explosive_device {}\n    @editable\n    explosive_device3 : explosive_device = explosive_device {}\n    @editable\n    explosive_device4 : explosive_device = explosive_device {}\n    @editable\n    explosive_device5 : explosive_device = explosive_device {}\n    @editable\n    explosive_device6 : explosive_device = explosive_device {}\n    @editable\n    MyRemote : signal_remote_manager_device = signal_remote_manager_device{}\n    @editable\n    ItemGranter: item_granter_device = item_granter_device{}\n    @editable # Detector button to check if signal remote is being held (not fully functional)\n    HeldDetector : conditional_button_device = conditional_button_device{}\n    @editable\n    BeginPlace : vector3 = vector3{ X :=1000.0, Y := 1000.0, Z := 1000.0}\n    @editable\n    BeginScale : vector3 = vector3{ X := 1.0, Y := 1.0, Z := 1.33333 }\n    @editable\n    ExplosionLine:creative_prop = creative_prop{}\n    var AgentMap : [agent]transform = map{}\n\n    @editable Superpowerused : accolades_device = accolades_device{}\n\n\n\n    OnBegin<override>()<suspends>:void=\n        MyRemote.PrimarySignalEvent.Subscribe(SetLocation)\n        InitSpawners()\n        \n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n            \n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{CheckClass(Agent)}\n\n    CheckClass(Agent : agent)<suspends>:void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            HUDablity.Show(Agent)\n            ItemGranter.GrantItem(Agent)\n\n    SetLocation(Agent : agent):void=\n        if(ClassTracker.GetValue(Agent) = Class):\n            if:\n                FortCharacter := Agent.GetFortCharacter[]\n                set AgentMap[Agent] = FortCharacter.GetTransform()\n            then:\n                Print(\"Location Set:  {FortCharacter.GetTransform().Translation} {FortCharacter.GetTransform().Rotation}\")\n                if(Fort := Agent.GetFortCharacter[]): ### getting fort_character from the Agent\n\n                    FortTransform := Fort.GetTransform() ### getting transform\n                    Position := FortTransform.Translation ### getting Position\n                    Rotation := FortTransform.Rotation ### Rotation\n                    if(TheLog.TeleportTo[Position + vector3{Z:=-40.0}, Rotation]):\n                        Superpowerused.Award(Agent)\n                        if(ExplosionLine.TeleportTo[Position + vector3{Z:=-40.0}, Rotation]):\n                            spawn:\n                                Explosion(Agent)\n                    \n    Explosion(Agent: agent)<suspends>:void=\n        if(ClassTracker.GetValue(Agent) = Class):\n            explosive_device2.Explode(Agent)\n            Sleep(1.0)\n            explosive_device3.Explode(Agent)\n            Sleep(0.65)\n            explosive_device4.Explode(Agent)\n            Sleep(0.65)\n            explosive_device5.Explode(Agent)\n            Sleep(1.3)\n            explosive_device6.Explode(Agent)\n            spawn:\n                ResetExplosions(Agent)\n\n    ResetExplosions(Agent: agent)<suspends>:void=\n        Print(\"resetting\")\n        explosive_device1.Reset()\n        explosive_device2.Reset()\n        explosive_device3.Reset()\n        explosive_device4.Reset()\n        explosive_device5.Reset()\n        explosive_device6.Reset()\n        spawn:\n            ResetLogExplosions(Agent)\n\n    ResetLogExplosions(Agent:agent)<suspends>:void=\n\n        Print(\"ResettingExplosion+logline\")\n\n        if:\n            FortCharacter := Agent.GetFortCharacter[]\n            set AgentMap[Agent] = FortCharacter.GetTransform()\n        then:\n            Print(\"Location Set:  {FortCharacter.GetTransform().Translation} {FortCharacter.GetTransform().Rotation}\")\n            if(Fort := Agent.GetFortCharacter[]):\n\n                Print(\"1\")\n\n                FortTransform := Fort.GetTransform() \n                Rotation := FortTransform.Rotation \n                if(TheLog.TeleportTo[BeginPlace + vector3{Z:=0.0}, Rotation]):\n                    Print(\"2\")\n                    spawn:\n                        ResetLogExplosions2(Agent)\n\n\n    ResetLogExplosions2(Agent:agent)<suspends>:void=\n\n        if:\n            FortCharacter := Agent.GetFortCharacter[]\n            set AgentMap[Agent] = FortCharacter.GetTransform()\n        then:\n            Print(\"Location Set:  {FortCharacter.GetTransform().Translation} {FortCharacter.GetTransform().Rotation}\")\n            if(Fort := Agent.GetFortCharacter[]):\n                FortTransform := Fort.GetTransform() \n                Rotation := FortTransform.Rotation \n                if(ExplosionLine.TeleportTo[BeginPlace + vector3{Z:=2.0}, Rotation]):\n                    Print(\"3\")\n                    Print(\"Explosive devices reset\")",
  "external_calls": [
    "tags.verse"
  ]
}
