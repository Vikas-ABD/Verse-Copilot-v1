{
  "file_name": "TeleportToLocation.verse",
  "questions": [
    "How do I create a 'flashback' or 'recall' ability to teleport a player back to a previous location?",
    "What is the Verse code for an ability that saves a player's position and then teleports them back to it later?",
    "How can I use a signal remote to have two different functions, one to set a location and another to teleport to it?"
  ],
  "explanation": "This script defines a 'TeleportToLocation' device that grants a 'flashback' style ability to players of a specific class. The ability allows a player to save their current location and then teleport back to it a short time later.\n\n- **Class System:** It uses a 'tracker_device' to ensure only players of the correct 'Class' receive the activation item.\n- **Two-Stage Activation:** The ability is controlled by a 'signal_remote_manager_device'. The secondary fire button is used to call `SetLocation`, which stores the player's current transform in a map. The primary fire button calls `UseFlashback`, which retrieves the stored transform from the map and uses `Agent.Respawn()` to teleport the player back to that saved spot.\n- **State Management:** The script uses a map, `AgentMap`, to store a unique location for each player, allowing multiple players to use the ability simultaneously without conflict.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/Verse }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Fortnite.com/Characters }\nusing { /Fortnite.com/FortPlayerUtilities }\n\nTeleportToLocation := class(creative_device):\n\n    @editable var Class : int = 0\n    @editable ClassTracker : tracker_device = tracker_device{}\n    @editable HUDablity : hud_message_device = hud_message_device{}\n\n    @editable RemoteManager : signal_remote_manager_device = signal_remote_manager_device{}\n    @editable ItemGranter: item_granter_device = item_granter_device{}\n    @editable HUDSetLocation: hud_message_device = hud_message_device{}\n    @editable HUDGetLocation: hud_message_device = hud_message_device{}\n    @editable HUDNoLocationActive: hud_message_device = hud_message_device{}\n\n    @editable Superpowerused : accolades_device = accolades_device{}\n\n\n    var AgentMap : [agent]transform = map{}\n\n    var Location : logic = false\n\n    OnBegin<override>()<suspends>:void=\n        InitSpawners()\n        RemoteManager.PrimarySignalEvent.Subscribe(UseFlashback)\n        RemoteManager.SecondarySignalEvent.Subscribe(SetLocation)\n\n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n            \n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{CheckClass(Agent)}\n\n    CheckClass(Agent : agent)<suspends>:void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            HUDablity.Show(Agent)\n            ItemGranter.GrantItem(Agent)\n\n    UseFlashback(Agent : agent):void=\n        if(ClassTracker.GetValue(Agent) = Class):\n            if(Location = true):\n                Superpowerused.Award(Agent)\n                if {Agent.Respawn(AgentMap[Agent].Translation, AgentMap[Agent].Rotation)}\n                then:  \n                    HUDGetLocation.Show(Agent)\n            else:\n                HUDNoLocationActive.Show(Agent)\n\n    SetLocation(Agent : agent):void=\n        if(ClassTracker.GetValue(Agent) = Class):\n            if:\n                FortCharacter := Agent.GetFortCharacter[]\n                set AgentMap[Agent] = FortCharacter.GetTransform()\n            then:\n                HUDSetLocation.Show(Agent)\n                set Location = true",
  "external_calls": [
    "tags.verse"
  ]
}
