{
  "file_name": "Rebirth.verse",
  "questions": [
    "How do I create a 'second life' or rebirth ability for a specific player class?",
    "What is the Verse code to automatically revive a player a few seconds after they are downed?",
    "How can I use the `down_but_not_out_device` to programmatically revive a player?"
  ],
  "explanation": "This script defines a 'Rebirth' device that gives players of a specific class a passive 'second life' ability. If an eligible player is put into the 'Down But Not Out' state, this script will automatically revive them after a short delay.\n\n- **Class System:** It uses a 'tracker_device' to identify players belonging to the correct 'Class'.\n- **Activation:** The ability is passive. For each eligible player, the script starts a continuous loop (`CheckForDowned`) that monitors their state.\n- **Core Logic:** The loop periodically checks if the player `IsDownButNotOut[]`. If this condition becomes true, the script waits for a configurable duration (`SecondLifeTimeUntilRevive`) and then calls the `.Revive()` method on the 'down_but_not_out_device', bringing the player back into the fight. The loop then breaks, making this a one-time-per-life ability.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /Fortnite.com/Characters }\n\n\nRebirth := class(creative_device):\n\n    @editable var Class : int = 0\n    @editable ClassTracker : tracker_device = tracker_device{}\n    @editable HUDablity : hud_message_device = hud_message_device{}\n\n    @editable SecondLifeTimeUntilRevive : float = 1.0\n    @editable SecondLifeDownDevice : down_but_not_out_device = down_but_not_out_device{}\n\n    OnBegin<override>()<suspends>:void=\n        InitSpawners()\n        SecondLifeDownDevice.Disable()\n        SecondLifeDownDevice.Enable()\n\n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n\n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{OnPlayerSpawnedSleep(Agent)}\n\n    OnPlayerSpawnedSleep(Agent : agent)<suspends>: void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            CheckClass()\n            HUDablity.Show(Agent)\n            \n    CheckClass():void=\n        for (Player : GetPlayspace().GetPlayers()):\n            if(FC := Player.GetFortCharacter[], Agent := FC.GetAgent[]):\n                    spawn:\n                        CheckForDowned(FC)\n                            \n    CheckForDowned(FC : fort_character)<suspends> : void=\n        if(Agent := FC.GetAgent[]):\n            loop:\n                Sleep(0.1)\n                if(FC.IsDownButNotOut[]):\n                    Sleep(SecondLifeTimeUntilRevive)\n                    SecondLifeDownDevice.Revive(Agent)\n                    SecondLifeDownDevice.Disable()\n                    break",
  "external_calls": [
    "tags.verse"
  ]
}
