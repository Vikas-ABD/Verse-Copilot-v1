{
  "file_name": "Blinding.verse",
  "questions": [
    "How can I create an ability that affects the nearest enemy player?",
    "What is the Verse code to find the closest target to a player and show them a UI message?",
    "How do I make a class-specific power-up that is activated by an item?"
  ],
  "explanation": "This script defines a 'Blinding' device that grants a temporary ability to players of a specific class. When activated, the ability finds the nearest enemy player and displays a 'hud_message_device' on their screen, effectively blinding them.\n\n- **Class System:** The device checks a 'tracker_device' to verify if a player belongs to the correct 'Class' before granting them the ability's trigger item.\n- **Activation:** Players of the correct class receive an item linked to a 'signal_remote_manager_device'. Using this remote triggers the 'BlindingEffect'.\n- **Core Logic:** The script extends the 'fort_character' class with a new function, 'FindNearestTarget()'. This function calculates the distance to all other players to find the closest one. The 'BlindingEffect' then calls this function on the activator to identify the target and shows the 'BlindingHUD' only to them.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /Fortnite.com/Characters }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\n\nBlinding := class(creative_device):\n    @editable var Class : int = 0\n    @editable ClassTracker : tracker_device = tracker_device{}\n    @editable HUDablity : hud_message_device = hud_message_device{}\n\n    @editable Superpowerused : accolades_device = accolades_device{}\n\n    @editable BlindingHUD : hud_message_device = hud_message_device{}\n\n    @editable RemoteManager : signal_remote_manager_device = signal_remote_manager_device{}\n    @editable ItemGranter:item_granter_device = item_granter_device{}\n\n    var Targets : []fort_character = array{}\n    var NewTargets : []fort_character = array{}\n\n    OnBegin<override>()<suspends>:void=\n        RemoteManager.PrimarySignalEvent.Subscribe(BlindingSleep)\n        RemoteManager.SecondarySignalEvent.Subscribe(BlindingSleep)\n        InitSpawners()\n\n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n\n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{GiveItem(Agent)}\n\n    GiveItem(Agent : agent)<suspends>:void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            ItemGranter.GrantItem(Agent)\n            HUDablity.Show(Agent)\n\n    BlindingSleep(Agent : agent):void=\n        if(ClassTracker.GetValue(Agent) = Class):\n            \n            spawn{BlindingEffect(Agent)}\n\n    BlindingEffect(Agent:agent)<suspends> : void=\n        \n        if(ClassTracker.GetValue(Agent) = Class):\n            if(ActivatorPlayer := player[Agent], ActivatorChar := ActivatorPlayer.GetFortCharacter[]):\n                set Targets = array{}\n                for(Player : GetPlayspace().GetPlayers(),FC:=Player.GetFortCharacter[],EveryAgent:=FC.GetAgent[]):\n                    set Targets += array{FC}\n                    if(ActivatorIDX := Targets.Find[ActivatorChar]):\n                        if(NEWTARGET := Targets.RemoveElement[ActivatorIDX]):\n                            set NewTargets = NEWTARGET\n\n                if(Target := ActivatorChar.FindNearestTarget[],TargetAgent := Target.GetAgent[]):\n                    Print(\"Blinding\")\n                    Superpowerused.Award(Agent)\n                    BlindingHUD.Show(TargetAgent)\n\n    (FortCharacter : fort_character).FindNearestTarget()<transacts><decides> : fort_character =\n        var MaybeTarget : ?fort_character = false\n        var NearestLocation : float = 1000000.0\n        for (Target : NewTargets):\n            if (DistancePlayerToTarget := Distance(Target.GetTransform().Translation, FortCharacter.GetTransform().Translation) < NearestLocation):\n                set MaybeTarget = option{Target}\n                set NearestLocation = DistancePlayerToTarget\n        return MaybeTarget?",
  "external_calls": [
    "tags.verse"
  ]
}