{
  "file_name": "CrabRave.verse",
  "questions": [
    "How do I create a moving wall of damage in Verse?",
    "What is the code for an ability that moves a damage volume from a start point to an end point over a set time?",
    "How can I make a class-specific power that creates a moving 'death wall' effect?"
  ],
  "explanation": "This script defines a 'CrabRave' device that creates a special ability for a specific player class. When activated, this ability generates a moving line of damage across the map.\n\n- **Class System:** It uses a 'tracker_device' to check if a player belongs to the correct 'Class' before granting them the activation item.\n- **Activation:** Players use an item linked to a 'signal_remote_manager_device' to trigger the effect. \n- **Core Logic:** When activated, the script calculates a movement vector based on a start point, an end point, and a travel time. It then enters a loop, repeatedly calling 'MoveTo' on a 'damage_volume_device' every second. This creates the effect of a continuous, moving wall of damage. A 'vfx_spawner_device' is also triggered to provide a temporary visual effect that accompanies the moving damage volume.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/Verse }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Fortnite.com/Characters }\nusing { /Fortnite.com/FortPlayerUtilities }\n\n\nCrabRaveVerse := class(creative_device):\n    @editable var Class : int = 0\n    @editable ClassTracker : tracker_device = tracker_device{}\n    @editable HUDablity : hud_message_device = hud_message_device{}\n\n    @editable Superpowerused : accolades_device = accolades_device{}\n\n\n    @editable ActivationRemote :signal_remote_manager_device= signal_remote_manager_device{}\n    @editable ItemGranter:item_granter_device = item_granter_device{}\n\n    @editable\n    VFXEffect : vfx_spawner_device = vfx_spawner_device{}\n\n    @editable\n    var StartPoint : vector3 = vector3{X := 0.0, Y := 0.0, Z := 0.0}\n    @editable\n    var EndPoint : vector3 = vector3{X := 0.0, Y := 0.0, Z := 0.0}\n    @editable\n    var TravelTimeInSeconds : float = 10.0\n    \n    var DeltaX : float = 0.0\n    var DeltaY : float = 0.0\n    var DeltaZ : float = 0.0\n\n    @editable\n    DamageLine : damage_volume_device = damage_volume_device{}\n\n    OnBegin<override>()<suspends>:void=\n        ActivationRemote.PrimarySignalEvent.Subscribe(CrabMove) # Player can press button to trigger this function\n        ActivationRemote.SecondarySignalEvent.Subscribe(CrabMove)\n        InitSpawners()\n\n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n\n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{GiveItem(Agent)}\n\n    GiveItem(Agent : agent)<suspends>:void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            ItemGranter.GrantItem(Agent)\n            HUDablity.Show(Agent)\n\n    CrabMove(Agent: agent):void=\n        if(ClassTracker.GetValue(Agent) = Class):\n            spawn:\n                CrabMove2(Agent)\n    \n    CrabMove2(Agent: agent)<suspends>:void=\n        VFXEffect.Enable()\n        Superpowerused.Award(Agent)\n        spawn:\n            VFX(Agent)\n        CalculateMovementPerSecond(StartPoint, EndPoint, TravelTimeInSeconds)\n        var SkydiveUpdateLocation : vector3 = vector3{X := StartPoint.X, Y := StartPoint.Y, Z := StartPoint.Z}\n        loop:\n            Sleep(1.0)\n            set SkydiveUpdateLocation  = vector3{X := SkydiveUpdateLocation.X + DeltaX, Y := SkydiveUpdateLocation.Y + DeltaY, Z := SkydiveUpdateLocation.Z + DeltaZ}\n            # Print(\"Location:  X={SkydiveUpdateLocation.X}, Y={SkydiveUpdateLocation.Y}, Z={SkydiveUpdateLocation.Z}\")\n            DamageLine.MoveTo(SkydiveUpdateLocation, rotation{}, 0.001)\n\n    VFX(Agent: agent)<suspends>:void=\n        Sleep(5.0)\n        VFXEffect.Disable()\n\n    CalculateMovementPerSecond(StartPoints : vector3, EndPoints : vector3, TravelTimeInSecond : float):void=\n\n    # Unpack the start and end points into their respective coordinates\n    # Euphoriax property\n    # Copyright and not allowed to share      \n\n        StartX := StartPoint.X\n        StartY := StartPoint.Y\n        StartZ := StartPoint.Z\n\n        EndX := EndPoint.X\n        EndY := EndPoint.Y\n        EndZ := EndPoint.Z\n\n    # Calculate the change needed in each coordinate\n        set DeltaX = (EndX - StartX) / TravelTimeInSeconds\n        set DeltaY = (EndY - StartY) / TravelTimeInSeconds\n        set DeltaZ = (EndZ - StartZ) / TravelTimeInSeconds",
  "external_calls": [
    "tags.verse"
  ]
}
