{
  "file_name": "CustomRoundSystem.verse",
  "questions": [
    "How can I create a custom round system where players are teleported to a lobby after they are eliminated?",
    "What is the Verse code for a zone wars style round, with a moving storm and a check for the last player alive?",
    "How do I use a tracker device to count the number of players inside a mutator zone to determine the end of a round?"
  ],
  "explanation": "This script defines a 'CustomRoundSystem' device that manages a complete, multi-stage round for a Box PVP or Zone Wars style game. It handles player spawning, round start/end conditions, and player state management.\n\n- **Round Flow:** The system uses two sets of player spawners (identified by 'spawner' and 'spawner2' tags) to separate the main gameplay area from a post-round or lobby area. When a player spawns in the main area, a round begins, barriers are enabled, and a timer starts.\n- **Player Tracking:** A 'mutator_zone_device' and a 'tracker_device' work together to keep a live count of how many players are inside the main play area. The script subscribes to the zone's 'AgentEntersEvent' and 'AgentExitsEvent' to increment and decrement the tracker.\n- **End Condition:** The 'CheckPlayersInsideZone' function is the core logic that determines the end of the round. It checks the tracker's value, and if it's less than or equal to 1, it triggers the round-end sequence. This sequence involves enabling the lobby spawners, destroying the storm, and resetting for the next round.",
  "code": "using { /Fortnite.com/FortPlayerUtilities }\nusing { /Fortnite.com/Characters }\nusing { /Fortnite.com/Game }\nusing { /Fortnite.com/Devices }\nusing { /Verse.org/Random }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /Verse.org/Simulation/Tags }\n\nspawner2 := class(tag){}\n\nCustomRoundSystem := class(creative_device):\n\n    StringToMessage<localizes>(String : string)<computes> : message = \"{String}\"\n \n    @editable var SpawnsPad : []player_spawner_device = array{}\n    @editable ElimManager : elimination_manager_device = elimination_manager_device{}\n    @editable MutatorZone : mutator_zone_device = mutator_zone_device{}\n    @editable MutatorZoneClear : mutator_zone_device = mutator_zone_device{}\n    \n    @editable DamageVolume1 : damage_volume_device = damage_volume_device{}\n    @editable DamageVolume2 : damage_volume_device = damage_volume_device{}\n    @editable TrackerDevice : tracker_device = tracker_device{}\n    @editable TrackerRounds : tracker_device = tracker_device{}\n\n    @editable RoundEndaccolade : accolades_device = accolades_device{}\n\n    @editable StormDevice : basic_storm_controller_device = basic_storm_controller_device{}\n\n    @editable HUDRoundStart : hud_message_device = hud_message_device{}\n    @editable HUDRoundStats : hud_message_device = hud_message_device{}\n\n    @editable HUDclearTrigger : trigger_device = trigger_device{}\n\n    @editable ItemGranterGame : item_granter_device = item_granter_device{}\n    @editable ItemGranterClear : item_granter_device = item_granter_device{}\n\n    @editable Timer : timer_device = timer_device{}\n    @editable ExplosionDevice : explosive_device = explosive_device{}\n\n    @editable Barriers : []barrier_device = array{}\n\n\n\n    var RoundStarted : int = 0\n    var TotalRounds : int = 0\n\n    OnBegin<override>()<suspends>:void=\n        MutatorZoneClear.Disable()  \n        ElimManager.EliminatedEvent.Subscribe(TeleportAfterDeath)\n        MutatorZone.AgentEntersEvent.Subscribe(AddingPlayer)\n        MutatorZone.AgentExitsEvent.Subscribe(RemovingPlayer)\n        Timer.SuccessEvent.Subscribe(TimerComplete)\n        InitSpawners()\n        InitSpawners2()\n        set RoundStarted = 0\n    \n\n\n    TimerComplete(Agent : ?agent):void=\n        spawn:\n            DisableBarriers()\n\n    DisableBarriers()<suspends>:void=\n        for (Barrier : Barriers):\n            Barrier.Disable()\n\n    EnableBarriers()<suspends>:void=\n        for (Barrier : Barriers):\n            Barrier.Enable()\n\n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n        \n    InitSpawners2() : void=\n        Spawners2 := FindCreativeObjectsWithTag(spawner2{})\n        for (Obj : Spawners2):\n            if (Spawner2 := player_spawner_device[Obj]):\n                Spawner2.SpawnedEvent.Subscribe(OnPlayerSpawned2)\n\n    OnPlayerSpawned2(Agent : agent): void=\n        ItemGranterClear.GrantItem(Agent)\n\n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{DisablePlayerSpawners(Agent)}\n            spawn{RoundStartHud(Agent)}\n            set RoundStarted += 1\n            ItemGranterGame.GrantItem(Agent)\n            Timer.Start(Agent)\n            spawn:\n                EnableBarriers()\n            spawn{CheckPlayersInsideZone(Agent)}\n        \n    RoundStartHud(Agent : agent)<suspends>:void=\n        HUDRoundStart.Show(Agent)\n        HUDRoundStats.SetText(StringToMessage(\"Rounds : {TrackerRounds.GetValue()}\"))\n        HUDRoundStats.Show(Agent)\n\n    AddingPlayer(Agent : agent): void=\n        TrackerDevice.Increment(Agent)\n\n    RemovingPlayer(Agent : agent): void=\n        TrackerDevice.Decrement(Agent)\n        spawn{CheckPlayersInsideZone(Agent)}\n\n    CheckPlayersInsideZone(Agent : agent)<suspends>:void=\n        Sleep(0.5)\n        StormDevice.GenerateStorm()\n        Sleep(0.5)\n        if(RoundStarted <= 1):\n            Sleep(1.0)\n            if(TrackerDevice.GetValue() = 0):\n                Sleep(2.0)\n                set RoundStarted = 0\n                Spawners := FindCreativeObjectsWithTag(spawner{})\n                for (Obj : Spawners):\n                    if (Spawner := player_spawner_device[Obj]):\n                        Spawner.Enable()\n\n                Spawners2 := FindCreativeObjectsWithTag(spawner2{})\n                for (Obj : Spawners2):\n                    if (Spawner2 := player_spawner_device[Obj]):\n                        Spawner2.Disable()\n                Sleep(0.5)\n                DamageVolume1.Enable()\n                DamageVolume2.Enable()\n                DamageVolume1.Disable()\n                DamageVolume2.Disable()\n\n                TrackerRounds.Increment(Agent)\n\n                HUDclearTrigger.Trigger()\n                ExplosionDevice.Explode(Agent)\n\n                spawn{MutatorZoneClearSpawn(Agent)}\n\n                StormDevice.DestroyStorm()\n\n\n                Print(\"Round Over Player1\")\n            else{}    \n        if (RoundStarted >= 2):\n            if(TrackerDevice.GetValue() <= 1):\n                Sleep(2.0)\n                set RoundStarted = 0\n                Spawners := FindCreativeObjectsWithTag(spawner{})\n                for (Obj : Spawners):\n                    if (Spawner := player_spawner_device[Obj]):\n                        Spawner.Enable()\n\n                Spawners2 := FindCreativeObjectsWithTag(spawner2{})\n                for (Obj : Spawners2):\n                    if (Spawner2 := player_spawner_device[Obj]):\n                        Spawner2.Disable()\n                Sleep(0.5)\n                DamageVolume1.Enable()\n                DamageVolume2.Enable()\n                DamageVolume1.Disable()\n                DamageVolume2.Disable()\n\n                TrackerRounds.Increment(Agent)\n\n                HUDclearTrigger.Trigger()\n                ExplosionDevice.Explode(Agent)\n\n                spawn{MutatorZoneClearSpawn(Agent)}\n\n                StormDevice.DestroyStorm()\n\n\n                Print(\"Round Over\")\n            if(TrackerDevice.GetValue() > 1):\n                Print(\"Round in progress\")  \n            else{}  \n\n    MutatorZoneClearSpawn(Agent : agent)<suspends>:void=\n        MutatorZoneClear.Enable()   \n        Sleep(0.8)\n        MutatorZoneClear.Disable()\n\n    DisablePlayerSpawners(Agent : agent)<suspends>:void=\n        ExplosionDevice.Reset()\n        RoundEndaccolade.Award(Agent)\n        Sleep(2.0)\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.Disable()\n\n        Spawners2 := FindCreativeObjectsWithTag(spawner2{})\n        for (Obj : Spawners2):\n            if (Spawner2 := player_spawner_device[Obj]):\n                Spawner2.Enable()\n\n    TeleportAfterDeath(Agent:agent):void=\n        PadRandom := GetRandomInt(1,SpawnsPad.Length)\n        if ( RandomInt := SpawnsPad[PadRandom-1] ): \n            Transform := RandomInt.GetTransform()\n            Agent.Respawn(Transform.Translation, Transform.Rotation)",
  "external_calls": [
    "tags.verse"
  ]
}
