{
  "file_name": "TeleportBehindPlayer.verse",
  "questions": [
    "How do I create an ability to teleport behind a random enemy player?",
    "What is the Verse code for selecting a random player from everyone in the game, excluding myself?",
    "How can I make a class-specific power-up that teleports the user to another player?"
  ],
  "explanation": "This script defines a 'TeleportBehindRandom' device that grants a teleportation ability to players of a specific class. When activated, the user is teleported to the location of a random opponent.\n\n- **Class System:** It uses a 'tracker_device' to ensure only players of the correct 'Class' receive the activation item.\n- **Activation:** Eligible players are given an item linked to a 'signal_remote_manager_device'. Using this remote triggers the 'TeleportPlayer' function.\n- **Core Logic:** The 'TeleportPlayer' function gets a list of all players in the game, removes the user from that list, and then selects a random player from the remaining opponents. It then uses a 'teleporter_device' to instantly move the user to the target's location.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /Fortnite.com/Characters}\nusing { /Fortnite.com/Game }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Verse.org/Random }\n\nTeleportBehindRandom := class(creative_device):\n    \n    @editable var Class : int = 0\n    @editable ClassTracker : tracker_device = tracker_device{}\n    @editable HUDablity : hud_message_device = hud_message_device{}\n\n    @editable TeleportBehindRandomTP : teleporter_device = teleporter_device{}\n    @editable RemoteControl : signal_remote_manager_device = signal_remote_manager_device{}\n    @editable ItemGranter : item_granter_device = item_granter_device{}\n\n    @editable Superpowerused : accolades_device = accolades_device{}\n\n\n    var ArrayOfPlayers : []player = array{}\n    var ButtonPresserIDX: int = 0\n    OnBegin<override>()<suspends>:void=\n        RemoteControl.PrimarySignalEvent.Subscribe(TeleportPlayerCall)\n        InitSpawners()\n\n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n\n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{GiveItem(Agent)}\n\n    GiveItem(Agent : agent)<suspends>:void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            spawn{GrantItem(Agent)}\n            HUDablity.Show(Agent)\n\n    GrantItem(Agent : agent)<suspends>:void=\n        Sleep(5.0)\n        ItemGranter.GrantItem(Agent)\n\n    TeleportPlayerCall(Agent : agent) :void=\n        if(ClassTracker.GetValue(Agent) = Class):\n            spawn{TeleportPlayer(Agent)}      \n\n    TeleportPlayer(Agent:agent)<suspends> : void=\n        set ArrayOfPlayers = array{}\n        for (Player : GetPlayspace().GetPlayers(),FortCharacter := Player.GetFortCharacter[]):\n            set ArrayOfPlayers += array{Player}\n        if (ButtonPresser := player[Agent], ButtonPresserChar := ButtonPresser.GetFortCharacter[]):\n            if(NEWIDX  := ArrayOfPlayers.Find[ButtonPresser]):\n                if(NEWARRAY := ArrayOfPlayers.RemoveElement[NEWIDX]):\n                    set ArrayOfPlayers = NEWARRAY\n                RandomInt :=  GetRandomInt(0, ArrayOfPlayers.Length-1)\n                if(RandomPlayer := ArrayOfPlayers[RandomInt],RandomChar := RandomPlayer.GetFortCharacter[]):\n                    if(TeleportBehindRandomTP.TeleportTo[RandomChar.GetViewLocation(), RandomChar.GetTransform().Rotation]){}\n                    Superpowerused.Award(Agent)\n                    TeleportBehindRandomTP.Teleport(Agent)\n                    if(TeleportBehindRandomTP.TeleportTo[vector3{X:=1000.0,Y:=1000.0,Z:=1000.0},TeleportBehindRandomTP.GetTransform().Rotation]){}\n                    if(ActivatorPlayer := player[Agent],ActivatorChar := ActivatorPlayer.GetFortCharacter[]):\n                        S:stasis_args = stasis_args{}\n                        if(S.AllowEmotes = false, S.AllowFalling = true, S.AllowTurning=false):\n                        ActivatorChar.PutInStasis(S)\n                        ActivatorChar.ReleaseFromStasis()",
  "external_calls": [
    "tags.verse"
  ]
}
