{
  "file_name": "OneShotPickaxe.verse",
  "questions": [
    "How do I create a one-shot pickaxe ability for a specific class?",
    "What is the Verse code to deal massive damage only when a player is using their default pickaxe?",
    "How can I check if a player is NOT holding any weapon from a list when they deal damage?"
  ],
  "explanation": "This script defines a 'OneShotPickaxe' device that gives players of a specific class a powerful one-shot ability with their pickaxe.\n\n- **Class System:** It uses a 'tracker_device' to verify if a player belongs to the correct 'Class' before the ability is active.\n- **Activation:** The logic is triggered by the 'DamagedEvent' of all players. \n- **Core Logic:** When a player deals damage, the 'OnPlayerDamaged' function checks if the attacker is holding any of the items registered in the 'OneShotConditionals' array. If the check fails (meaning they are using their pickaxe or an unlisted item), and they are the correct class, the script calls the 'OneShotPlayer' function. This function then deals 1000 damage to the target, effectively making the pickaxe a one-shot weapon.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /Fortnite.com/Characters }\nusing { /Fortnite.com/Game }\n\nOneShotPickaxe := class(creative_device):\n    @editable var Class : int = 0\n    @editable ClassTracker : tracker_device = tracker_device{}\n    @editable HUDablity : hud_message_device = hud_message_device{}\n    @editable OneShotConditionals : []conditional_button_device = array{}\n    var IsHoldingAnItem : logic = false\n\n    OnBegin<override>()<suspends>:void=\n        for (Player : GetPlayspace().GetPlayers(), FortCharacter := Player.GetFortCharacter[]):\n            FortCharacter.DamagedEvent().Subscribe(OnPlayerDamaged)\n            FortCharacter.DamagedShieldEvent().Subscribe(OnPlayerDamaged)\n        InitSpawners()\n\n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n\n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{SubscribeOn(Agent)}\n\n    SubscribeOn(Agent : agent)<suspends>:void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            HUDablity.Show(Agent)   \n\n    OnPlayerDamaged(DamageResult: damage_result): void = \n        if: \n            Instigator := DamageResult.Instigator?\n            Agent := Instigator.GetInstigatorAgent[]\n            Target:= fort_character[DamageResult.Target]\n        then:\n            if(ClassTracker.GetValue(Agent) = Class):\n                if(InstiPlayer := player[Agent] ,  InstiFC := InstiPlayer.GetFortCharacter[]):\n                    if(not Target = InstiFC):\n                        set IsHoldingAnItem = false\n                        for(Conditional : OneShotConditionals):\n                            if(Conditional.IsHoldingItem[Agent]):\n                                set IsHoldingAnItem = true\n                        if(IsHoldingAnItem = false):\n                            if(ClassTracker.GetValue(Agent) = Class):\n                                spawn:\n                                    OneShotPlayer(Target,Agent)\n\n    OneShotPlayer(Target : fort_character,Agent:agent)<suspends> : void=\n        if(ClassTracker.GetValue(Agent) = Class):\n            Target.Damage(1000.0)",
  "external_calls": [
    "tags.verse"
  ]
}
