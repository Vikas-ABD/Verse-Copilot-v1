{
  "file_name": "PizzaParty.verse",
  "questions": [
    "How do I give an item to a player when they spawn, but only if they are a specific class?",
    "What is the Verse code for a class-based item granter system?",
    "How can I check a player's class using a tracker device and then grant them an item?"
  ],
  "explanation": "This script defines a 'PizzaParty' device that acts as a class-based item granter. Its primary function is to give a specific item to players who belong to a certain class when they spawn into the game.\n\n- **Class System:** It uses an '@editable tracker_device' to store and check the class ID for each player.\n- **Activation:** The logic is triggered automatically when a player spawns. The 'OnPlayerSpawned' function is subscribed to all player spawners with the 'spawner' tag.\n- **Core Logic:** After a player spawns, the 'GiveItem' function checks if the player's class ID from the tracker matches the 'Class' ID set on the device. If they match, the script calls `.GrantItem()` on the configured 'item_granter_device', giving the item only to the eligible player. The script also contains a large amount of commented-out code, suggesting a more complex ability was planned but is currently inactive.",
  "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /Fortnite.com/Characters }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Fortnite.com/Game }\n\nPizzaParty := class(creative_device):\n\n    @editable var Class : int = 0\n    @editable ClassTracker : tracker_device = tracker_device{}\n    @editable HUDablity : hud_message_device = hud_message_device{}\n\n    # @editable Timer : timer_device = timer_device{}\n    # @editable SeparateArenaButtonActivatorTP : teleporter_device = teleporter_device{}\n    # @editable SeparateArenaButtonActivatorBackTP : teleporter_device = teleporter_device{}\n    \n    # @editable RemoteManager : signal_remote_manager_device = signal_remote_manager_device{}\n    @editable ItemGranter : item_granter_device = item_granter_device{} \n    # @editable RemoveRemoteInventory : item_remover_device = item_remover_device{} \n\n    # @editable TimeInArena : float = 0.0\n\n    # var Targets : []fort_character = array{}\n    # var NewTargets : []fort_character = array{}\n    # var CheckPlayerCountArray : []fort_character = array{}\n    # var EndTime : logic = false\n    # var Playerhasdied: logic = false \n\n    OnBegin<override>()<suspends>:void=\n        # Timer.SetMaxDuration(TimeInArena)\n        # Timer.SuccessEvent.Subscribe(TimerComplete)\n        # RemoteManager.PrimarySignalEvent.Subscribe(SeparateArenaAbility)\n        # RemoteManager.SecondarySignalEvent.Subscribe(SeparateArenaAbility)\n        InitSpawners()\n\n    InitSpawners() : void=\n        Spawners := FindCreativeObjectsWithTag(spawner{})\n        for (Obj : Spawners):\n            if (Spawner := player_spawner_device[Obj]):\n                Spawner.SpawnedEvent.Subscribe(OnPlayerSpawned)\n\n    OnPlayerSpawned(Agent : agent): void=\n        if (Player := player[Agent]):\n            spawn{GiveItem(Agent)}\n\n    GiveItem(Agent : agent)<suspends>:void=\n        Sleep(1.0)\n        if(ClassTracker.GetValue(Agent) = Class):\n            HUDablity.Show(Agent) \n            ItemGranter.GrantItem(Agent)",
  "external_calls": [
    "tags.verse"
  ]
}
