{
  "file_name": "LanternInteractionComponent.verse",
  "questions": [
    "How do I change the material properties of a mesh from Verse, like making it glow?",
    "What is the Scene Graph code to find and control multiple child components on a single entity?",
    "How can I make a light that a player can turn on and off by interacting with it?",
    "How do I use an `interactable_component` to trigger logic in a separate Verse component?"
  ],
  "explanation": "This script defines a 'component' that gives an entity (like a light post prefab) the behavior of an interactive, toggleable lantern. It's a powerful example of how a single logic component can orchestrate changes across multiple different types of sibling and child components.\n\n- **Scene Graph Concepts Demonstrated:**\n  - `interactable_component`: The script assumes the entity has a built-in `interactable_component`. It finds this component and subscribes to its `SucceededEvent` to know when a player has used the 'interact' button on it.\n  - **Direct Material Control:** A key feature is its ability to directly modify a material instance. The script gets a reference to the lantern's material and changes its `Emissive_Multiply` parameter from `0.0` to `1.0`, which makes the material itself appear to glow.\n  - `Entity.FindDescendantComponents()`: This function is used multiple times to find all the different parts of the lantern that need to be controlled. When the light is toggled, it finds and enables/disables all `light_component`s (to cast light), and finds and plays/stops all `particle_system_component`s (for visual effects like flames or motes). This shows how one component can act as a 'brain' for a complex prefab.",
  "code": "using { /Verse.org }\nusing { /Verse.org/Native }\nusing { /Verse.org/SceneGraph }\nusing { /Verse.org/Simulation }\n\nLightPost := module:\n    Materials<public> := module:\n\nlantern_interaction_component<public> := class<final_super>(component):\n\n    var MaterialInstance:LightPost.Materials.MI_Lantern_01 = LightPost.Materials.MI_Lantern_01{}\n\n    OnBeginSimulation<override>():void =\n        (super:)OnBeginSimulation()\n\n        InteractabeleComponents := Entity.FindDescendantComponents(interactable_component)\n        for (InteractableComponent : InteractabeleComponents):\n            InteractableComponent.SucceededEvent.Subscribe(OnInteractFinished)\n\n        MeshComponents := Entity.FindDescendantComponents(LightPost.SM_Lightpost_Lantern_01)\n        for (MeshComponent : MeshComponents):\n            set MeshComponent.M_Lantern = MaterialInstance\n\n\n    OnInteractFinished(Agent:agent):void =\n        ToggleLight()\n\n\n    ToggleLight():void = \n        if (MaterialInstance.Emissive_Multiply = 0.0):\n            set MaterialInstance.Emissive_Multiply = 1.0\n            for:\n                Light : Entity.FindDescendantComponents(light_component)\n            do:\n                Light.Enable()\n\n            for:\n                Particle : Entity.FindDescendantComponents(particle_system_component)\n            do:\n                Particle.Play()\n        else:\n            set MaterialInstance.Emissive_Multiply = 0.0\n            for:\n                Light : Entity.FindDescendantComponents(light_component)\n            do:\n                Light.Disable()\n\n            for:\n                Particle : Entity.FindDescendantComponents(particle_system_component)\n            do:\n                Particle.Stop()",
  "external_calls": []
}
