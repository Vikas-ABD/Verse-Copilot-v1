{
  "file_name": "EntityEnteredExampleComponent.verse",
  "questions": [
    "How do I use Scene Graph to make a prop disappear when a player touches it?",
    "What is the Verse code for a reusable 'collectible' component that I can attach to any prop?",
    "How do I use the `EntityEnteredEvent` on a `mesh_component` to detect collision with another entity?",
    "How can I make one component on an entity (like a logic component) control another component on the same entity (like an animator)?"
  ],
  "explanation": "This script is a powerful example of the Scene Graph's component-based design. It defines a 'component', which is a reusable piece of functionality that you attach to an entity (like a prop) in the UEFN editor. This is different from a 'creative_device', which is a standalone object.\n\nThis specific component, 'entity_entered_example_component', acts like a 'brain' that gives any entity the behavior of an animated, collectible object (e.g., a spinning coin that disappears when collected).\n\n- **Scene Graph Concepts Demonstrated:**\n  - `component`: The class inherits from `component`, making it a modular piece of logic that can be added to other objects. It has no transform or physical presence on its own.\n  - `Entity`: This keyword is the component's way of referring to the object it is currently attached to.\n  - `Entity.GetComponent<T>`: This is how a component communicates with its sibling components on the same entity. In this script, the logic component gets a reference to the entity's `mesh_component` (to make it visible/invisible) and its `keyframed_movement_component` (to play/stop its animation).\n  - `EntityEnteredEvent`: This is the Scene Graph's native collision detection system. Instead of using a separate trigger device, the script subscribes directly to the mesh's own event to know when another entity has touched it.\n\n- **Core Logic:**\n  1. When the round starts, the component tells its entity's animator (`keyframed_movement_component`) to start playing an animation.\n  2. When another entity (like a player) overlaps with the mesh, the `OnEntityEntered` function is called.\n  3. This function stops the animation, makes the mesh invisible, and then restarts the animation from the beginning after a delay, creating a classic 'pickup and respawn' effect.",
  "code": "using { /Verse.org }\nusing { /Verse.org/Native }\nusing { /Verse.org/SceneGraph }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/SceneGraph/KeyframedMovement }\nusing { /Verse.org/SpatialMath }\nusing { /Fortnite.com/Game }\n\nentity_entered_example_component<public> := class<final_super>(component):\n\n    @editable\n    Keyframes:[]keyframed_movement_delta = array{}\n\n    var StartTransform:transform = transform{}\n\n    OnBeginSimulation<override>():void =\n        (super:)OnBeginSimulation()\n        if:\n            FortRoundManager := Entity.GetFortRoundManager[]\n        then:\n            FortRoundManager.SubscribeRoundStarted(OnRoundStarted)\n        \n\n    OnRoundStarted():void =\n        set StartTransform = Entity.GetGlobalTransform()\n        if:\n            Mesh := Entity.GetComponent[mesh_component]\n        then:\n            Mesh.EntityEnteredEvent.Subscribe(OnEntityEntered)\n            spawn { PlayCowAbdcutionAnimation() }\n\n\n    PlayCowAbdcutionAnimation()<suspends>:void =\n        Entity.SetGlobalTransform(StartTransform)\n        Sleep(2.0)\n        if:\n            Mesh := Entity.GetComponent[mesh_component]\n            MovementComponent := Entity.GetComponent[keyframed_movement_component]\n        then:\n            set Mesh.Visible = true\n            MovementComponent.SetKeyframes(Keyframes, oneshot_keyframed_movement_playback_mode{})\n            MovementComponent.Play()\n\n\n    OnEntityEntered(OtherEntity:entity):void =\n        if:\n            Mesh := Entity.GetComponent[mesh_component]\n            MovementComponent := Entity.GetComponent[keyframed_movement_component]\n        then:\n            MovementComponent.Stop()\n            set Mesh.Visible = false\n            \n            spawn { PlayCowAbdcutionAnimation() }",
  "external_calls": []
}
    