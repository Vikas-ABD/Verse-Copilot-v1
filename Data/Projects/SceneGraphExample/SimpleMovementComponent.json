{
  "file_name": "SimpleMovementComponent.verse",
  "questions": [
    "How do I add a component to an entity at runtime using Verse code?",
    "What is the Scene Graph pattern for creating a simplified 'wrapper' around a complex built-in component?",
    "How can I check if an entity already has a specific component before adding a new one?",
    "What is the code to create a new component instance and add it to an entity with `Entity.AddComponents()`?"
  ],
  "explanation": "This script defines a 'component' that acts as a simplified, user-friendly interface for the built-in `keyframed_movement_component`. It's a powerful example of the 'wrapper' pattern in the Scene Graph, where a custom component is created to make a more complex one easier to use for designers.\n\n- **Scene Graph Concepts Demonstrated:**\n  - **Adding Components at Runtime:** This is the most important concept in this file. The `OnSimulate` function first checks if the entity it's attached to already has a `keyframed_movement_component`. If it doesn't, the script dynamically creates a new instance of the component in code and adds it to the entity using `Entity.AddComponents()`. This is a core technique for building and configuring entities programmatically.\n  - **Component as a Wrapper:** This script doesn't implement its own animation logic. Instead, it takes simple, editable properties (like a `MovementMode` enum) and uses them to configure the settings of the more complex, built-in `keyframed_movement_component`. This simplifies the workflow for designers in the UEFN editor.",
  "code": "using { /Verse.org }\nusing { /Verse.org/Native }\nusing { /Verse.org/SceneGraph }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/SceneGraph/KeyframedMovement }\n\nmovement_mode<public> := enum:\n    OneShot\n    Loop\n    PingPong\n\nsimple_movement_component<public> := class<final_super>(component):\n\n    @editable\n    var Keyframes: []keyframed_movement_delta = array{}\n\n    @editable\n    var AutoPlay: logic = true\n\n    @editable\n    MovementMode: movement_mode = movement_mode.Loop\n        \n    OnSimulate<override>()<suspends>:void =\n        Sleep (0.1)\n        if:\n            KeyframedMovementComponent := Entity.GetComponent[keyframed_movement_component]\n        then:\n            InitializeKeyframedMovementComponent(KeyframedMovementComponent)\n        else:\n            NewKeyFramedMovementComponent := keyframed_movement_component { Entity := Entity }\n            Entity.AddComponents(array{ NewKeyFramedMovementComponent })\n            InitializeKeyframedMovementComponent(NewKeyFramedMovementComponent)\n\n    InitializeKeyframedMovementComponent(InKeyframedMovementComponent:keyframed_movement_component):void =\n        var PlaybackMode:keyframed_movement_playback_mode = oneshot_keyframed_movement_playback_mode{}\n        \n        case (MovementMode):\n            movement_mode.OneShot =>\n                set PlaybackMode = oneshot_keyframed_movement_playback_mode{}\n            movement_mode.Loop =>\n                set PlaybackMode =  loop_keyframed_movement_playback_mode{}\n            movement_mode.PingPong =>\n                set PlaybackMode = pingpong_keyframed_movement_playback_mode{}\n\n        InKeyframedMovementComponent.SetKeyframes(Keyframes, PlaybackMode) \n        \n        if:\n            AutoPlay?\n        then:\n            InKeyframedMovementComponent.Play()",
  "external_calls": []
}
