{
  "file_name": "FindSweepHitsExampleComponent.verse",
  "questions": [
    "How do I perform a raycast or line trace in Verse using the Scene Graph?",
    "What is the Verse code for `FindSweepHits` to detect the first object hit along a vector path?",
    "How can I check if a specific type of prop is blocking the line of sight between two points?",
    "What is the difference between FindOverlapHits and FindSweepHits in Scene Graph?"
  ],
  "explanation": "This script defines a 'component' that gives an entity (like a UFO) the ability to find and interact with another entity (a cow) using a sweep test, which is similar to a raycast or line trace. It demonstrates a more precise method of spatial query than the overlap check.\n\n- **Scene Graph Concepts Demonstrated:**\n  - `Entity.FindSweepHits()`: This is the core function of the script. It takes an entity's collision shape and a 'DisplacementVector' (a direction and distance) and returns all entities it collides with as it 'sweeps' along that vector. This is used to simulate a beam scanning downwards from the UFO.\n  - **First Hit Logic:** The script includes a helper function, `FindFirstSweepHit`, which shows a common and essential pattern. It performs the sweep but immediately returns only the very first entity that was hit, ignoring anything behind it. This is crucial for mechanics like bullet collision or line of sight.\n  - **Component Casting:** After finding a hit, the code checks `HitEntity.GetComponent[Meshes.SM_Toy_Cow]` to verify that the object it hit was, in fact, the cow and not the floor or another object. This is a common way to identify specific objects in the Scene Graph.",
  "code": "using { /Verse.org }\nusing { /Verse.org/Native }\nusing { /Verse.org/SceneGraph }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/Colors }\nusing { /Verse.org/SceneGraph/KeyframedMovement }\nusing { /Verse.org/SpatialMath }\nusing { /Fortnite.com/Game }\nusing { /Fortnite.com/Devices }\n\n\nfind_sweephits_example_component<public> := class<final_super>(component):\n\n    @editable\n    Trigger:volume_device = volume_device{}\n\n    var IsAbducting:logic = false\n \n    OnBeginSimulation<override>():void =\n        (super:)OnBeginSimulation()\n        if:\n            FortRoundManager := Entity.GetFortRoundManager[]\n        then:\n            FortRoundManager.SubscribeRoundStarted(OnRoundStarted)\n\n    OnRoundStarted():void=\n        Trigger.AgentEntersEvent.Subscribe(OnTriggerEntered)\n        Trigger.AgentExitsEvent.Subscribe(OnTriggerExited)\n\n    OnTriggerEntered(Agent:agent):void=\n        # When a cow is inside the abduction area, stop the ship moving and start the abduction beam.\n        if:\n            not IsAbducting?\n            MovementComponent := Entity.GetComponent[keyframed_movement_component]\n        then:\n            MovementComponent.Pause()\n            EnableAbductionBeam()\n\n            # Perform the sweep from the UFO Mesh\n            if (Child := Entity.GetEntities()[0]):\n                DisplacementVector := vector3{Left:=0.0, Up:=-300.0, Forward:=0.0}\n                FirstSweepHitEntity := FindFirstSweepHit(Child, DisplacementVector)\n\n                # If the First Hit Entity is the Cow Mesh, then abduct the Cow\n                if (HitEntity := FirstSweepHitEntity?; HitEntity.GetComponent[Meshes.SM_Toy_Cow]):\n                    spawn { AbductCow(HitEntity) }\n\n\n    OnTriggerExited(Agent:agent):void =\n        # Resume UFO patrol if not in the process of abducting a cow.\n        if:\n            not IsAbducting?\n            MovementComponent := Entity.GetComponent[keyframed_movement_component]\n        then:\n            MovementComponent.Play()\n            DisableAbductionBeam()\n\n    \n    # Returns the first Entity hit by FindSweepHits\n    FindFirstSweepHit(InEntity:entity, DisplacementVector:vector3):?entity =\n        for (SweepHit : InEntity.FindSweepHits(DisplacementVector)):\n            return option{ SweepHit.TargetComponent.Entity }\n        return false\n\n\n    EnableAbductionBeam():void =\n        for:\n            Mesh : Entity.FindDescendantComponents(Meshes.S_EV_SimpleLightBeam_01)\n        do:\n            Mesh.Enable()\n        \n        for:\n            Light : Entity.FindDescendantComponents(spot_light_component)\n        do:\n            Light.Enable()\n\n    DisableAbductionBeam():void =\n        for:\n            Mesh : Entity.FindDescendantComponents(Meshes.S_EV_SimpleLightBeam_01)\n        do:\n            Mesh.Disable()\n        \n        for:\n            Light : Entity.FindDescendantComponents(spot_light_component)\n        do:\n            Light.Disable()\n            \n\n    AbductCow(CowEntity:entity)<suspends>:void =\n        if:\n            # Get the components on the Cow Prefab\n            CowMesh := CowEntity.GetComponent[mesh_component]\n            MovementComponent := CowEntity.GetComponent[keyframed_movement_component]\n        then:\n            set IsAbducting = true\n    \n            # Get the delta between cow and UFO\n            DeltaTransform := transform:\n                Translation:= Entity.GetGlobalTransform().Translation - CowEntity.GetGlobalTransform().Translation\n                Scale := vector3{ Left := 0.0, Up := 0.0, Forward := 0.0 }\n    \n            # Create a key frame\n            Keyframe := keyframed_movement_delta:\n                Transform := DeltaTransform\n                Duration := 2.0\n                Easing := ease_in_cubic_bezier_easing_function{}\n    \n            MovementComponent.SetKeyframes(array{ Keyframe }, oneshot_keyframed_movement_playback_mode{})\n            MovementComponent.Play()\n    \n            # Wait for Entity Entered Event\n            CowMesh.EntityEnteredEvent.Await()\n    \n            # Remove Cow from world\n            CowEntity.RemoveFromParent()\n    \n            # Resume UFO Patrol\n            set IsAbducting = false\n            if:\n                UFOMovementComponent := Entity.GetComponent[keyframed_movement_component]\n            then:\n                UFOMovementComponent.Play()\n                DisableAbductionBeam()",
  "external_calls": []
}
