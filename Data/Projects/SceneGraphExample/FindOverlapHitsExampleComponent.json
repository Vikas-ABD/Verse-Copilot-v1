{
  "file_name": "FindOverlapHitsExampleComponent.verse",
  "questions": [
    "How do I use Scene Graph to check for specific props inside a defined area or volume?",
    "What is the Verse code for `FindOverlapHits` to detect objects within a shape?",
    "How can a component on a parent entity find and control components on its children?",
    "How do I dynamically create an animation in code to move one entity towards another?",
    "What is the Scene Graph method for despawning or removing an entity from the world?"
  ],
  "explanation": "This script defines a 'component' that gives an entity (like a UFO) the ability to actively search for and interact with another specific entity (like a cow). It demonstrates several advanced Scene Graph concepts for creating dynamic, multi-stage interactions.\n\n- **Scene Graph Concepts Demonstrated:**\n  - `Entity.FindOverlapHits()`: This is the core function. It allows a script to create a temporary, invisible collision shape (in this case, a `collision_capsule`) and get a list of all entities that are currently overlapping with it. This is used here to scan for the cow.\n  - `Entity.FindDescendantComponents()`: This function is used to find and control child components within a prefab's hierarchy. The script uses it to find all the mesh and light components that make up the UFO's 'abduction beam' and turn them on or off together.\n  - **Dynamic Animation:** The `AbductCow` function does not use a pre-built animation. Instead, it calculates the difference in position between the UFO and the cow and creates a new `keyframed_movement_delta` in code to smoothly move the cow upwards.\n  - `Entity.RemoveFromParent()`: This is the Scene Graph's method for destroying an entity. It is called on the cow after it has been successfully 'abducted' to remove it from the game.",
  "code": "using { /Verse.org }\nusing { /Verse.org/Native }\nusing { /Verse.org/SceneGraph }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/Colors }\nusing { /Verse.org/SceneGraph/KeyframedMovement }\nusing { /Verse.org/SpatialMath }\nusing { /Fortnite.com/Game }\nusing { /Fortnite.com/Devices }\n\n\nfind_overlaphits_example_component<public> := class<final_super>(component):\n\n    @editable\n    Trigger:volume_device = volume_device{}\n\n    var IsAbducting:logic = false\n \n    OnBeginSimulation<override>():void =\n        (super:)OnBeginSimulation()\n        if:\n            FortRoundManager := Entity.GetFortRoundManager[]\n        then:\n            FortRoundManager.SubscribeRoundStarted(OnRoundStarted)\n\n    OnRoundStarted():void=\n        Trigger.AgentEntersEvent.Subscribe(OnTriggerEntered)\n        Trigger.AgentExitsEvent.Subscribe(OnTriggerExited)\n\n    OnTriggerEntered(Agent:agent):void =\n        if:\n            not IsAbducting?\n            MovementComponent := Entity.GetComponent[keyframed_movement_component]\n        then:\n            MovementComponent.Pause()\n            EnableAbductionBeam()\n            PerformOverlapCheck()\n            \n\n    OnTriggerExited(Agent:agent):void =\n        if:\n            not IsAbducting?\n            MovementComponent := Entity.GetComponent[keyframed_movement_component]\n        then:\n            MovementComponent.Play()\n            DisableAbductionBeam()\n\n            \n    PerformOverlapCheck():void =\n        CollisionCapsule := collision_capsule{Radius := 36.0, Length := 328.0}\n        var CollisionTransform:transform = Entity.GetGlobalTransform()\n        set CollisionTransform.Translation.Up = CollisionTransform.Translation.Up - 248.0\n        \n        # Perform the overlap check from the entity that contains the mesh_component\n        for:\n            Overlap : Entity.FindOverlapHits(CollisionTransform, CollisionCapsule)\n            # Cast to see if what was overlapped was the Cow\n            CowMesh := Meshes.SM_Toy_Cow[Overlap.TargetComponent]\n            CowPrefab := CowMesh.Entity\n        do:\n            spawn { AbductCow(CowPrefab) }\n\n\n    EnableAbductionBeam():void =\n        for:\n            Mesh : Entity.FindDescendantComponents(Meshes.S_EV_SimpleLightBeam_01)\n        do:\n            Mesh.Enable()\n        \n        for:\n            Light : Entity.FindDescendantComponents(spot_light_component)\n        do:\n            Light.Enable()\n\n    DisableAbductionBeam():void =\n        for:\n            Mesh : Entity.FindDescendantComponents(Meshes.S_EV_SimpleLightBeam_01)\n        do:\n            Mesh.Disable()\n        \n        for:\n            Light : Entity.FindDescendantComponents(spot_light_component)\n        do:\n            Light.Disable()\n        \n\n    AbductCow(CowEntity:entity)<suspends>:void =\n        # Get the components on the Cow Prefab\n        if:\n            CowMesh := CowEntity.GetComponent[mesh_component]\n            MovementComponent := CowEntity.GetComponent[keyframed_movement_component]\n        then:\n            set IsAbducting = true\n\n            # Get the delta between Cow and UFO\n            DeltaTransform:transform = transform:\n                Translation:= Entity.GetGlobalTransform().Translation - CowEntity.GetGlobalTransform().Translation\n                Scale := vector3{Left:= 0.0, Up:= 0.0, Forward:= 0.0}\n            \n            # Create a key frame\n            Keyframe := keyframed_movement_delta:\n                Transform := DeltaTransform\n                Duration := 2.0\n                Easing := ease_in_cubic_bezier_easing_function{}\n    \n            MovementComponent.SetKeyframes(array{ Keyframe }, oneshot_keyframed_movement_playback_mode{})\n            MovementComponent.Play()\n    \n            # Wait for Entity Entered Event\n            CowMesh.EntityEnteredEvent.Await()\n    \n            # Remove Cow from world\n            CowEntity.RemoveFromParent()\n    \n            # Resume UFO Patrol\n            set IsAbducting = false\n            if:\n                UFOMovementComponent := Entity.GetComponent[keyframed_movement_component]\n            then:\n                UFOMovementComponent.Play()\n                DisableAbductionBeam()",
  "external_calls": []
}
