[
  {
    "file_name": "random_spooks_manager.verse",
    "questions": [
      "How can I create a random scare system with probability-based jumpscares and atmospheric effects in Verse?",
      "What is the Verse code for managing random horror events, volume-based triggers, and scheduled scares?",
      "I need a script that handles random spook events, jumpscare timing, and probability-based horror mechanics.",
      "How do I create a spooks manager that coordinates random scares with player movement and timed events?"
    ],
    "explanation": "This script provides a comprehensive random scare system for a horror game, managing probability-based jumpscares, atmospheric effects, and dynamic horror events. It's designed to create unpredictable and engaging horror experiences through randomized scare mechanics.\n\n**Core Components:**\n- random_spooks_data: Data class containing configuration for different spook types and their parameters\n- random_spooks_manager: Main manager class extending event_communicator for scare coordination\n- Dual trigger system supporting both time-based and volume-based scare activation\n- Probability-based event system for unpredictable horror experiences\n- Player-specific scare targeting and event broadcasting\n\n**Key Features:**\n1. **Random Scare System**: Probability-based horror events with configurable chance rates\n2. **Dual Trigger Types**: Support for both time-based (AFTER_SECONDS) and spatial (ON_ENTER_VOLUME) triggers\n3. **Jumpscare Management**: Coordinated jumpscare events with player targeting and event broadcasting\n4. **Atmospheric Effects**: Support for prop movement and environmental changes\n5. **Volume-Based Triggers**: Spatial awareness for location-based scares\n6. **Probability Control**: Fine-tuned control over scare frequency and intensity\n7. **Player Tracking**: Individual player targeting for personalized scare experiences\n8. **Event Integration**: Full integration with global event system for coordinated effects\n\n**Spook Types and Configuration:**\n- **spook_type.AFTER_SECONDS**: Time-based triggers that activate after specified delays\n- **spook_type.ON_ENTER_VOLUME**: Spatial triggers activated when players enter specific areas\n- **JumpscareType**: Configurable trigger type for jumpscare events\n- **MovePropsType**: Configurable trigger type for prop movement effects\n- **Probability Settings**: Individual probability controls for each effect type\n- **Timing Controls**: Customizable delays for time-based triggers\n\n**Jumpscare System:**\n- **JumpscareSchedule()**: Asynchronous scheduling system for time-based jumpscares\n- **JumpscareVolumeEntered()**: Volume-based jumpscare trigger with player validation\n- **FireJumpscare()**: Central jumpscare execution with event broadcasting\n- **Probability Evaluation**: Random number generation for scare chance determination\n- **Player Targeting**: Specific player targeting for jumpscare events\n\n**Volume Management:**\n- **ToggleJumpscareVolume()**: Dynamic volume activation/deactivation control\n- **AgentEntersEvent**: Event subscription for spatial trigger detection\n- **Player Validation**: Ensures only target players trigger volume-based scares\n- **Volume State Control**: Proper enable/disable management for trigger zones\n\n**Prop Movement System:**\n- **MovePropsVolume**: Dedicated volume system for prop-based scares\n- **MovePropsProbability**: Probability control for prop movement events\n- **MovePropsAfterSeconds**: Timing control for scheduled prop movements\n- **Environmental Effects**: Support for atmospheric prop manipulation\n\n**Probability and Randomization:**\n- **GetRandomInt()**: Random number generation for probability evaluation\n- **Configurable Probabilities**: Individual probability settings for each effect type\n- **Percentage-Based System**: 1-100 probability scale for intuitive configuration\n- **Multiple RNG Checks**: Separate probability evaluation for different scare types\n\n**Event Communication:**\n- **event_communicator**: Extends event communication system for coordinated effects\n- **GlobalEventChannel**: Integration with global event broadcasting system\n- **PlayerEventChannel**: Player-specific event targeting and communication\n- **event_names.PLAYER_JUMPSCARE**: Standardized jumpscare event broadcasting\n- **event_player_jumpscare**: Structured event data for jumpscare coordination\n\n**Setup and Configuration:**\n- **SetupSpooks()**: Comprehensive initialization with data binding and player assignment\n- **Trigger Type Evaluation**: Dynamic setup based on configured spook types\n- **Event Subscription**: Automatic event handler registration based on trigger types\n- **Volume Management**: Intelligent volume state management during setup\n\n**Technical Implementation:**\n- **Asynchronous Processing**: Suspending functions for time-based scare scheduling\n- **State Management**: Proper tracking of volume states and player assignments\n- **Event-Driven Architecture**: Responsive scare system triggered by game events\n- **Modular Design**: Separate configuration and execution for easy customization\n\n**Integration Points:**\n- **Player Data System**: Coordinates with player_data for jumpscare event handling\n- **Room Management**: Integrates with room systems for location-based scares\n- **Global Events**: Uses global event system for coordinated horror effects\n- **Volume Systems**: Leverages mutator_zone_device for spatial trigger detection\n\n**Scare Flow:**\n1. **Setup**: SetupSpooks() initializes system with configuration and player reference\n2. **Trigger Evaluation**: System determines appropriate trigger type based on configuration\n3. **Event Scheduling**: Time-based triggers schedule future scare events\n4. **Spatial Monitoring**: Volume-based triggers monitor player movement\n5. **Probability Check**: Random evaluation determines if scare should activate\n6. **Scare Execution**: FireJumpscare() broadcasts jumpscare event to target player\n7. **Effect Coordination**: Global event system coordinates visual and audio effects\n\n**Use Cases:**\n- **Atmospheric Horror**: Random scares to maintain tension and unpredictability\n- **Location-Based Scares**: Spatial triggers for area-specific horror events\n- **Timed Suspense**: Scheduled scares to build and release tension\n- **Dynamic Horror**: Probability-based system for varied scare experiences\n- **Player-Specific Scares**: Individual targeting for personalized horror\n\n**How It Works:**\n1. **Initialization**: SetupSpooks() establishes configuration, player reference, and trigger types\n2. **Trigger Setup**: System configures appropriate trigger mechanisms based on spook types\n3. **Event Monitoring**: Continuous monitoring for trigger conditions (time or spatial)\n4. **Probability Evaluation**: Random chance determination for scare activation\n5. **Scare Execution**: FireJumpscare() handles event broadcasting and effect coordination\n6. **Effect Integration**: Global event system coordinates with other game systems for full scare experience\n7. **State Management**: Proper cleanup and state management for repeatable scare events",
    "code": "\nusing { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /Verse.org/Random }\n\nrandom_spooks_data := class:\n    @editable\n    JumpscareType: spook_type = spook_type.AFTER_SECONDS\n    @editable\n    JumpscareVolume: mutator_zone_device = mutator_zone_device{}\n    @editable\n    JumpscareProbability: int = 0\n    @editable\n    JumpscareAfterSeconds: float = 0.0\n\n    @editable\n    MovePropsType: spook_type = spook_type.AFTER_SECONDS\n    @editable\n    MovePropsVolume: mutator_zone_device = mutator_zone_device{}\n    @editable\n    MovePropsProbability: int = 0\n    @editable\n    MovePropsAfterSeconds: float = 0.0\n\n# A Verse-authored creative device that can be placed in a level\nrandom_spooks_manager := class(event_communicator):\n\n    var SpooksData: random_spooks_data = random_spooks_data{}\n    var PlayerInRoom: ?player = false\n\n    SetupSpooks(NewGlobalEventChannel: global_event_channel, NewSpooksData: random_spooks_data, NewPlayer: player): void =\n        Setup(NewGlobalEventChannel)\n        set SpooksData = NewSpooksData\n        set PlayerInRoom = option{NewPlayer}\n\n        case (SpooksData.JumpscareType):\n            spook_type.AFTER_SECONDS =>\n                ToggleJumpscareVolume(false)\n                spawn{JumpscareSchedule()}\n\n            spook_type.ON_ENTER_VOLUME =>\n                ToggleJumpscareVolume(true)\n                SpooksData.JumpscareVolume.AgentEntersEvent.Subscribe(JumpscareVolumeEntered)\n\n    JumpscareSchedule()<suspends>: void =\n        Print(\"scheduling jumpscare maybe\")\n        RNG := GetRandomInt(1,100)\n        if(RNG <= SpooksData.JumpscareProbability):\n            Sleep(SpooksData.JumpscareAfterSeconds)\n            FireJumpscare()\n        \n    JumpscareVolumeEntered(Agent: agent): void =\n        if(Player := PlayerInRoom?, Agent = Player):\n            # ToggleJumpscareVolume(false)\n            Print(\"volume jumpscare maybe\")\n\n            RNG := GetRandomInt(1,100)\n            if(RNG <= SpooksData.JumpscareProbability):\n                FireJumpscare()\n\n    ToggleJumpscareVolume(Active: logic): void =\n        if(Active?):\n            SpooksData.JumpscareVolume.Enable()\n        else:\n            SpooksData.JumpscareVolume.Disable()\n\n    FireJumpscare(): void =\n        Print(\"Firing jumpscare YES\")\n        GlobalEventChannel.PlayerEventChannel.BroadcastChannel(event_names.PLAYER_JUMPSCARE, event_player_jumpscare{}, PlayerInRoom)\n\n    ",
    "external_calls": [
      "event_communicator",
      "spook_type",
      "mutator_zone_device",
      "global_event_channel",
      "player",
      "agent",
      "event_names",
      "event_player_jumpscare",
      "GetRandomInt",
      "Print",
      "Sleep"
    ]
  }
] 