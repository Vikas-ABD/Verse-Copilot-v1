[
  {
    "file_name": "puzzle_download_upload.verse",
    "questions": [
      "How can I create a puzzle that requires a player to hold a button to fill a progress bar, first for a 'download' and then for an 'upload'?",
      "What is the Verse code for a two-stage interactive puzzle with a custom UI slider and fixed camera points?",
      "I need a script that uses `input_trigger_device` to check if a player is holding a key, updating a UI and puzzle state accordingly.",
      "How do I implement a download/upload sequence where completing the first action unlocks the second, with visual feedback via a `canvas` widget?"
    ],
    "explanation": "This script implements a two-stage puzzle where the player must first 'download' and then 'upload' data by interacting with two separate buttons. The core mechanic requires the player to press and hold a key (`input_trigger_device`) to fill a progress bar, which is displayed on the screen using a custom UI `canvas` with a `slider_regular` widget. The puzzle uses `gameplay_camera_fixed_point_device` to lock the player's view during these interactions, enhancing immersion.\n\n**Core Components:**\n- `puzzle_download_upload`: The main class that manages the puzzle logic, inheriting from `puzzle_base`.\n- **UI Widgets**: The script dynamically creates a `canvas` containing a `text_block` and a `slider_regular` to show the current action (Downloading/Uploading) and its progress.\n- `button_device`: Two buttons, `DownloadButton` and `UploadButton`, are used to initiate the two stages of the puzzle.\n- `input_trigger_device`: This device is used to check if the player is actively holding down the interact key during the download and upload processes.\n- `gameplay_camera_fixed_point_device`: Two fixed-point cameras are used to control the player's perspective during the download and upload phases.\n\n**Key Features:**\n1. **Two-Stage Progression**: The puzzle is only solved after the player completes both the download and upload sequences in order. The `UploadButton` is disabled until the download is complete.\n2. **Hold-to-Interact Mechanic**: The `DownloadData` and `UploadData` functions contain a loop that checks `InputDevice.IsHeld`. Progress is only made while the key is held; otherwise, the process fails and resets.\n3. **Dynamic UI Feedback**: The script uses `AddWidgetToPlayer` to display a custom UI with a progress slider. The `UpdateUI` function is called repeatedly to reflect the current `DownloadPercentage` or `UploadPercentage` on the slider.\n4. **Camera Control**: Interacting with the buttons switches the player's view to a `gameplay_camera_fixed_point_device`, focusing their attention on the task. The camera is released upon completion or failure.\n5. **State Management**: The script uses boolean flags (`IsDataDownloadCompleted`, `IsDataUploadCompleted`) and float variables (`DownloadPercentage`, `UploadPercentage`) to track the puzzle's state and progress.\n\n**Workflow:**\n1. **Initialization**: On `OnBegin`, the script subscribes to the `InteractedWithEvent` for both the `DownloadButton` and `UploadButton`.\n2. **Download Phase**: The player presses the `DownloadButton`. This triggers `DownloadButtonPressed`, which locks the camera (`FixedPointCameraDownload`) and starts the `DownloadData` coroutine.\n3. **Data Download**: Inside `DownloadData`, a UI is added to the player's screen. A loop begins, and as long as the player holds the interact key, `DownloadPercentage` increases. The UI slider is updated continuously. If the key is released, `OnDownloadFailed` is called, and the process aborts. If it reaches 100%, `OnDownloadCompleted` is called.\n4. **Upload Phase**: Once the download is complete (`IsDataDownloadCompleted` is true), the `UploadButton` becomes functional. The player presses it, triggering `UploadButtonPressed`, which locks the camera (`FixedPointCameraUpload`) and starts the `UploadData` coroutine.\n5. **Data Upload**: The `UploadData` process mirrors the download process. If successful, `OnUploadCompleted` is called.\n6. **Puzzle Solved**: `OnUploadCompleted` calls the base `OnPuzzleSolved()` function, marking the puzzle as complete.\n\n**Use Cases:**\n- Creating interactive terminals or consoles that require sustained player input.\n- Implementing tasks that involve progress bars, such as hacking, decrypting, or transferring data.\n- A template for multi-stage puzzles where one action must be completed to unlock the next.",
    "code": "using { /Fortnite.com/Devices }\nusing { /Fortnite.com/UI }\nusing { /Verse.org/Simulation }\nusing { /Verse.org/Colors }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /UnrealEngine.com/Temporary/UI }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\n\n# See https://dev.epicgames.com/documentation/en-us/uefn/create-your-own-device-in-verse for how to create a verse device.\n\n# A Verse-authored creative device that can be placed in a level\npuzzle_download_upload := class(puzzle_base):\n    var NamePuzzle<override> : puzzle_names = puzzle_names.DOWNLOAD_UPLOAD # overriding Puzzle Name\n    \n    # Stores the Puzzle UI widget per player\n    var PlayerUICanvas : canvas = canvas{}\n\n    @editable\n    DownloadButton : button_device = button_device{} # Button for Downloading interactions\n    @editable\n    DownloadSpeed : float = 10.0  # MB per sec, Speed of Download\n    @editable\n    UploadButton : button_device = button_device{} # Button for Uploading interactions\n    @editable\n    UploadSpeed : float = 10.0 # MB per sec, Speed Of Upload\n\n    @editable\n    PackateSleepTime : float = 0.1 # How often sends a packet [Used for Updating UI]\n\n    @editable\n    InputDevice : input_trigger_device = input_trigger_device{} # Input Handler [E]\n\n    @editable\n    FixedPointCameraDownload : gameplay_camera_fixed_point_device = gameplay_camera_fixed_point_device{} # Fixed Point Camera for Download\n    @editable\n    FixedPointCameraUpload : gameplay_camera_fixed_point_device = gameplay_camera_fixed_point_device{} # Fixed Point Camer for Upload\n\n    var IsDataDownloadCompleted : logic = false # True when Download Completed\n    var IsDataUploadCompleted : logic = false # True when Upload Completed\n    var DownloadPercentage : float = 0.0 # Tracks Download Percentage\n    var UploadPercentage : float = 0.0 # Tracks Upload Percentage\n\n    var DownloadPercentageSlider : slider_regular = slider_regular{} # Slider Widget for Download UI\n    var UploadPercentageSlider : slider_regular = slider_regular{} # Slider Widget for Upload UI\n\n    # Initializes Interact events on Buttons\n    OnBegin<override>()<suspends>:void=\n        set GlobalEventChannel = FindGlobalEventChannel()\n        set DefaultCancelables += array:\n            DownloadButton.InteractedWithEvent.Subscribe(DownloadButtonPressed)\n            UploadButton.InteractedWithEvent.Subscribe(UploadButtonPressed)\n\n        FixedPointCameraDownload.Enable()\n        FixedPointCameraUpload.Enable()\n\n    # Handles Download Button Interactions\n    DownloadButtonPressed(Agent : agent) : void =\n        FixedPointCameraDownload.AddToAll()\n        spawn:\n            DownloadData(Agent)\n\n    # Handles Download Button Interactions\n    UploadButtonPressed(Agent : agent) : void =   \n        if (IsDataDownloadCompleted?, DownloadPercentage = 100.0):\n            FixedPointCameraUpload.AddToAll()   \n            spawn:\n                UploadData(Agent)\n        else:\n            Print(\"Please Download The Data First...\", ?Duration:=6.0)\n\n    # Uploads A Data, If Downloaded\n    UploadData(Agent : agent)<suspends> : void=\n        Sleep(0.5)\n        AddWidgetToPlayer(\"Uploading\", Agent)\n        loop:\n            Sleep(PackateSleepTime)\n            if(InputDevice.IsHeld[Agent]):\n                set UploadPercentage += (PackateSleepTime * UploadSpeed)\n                UpdateUI()\n                if(UploadPercentage = 100.0):\n                    OnUploadCompleted(Agent)\n                    break\n            else:\n                OnUploadFailed(Agent)\n                break\n    # Downloads A Data, If Not Downloaded\n    DownloadData(Agent : agent)<suspends> : void=\n        Sleep(0.5)\n        AddWidgetToPlayer(\"Downloading\", Agent)\n        loop:\n            Sleep(PackateSleepTime)\n            if(InputDevice.IsHeld[Agent]):\n                set DownloadPercentage += (PackateSleepTime * UploadSpeed)\n                UpdateUI()\n                if(DownloadPercentage = 100.0):\n                    OnDownloadCompleted(Agent)\n                    break\n            else:\n                OnDownloadFailed(Agent)\n                break\n    # Shows Download Complete message, Handles Post Download Expressions\n    OnDownloadCompleted(Agent : agent) : void=\n        Print(\"Download Completed\", ?Duration:=6.0)\n        set IsDataDownloadCompleted = true\n        FixedPointCameraDownload.RemoveFrom(Agent)\n        DownloadButton.Disable()\n        RemoveWidgetFromPlayer(Agent)\n    \n    # Shows Download Failed message, Handles On Download Fail Expressions\n    OnDownloadFailed(Agent : agent) : void=\n        Print(\"System Interepted : Download Failed\", ?Duration:=6.0)\n        set DownloadPercentage = 0.0\n        FixedPointCameraDownload.RemoveFrom(Agent)\n        RemoveWidgetFromPlayer(Agent)\n    \n    # Shows Upload Complete message, Handles Post Upload Expressions\n    # Call the OnPuzzleSolved() of Parent Class\n    OnUploadCompleted(Agent : agent) : void=\n        Print(\"Upload Completed\", ?Duration:=6.0)\n        set IsDataUploadCompleted = true\n        FixedPointCameraUpload.RemoveFrom(Agent)\n        UploadButton.Disable()\n        RemoveWidgetFromPlayer(Agent)\n        OnPuzzleSolved()\n\n    # Shows Upload Failed message, Handles On Upload Fail Expressions\n    OnUploadFailed(Agent : agent) : void=\n        Print(\"System Interepted : Upload Failed\", ?Duration:=6.0)\n        set UploadPercentage = 0.0\n        FixedPointCameraUpload.RemoveFrom(Agent)\n        RemoveWidgetFromPlayer(Agent)\n\n\n    #------------------------------------------------\n    # UI PART :\n    #------------------------------------------------\n\n    # Adds a Widget to the player showing Download Percentage/Upload Percentage\n    AddWidgetToPlayer(Text : string, Agent : agent) : void=\n        set DownloadPercentageSlider = slider_regular{DefaultValue := DownloadPercentage}\n        set UploadPercentageSlider = slider_regular{DefaultValue := UploadPercentage}\n        DownloadPercentageSlider.SetMaxValue(100.0)\n        UploadPercentageSlider.SetMaxValue(100.0)\n        set PlayerUICanvas = canvas:\n            Slots := array:\n                canvas_slot:\n                    Anchors := anchors{Minimum := vector2{X := 0.5, Y := 0.5}, Maximum := vector2{X := 0.5, Y := 0.5}}\n                    Alignment := vector2{X := 0.5, Y := 2.0}\n                    Widget := text_block{DefaultText := StringToMessage(Text)}\n                canvas_slot:\n                    Anchors := anchors{Minimum := vector2{X := 0.5, Y := 0.5}, Maximum := vector2{X := 0.5, Y := 0.5}}\n                    Alignment := vector2{X := 0.5, Y := 0.5}\n                    SizeToContent := true\n                    Widget := \n                        if(Text = \"Downloading\"):\n                            DownloadPercentageSlider\n                        else:\n                            UploadPercentageSlider\n\n        if(Player := player[Agent], PlayerUI := GetPlayerUI[Player]):\n            PlayerUI.AddWidget(PlayerUICanvas)\n    \n    # Helper function to Update the Slider values\n    UpdateUI(): void=\n        DownloadPercentageSlider.SetValue(DownloadPercentage)\n        UploadPercentageSlider.SetValue(UploadPercentage)\n    \n    # Removes the widget from the the Player UI\n    RemoveWidgetFromPlayer(Agent : agent) : void=\n        if:\n            Player := player[Agent]\n            PlayerUI := GetPlayerUI[Player]\n        then:\n            PlayerUI.RemoveWidget(PlayerUICanvas)",
    "external_calls": [
      "puzzle_base",
      "puzzle_names",
      "canvas",
      "button_device",
      "input_trigger_device",
      "gameplay_camera_fixed_point_device",
      "logic",
      "slider_regular",
      "OnBegin",
      "FindGlobalEventChannel",
      "Subscribe",
      "Enable",
      "AddToAll",
      "spawn",
      "Print",
      "Sleep",
      "loop",
      "IsHeld",
      "OnUploadCompleted",
      "OnUploadFailed",
      "OnDownloadCompleted",
      "OnDownloadFailed",
      "RemoveFrom",
      "Disable",
      "OnPuzzleSolved",
      "AddWidgetToPlayer",
      "RemoveWidgetFromPlayer",
      "SetMaxValue",
      "canvas_slot",
      "anchors",
      "vector2",
      "text_block",
      "StringToMessage",
      "player",
      "GetPlayerUI",
      "AddWidget",
      "SetValue",
      "RemoveWidget",
      "agent",
      "string",
      "float"
    ]
  }
] 