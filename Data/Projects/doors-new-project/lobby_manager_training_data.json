[
  {
    "file_name": "lobby_manager.verse",
    "questions": [
      "How can I create a lobby management system with vault mechanics and coin collection in Verse?",
      "What is the Verse code for managing prop placement, vault unlocking, and reward systems?",
      "I need a script that handles lobby props, coin generation, and persistence integration.",
      "How do I create a lobby manager that coordinates vault systems with player rewards and waiting areas?"
    ],
    "explanation": "This script manages the lobby area of a horror game, handling vault systems, prop placement mechanics, coin collection, and player rewards. It's a comprehensive lobby management system that integrates with the game's persistence and reward systems.\n\n**Core Components:**\n- lobby_prop_data: Manages individual lobby props with placement mechanics, vault associations, and hologram systems\n- vault_data: Handles vault doors, unlock conditions, and associated lobby props\n- lobby_manager: Main class coordinating all lobby systems, coin generation, and player interactions\n\n**Key Features:**\n1. **Vault System**: Multi-vault system with different unlock conditions (button-based, conditional-based)\n2. **Prop Placement**: Interactive prop placement system with hologram previews and placement zones\n3. **Coin Collection**: Comprehensive coin collection system with respawn mechanics and timer-based resets\n4. **Persistence Integration**: Saves and loads vault states, prop placements, and coin collection progress\n5. **Reward Generation**: Dynamic coin generation system based on placed props in waiting areas\n6. **Analytics Integration**: Tracks player interactions and lobby activities\n\n**Vault System Logic:**\n- Each vault has a type (VAULT_COINS, etc.) and associated lobby props\n- Vaults unlock based on room progression or specific conditions\n- When unlocked, vault doors animate open and enable prop placement\n- Vault states persist across game sessions\n\n**Prop Placement Mechanics:**\n- Each prop has a hologram preview and placement zone\n- Props can only be placed when their associated vault is unlocked\n- Placement increases coin generation speed in waiting areas\n- Prop states are saved and restored via persistence system\n\n**Coin Economy:**\n- Coins spawn throughout the lobby and can be collected by players\n- Collecting all coins triggers a reset timer\n- Coin generation speed increases based on placed lobby props\n- Waiting area provides passive coin generation while players are present\n\n**Persistence System:**\n- Saves vault unlock states and prop placement status\n- Tracks coin collection progress and generation rates\n- Integrates with game's main persistence manager\n- Handles first-time player experiences and progress tracking\n\n**Event Communication:**\n- Communicates with global event system for coordination\n- Broadcasts lobby prop state changes\n- Handles room event subscriptions for game state management\n\n**How It Works:**\n1. **Initialization**: Sets up vaults, props, and coin systems on game start\n2. **Vault Management**: Monitors unlock conditions and manages vault states\n3. **Prop Interaction**: Handles prop placement attempts and validates vault access\n4. **Coin Systems**: Manages coin collection, respawn cycles, and generation rates\n5. **Persistence**: Continuously saves and loads player progress and lobby state\n6. **Rewards**: Provides dynamic rewards based on player investment in lobby props",
    "code": "using { /Fortnite.com }\nusing { /Fortnite.com/Devices }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /UnrealEngine.com/Temporary/UI }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Verse.org/Simulation }\n\n# See https://dev.epicgames.com/documentation/en-us/uefn/create-your-own-device-in-verse for how to create a verse device.\n\nlobby_prop_data := class(event_communicator):\n\n    @editable\n    Prop: creative_prop = creative_prop{}\n\n    @editable\n    HologramProp : creative_prop = creative_prop{}\n\n    @editable\n    PlaceZone: mutator_zone_device = mutator_zone_device{}\n\n    @editable\n    PlaceVfx : creative_prop = creative_prop{}\n\n    @editable\n    var PlacingValue : int = 0\n\n    var IsPlaced: logic = false\n    var VaultNumber : int = -1\n    var IsVaultUnlocked : logic = false\n    var InitialLocation : transform = transform{}\n\n    Setup<override>(NewGlobalEventChannel:global_event_channel) : void=\n        (super:)Setup(NewGlobalEventChannel)\n        set InitialLocation = Prop.GetTransform()\n        PlaceZone.AgentEntersEvent.Subscribe(OnPlaceZoneEntered)\n        EnableZone()\n        \n    OnPlaceZoneEntered(Agent : agent) : void=\n        if(IsVaultUnlocked?):\n            DisableZone()\n            option:\n                Place[]\n            GlobalEventChannel.RoomEventChannel.BroadcastChannel(event_names.LOBBY_PROP_STATE, event_lobby_prop_zone{IsPlaced := true, VaultNum := VaultNumber, PropValue := PlacingValue}, option{Agent})\n        else:\n            GlobalEventChannel.RoomEventChannel.BroadcastChannel(event_names.LOBBY_PROP_STATE, event_lobby_prop_zone{IsPlaced := false, VaultNum := VaultNumber, PropValue := PlacingValue}, option{Agent})\n\n    EnableZone() : void =\n        PlaceVfx.Show()\n        PlaceZone.Enable()\n\n    DisableZone() : void =\n        PlaceVfx.Hide()\n        PlaceZone.Disable()\n\n    Place()<decides><transacts> : void=\n        Prop.TeleportTo[HologramProp.GetTransform()]\n        set IsPlaced = true\n        HologramProp.Hide()\n        \n\nvault_data := class:\n    @editable\n    VaultType: vault_type = vault_type.NONE\n    @editable\n    VaultDoor: creative_prop = creative_prop{}\n    @editable\n    VaultButton: button_device = button_device{}\n    @editable\n    VaultConditionalButton: conditional_button_device = conditional_button_device{}\n    @editable\n    LobbyProps: []lobby_prop_data = array{}\n    var IsUnlocked: logic = false\n\n    Setup() : void=\n        VaultButton.InteractedWithEvent.Subscribe(OnButtonPressed)\n        VaultConditionalButton.ActivatedEvent.Subscribe(OnButtonPressed)\n\n    OnButtonPressed(Agent : agent) : void =\n        set IsUnlocked = true\n        for(LobbyProp : LobbyProps):\n            set LobbyProp.IsVaultUnlocked = true\n        spawn:\n            OpenDoor()\n\n    OpenDoor()<suspends> : void=\n        VaultButton.Disable()\n        VaultConditionalButton.Disable()\n        VaultTranslation := VaultDoor.GetTranslation()\n        DoorRotation := MakeRotationFromYawPitchRollDegrees(90.0, 0.0, 0.0)\n        VaultRotation := VaultDoor.GetRotation().UnrotateBy(DoorRotation)\n        VaultDoor.MoveTo(VaultTranslation, VaultRotation, 1.0)\n\n    PlaceProp(Index : int) : void=\n        option:\n            LobbyProps[Index].Place[]\n    \n# A Verse-authored creative device that can be placed in a level\nlobby_manager := class(event_communicator_device):\n\n    @editable\n    Vaults: []vault_data = array{}\n\n    @editable\n    CoinResetTimer : timer_device = timer_device{}\n\n    @editable\n    MessageDevice : hud_message_device = hud_message_device{}\n\n    @editable\n    CoinGenerationHudMessage : hud_message_device = hud_message_device{}\n\n    @editable\n    WaitingAreaVolume : mutator_zone_device = mutator_zone_device{}\n\n    @editable\n    CoinGranter : item_granter_device = item_granter_device{}\n\n    var AllCoins : []collectible_object_device = array{}\n    var CoinCollectCounter : int = 0\n    var NumberOfCoins : int = 0\n    var CoinGenerationSpeed : int = 0\n\n    # Runs when the device is started in a running game\n    OnBegin<override>()<suspends>:void=\n        Setup()\n        for(Index->Vault : Vaults):\n            Vault.Setup()\n            for(LobbyProp : Vault.LobbyProps):\n                set LobbyProp.VaultNumber = Index + 1\n                LobbyProp.Setup(GlobalEventChannel)\n        SetupPersistent()\n        SetupRewards()\n        LoadPersistenceData()\n        InitializeVaults()\n        SubscribeToRoomEvent(OnRoomEventReceived, \"LM\")\n        CoinResetTimer.SuccessEvent.Subscribe(OnCoinTimerFinished)\n        WaitingAreaVolume.AgentEntersEvent.Subscribe(OnEnterWaitingArea)\n\n    OnEnterWaitingArea(Agent : agent) : void=\n        spawn:\n            StartCoinGeneration(Agent)\n\n    StartCoinGeneration(Agent : agent)<suspends> : void=\n        loop:\n            if(WaitingAreaVolume.IsInVolume[Agent]):\n                for(I := 1..CoinGenerationSpeed):\n                    CoinGranter.GrantItem(Agent)\n                CoinGenerationHudMessage.SetText(StringToMessage(\"+{CoinGenerationSpeed}\"))\n                CoinGenerationHudMessage.Show(Agent)\n                Sleep(1.0)\n            else:\n                break\n                \n    OnRoomEventReceived(EventName : event_names, EventData : event_data, ReceivedAgent : ?agent): void=\n        if:\n            EventName = event_names.LOBBY_PROP_STATE\n            Data := event_lobby_prop_zone[EventData]\n            Agent := ReceivedAgent?\n        then:\n            if(Data.IsPlaced?):\n                set CoinGenerationSpeed += Data.PropValue\n                SaveLobbyVaultData(Agent)\n            else:\n                MessageDevice.Show(StringToMessage(\"Unlock Vault {Data.VaultNum}\"))\n\n    LoadPersistenceData() : void=\n        set CoinCollectCounter = PersistenceData.CoinCollectedCount\n        for(Index := 0..CoinCollectCounter-1):\n            if(Coin := AllCoins[Index]):\n                Coin.Hide()\n        if(CoinCollectCounter = NumberOfCoins):\n            set CoinCollectCounter = 0\n\n        for(Index->Data : Vaults):\n            if(OldData := PersistenceData.LobbyVaults[Data.VaultType]):\n                set Data.IsUnlocked = OldData.IsUnlocked\n                if(Data.IsUnlocked?):\n                    for(PropIndex->IsLobbyPropPlaced : OldData.LobbyPropsPlaced, IsLobbyPropPlaced?):\n                        Data.PlaceProp(PropIndex)\n\n    SavePersistenceData(Agent : agent) : void =\n        if:\n            APlayer := player[Agent]\n            set GameSaveData[APlayer] = game_persistent_data:\n                MakeGameSaveData<constructor>(PersistenceData)\n                CoinCollectedCount := CoinCollectCounter\n\n    SaveLobbyVaultData(Agent: agent) : void=\n        var SavedLobbyVaults : [vault_type]vault_data_persistent = PersistenceData.LobbyVaults\n        for(CurrentVault : Vaults):\n            NewLobbyProps := for(CurrentLobbyPropData : CurrentVault.LobbyProps):\n                CurrentLobbyPropData.IsPlaced\n            if:\n                set SavedLobbyVaults[CurrentVault.VaultType] = vault_data_persistent{\n                        VaultType := CurrentVault.VaultType\n                        IsUnlocked := CurrentVault.IsUnlocked\n                        LobbyPropsPlaced := NewLobbyProps\n                }\n        if:\n            APlayer := player[Agent]\n            set GameSaveData[APlayer] = game_persistent_data:\n                MakeGameSaveData<constructor>(PersistenceData)\n                LobbyVaults := SavedLobbyVaults\n                \n\n    OnCoinTimerFinished(Agent : ?agent) : void=\n        if(Ag := Agent?):\n            CoinResetTimer.Reset(Ag)\n            set CoinCollectCounter = 0\n            for(Index->Coin : AllCoins):\n                Coin.Respawn(Ag)\n                Coin.Show()\n            SavePersistenceData(Ag)\n\n    SetupRewards() : void=\n        GetAllCoins := FindCreativeObjectsWithTag(collectable_coins{})\n        for(RawCoin : GetAllCoins, Coin := collectible_object_device[RawCoin]):\n            set AllCoins += array{Coin}\n            set NumberOfCoins += 1\n            Coin.CollectedEvent.Subscribe(OnCoinCollected)\n    \n    OnCoinCollected(Agent : agent) : void =\n        set CoinCollectCounter += 1\n        CoinGranter.GrantItem(Agent)\n        SavePersistenceData(Agent)\n        if(CoinCollectCounter = NumberOfCoins):\n            CoinResetTimer.Start(Agent)\n            set CoinCollectCounter = 0\n\n    InitializeVaults(): void =\n        for(VaultIndex -> VaultData : Vaults):\n            if(VaultData.VaultType <> vault_type.VAULT_COINS):\n                if(PersistenceData.MaxRoomIndexReached + 1 >= (VaultIndex + 1) * 10):\n                    VaultData.VaultButton.Enable()\n            else:\n                VaultData.VaultConditionalButton.Enable()\n            if(VaultData.IsUnlocked?):\n                Print(\"UNlocked {VaultIndex + 1}\", ?Duration:=6.0)\n                spawn:\n                    VaultData.OpenDoor()\n                for(Index->LobbyProp: VaultData.LobbyProps):\n                    set LobbyProp.IsVaultUnlocked = VaultData.IsUnlocked\n                    if(LobbyProp.IsPlaced?):\n                        set CoinGenerationSpeed += LobbyProp.PlacingValue\n                        LobbyProp.DisableZone()\n                        \n    GetVaultsData(): []vault_data =\n        return Vaults",
    "external_calls": [
      "event_communicator",
      "event_communicator_device",
      "global_event_channel",
      "event_names",
      "event_data",
      "event_lobby_prop_zone",
      "vault_type",
      "vault_data_persistent",
      "game_persistent_data",
      "PersistenceData",
      "GameSaveData",
      "MakeGameSaveData",
      "FindCreativeObjectsWithTag",
      "collectable_coins",
      "StringToMessage",
      "MakeRotationFromYawPitchRollDegrees"
    ]
  }
] 