[
  {
    "file_name": "rush_npc_behavior.verse",
    "questions": [
      "How can I create a specialized rush NPC behavior with light flickering effects and unique chase mechanics in Verse?",
      "What is the Verse code for implementing a horror game entity called 'RUSH' that extends basic enemy behavior with visual effects?",
      "I need a script that handles a rush-type enemy with spawn VFX, tail effects, and hiding-based survival mechanics.",
      "How do I create an NPC behavior that triggers light flickering and has time-based player elimination mechanics?"
    ],
    "explanation": "This script provides a specialized rush NPC behavior for a horror game entity called 'RUSH' (also known as 'Darksight'), extending the basic_enemy_npc_behaviour class with unique mechanics focused on light manipulation and hiding-based survival. It's designed to create intense encounters where players must hide to survive.\n\n**Core Components:**\n- rush_npc_behavior: Specialized NPC behavior extending basic_enemy_npc_behaviour\n- Light flickering system integration with room events\n- Dual VFX system with spawn and tail effects\n- Hiding-based survival mechanics with time-limited exposure\n- Audio management with multiple sound layers\n- Custom elimination mechanics with environmental effects\n\n**Key Features:**\n1. **Light Flickering System**: Triggers room-wide light effects on arrival and elimination\n2. **Dual VFX System**: SpawnVFX for dramatic appearance, TailVFX for continuous effects\n3. **Hiding-Based Survival**: Players must hide within 2 seconds to avoid elimination\n4. **Time-Based Elimination**: 2-second countdown when player is seen\n5. **Environmental Integration**: Coordinates with room lighting systems\n6. **Custom Audio Layers**: Announce, idle, and seen-player audio states\n7. **Patrol Override**: Specialized patrol behavior with rush characteristics\n8. **Focus Mechanics**: Maintains visual focus on detected players\n\n**Inheritance Architecture:**\n- **Extends basic_enemy_npc_behaviour**: Inherits all base AI functionality\n- **Selective Overrides**: Customizes specific behaviors while retaining core logic\n- **Entity Specialization**: Transforms base behavior into rush-specific mechanics\n- **Data Integration**: Works with rush_data for specialized configuration\n\n**Light Flickering System:**\n- **LIGHTS_FLICKER_START**: Triggered on arrival to warn players\n- **LIGHTS_FLICKER_END**: Triggered on elimination with room-specific effects\n- **Room Integration**: Coordinates with room lighting systems\n- **Environmental Storytelling**: Visual cues for player awareness\n\n**Visual Effects Management:**\n- **SpawnVFX**: Dramatic spawn effects for entity appearance\n- **TailVFX**: Continuous trail effects during movement\n- **Coordinated Timing**: Synchronized VFX activation with behavior states\n- **Reset Functionality**: Proper cleanup of visual effects\n\n**Audio System:**\n- **ToggleAudioPlayAnnounce()**: Arrival announcement audio (NPCAudioDevices[0])\n- **ToggleAudioPlayIdle()**: Ambient idle audio during patrol (NPCAudioDevices[1])\n- **ToggleAudioPlaySeenPlayer()**: Alert audio when player detected (NPCAudioDevices[2])\n- **Layered Audio Management**: Multiple simultaneous audio states\n\n**Hiding-Based Survival Mechanics:**\n- **RushHasSeenPlayer()**: Core survival mechanic with 2-second timer\n- **Race Condition Logic**: Multiple simultaneous conditions for player survival\n- **Hide Detection**: Integrates with player hiding system\n- **Focus Maintenance**: Keeps visual attention on detected player\n- **Time Pressure**: Creates urgency for player decision-making\n\n**Custom Arrival Sequence:**\n- **AnnounceArrival()**: Extended arrival with light flickering and VFX\n- **Light Warning**: LIGHTS_FLICKER_START event for player awareness\n- **VFX Coordination**: Spawn effects followed by tail effects\n- **Audio Layering**: Announcement followed by idle audio\n- **Patrol Initiation**: Smooth transition to patrol behavior\n\n**Specialized Chase Mechanics:**\n- **No Traditional Chase**: Replaces chase state with immediate threat assessment\n- **Focus-Based Interaction**: Uses NPCFocus.MaintainFocus() for player tracking\n- **Time-Limited Exposure**: 2-second window for player to hide\n- **Multiple Escape Conditions**: Player can escape through hiding or breaking line of sight\n\n**State Machine Override:**\n- **CHASE State Replacement**: RushHasSeenPlayer() instead of traditional chase\n- **Simplified State Logic**: Focuses on patrol and immediate threat response\n- **Faster Update Rate**: 0.1-second sleep for responsive behavior\n- **Retained Base States**: DISABLED, IDLE, PATROL states from parent\n\n**Event Integration:**\n- **Room Event Channel**: Coordinates with room lighting systems\n- **Player Event Integration**: Inherited from parent class\n- **Light Control Events**: Manages environmental lighting effects\n- **Elimination Events**: Custom handling for rush-specific elimination\n\n**Rush Data Integration:**\n- **SetupNPC() Override**: Integrates with rush_data configuration\n- **Patrol Configuration**: Uses rush_data.PatrolDetails for movement\n- **Specialized Setup**: Rush-specific initialization parameters\n\n**Player Detection Logic:**\n- **Inherited Detection**: Uses parent class perception system\n- **Custom Response**: RushHasSeenPlayer() for unique interaction\n- **Multiple Exit Conditions**: Hide, lose sight, or player hiding events\n- **Race Condition Management**: Handles simultaneous player actions\n\n**Elimination Mechanics:**\n- **Custom Messages**: \"You have met Darksight\" with hiding instructions\n- **Environmental Effects**: LIGHTS_FLICKER_END with room-specific parameters\n- **Room Index Integration**: Coordinates with specific room lighting\n- **LightsDieOnEnd**: Configurable light behavior on elimination\n\n**Technical Implementation:**\n- **Race Blocks**: Sophisticated concurrent condition handling\n- **Event Awaiting**: PlayerLostEvent, PlayerStartedHidingEvent integration\n- **Focus Interface**: Advanced NPC attention management\n- **Transform Coordination**: Proper VFX positioning and movement\n\n**Performance Considerations:**\n- **Efficient State Updates**: 0.1-second update cycle\n- **Selective Audio Management**: Targeted audio state changes\n- **VFX Optimization**: Proper enable/disable cycles\n- **Memory Management**: Proper cleanup on elimination\n\n**Integration Points:**\n- **Room Lighting Systems**: Coordinates with environmental lighting\n- **Player Hiding System**: Integrates with player stealth mechanics\n- **Global Event System**: Uses both room and player event channels\n- **Audio Management**: Layered audio system coordination\n\n**Gameplay Flow:**\n1. **Arrival**: Light flickering warns players of incoming threat\n2. **Spawn VFX**: Dramatic visual appearance with audio announcement\n3. **Patrol Phase**: Moves through environment with tail VFX and idle audio\n4. **Detection**: When player spotted, maintains focus and starts countdown\n5. **Survival Window**: 2-second window for player to hide or break line of sight\n6. **Resolution**: Either player elimination or return to patrol\n7. **Elimination**: Environmental effects and room-specific light changes\n\n**Use Cases:**\n- **Stealth-Based Horror**: Emphasizes hiding over running\n- **Environmental Storytelling**: Light effects provide narrative context\n- **Time-Pressure Scenarios**: Creates urgency without extended chase\n- **Room-Specific Encounters**: Integrates with level lighting design\n\n**How It Works:**\n1. **Initialization**: SetupNPC() configures rush-specific parameters\n2. **Arrival**: AnnounceArrival() triggers light effects and VFX sequence\n3. **Patrol**: Inherits patrol behavior with custom audio and VFX\n4. **Detection**: Player perception triggers RushHasSeenPlayer()\n5. **Survival Assessment**: Race condition evaluates player hiding status\n6. **Elimination or Escape**: Either PlayerKill() or return to patrol\n7. **Environmental Cleanup**: OnEliminatedNPC() handles light restoration\n8. **System Reset**: Proper cleanup of all effects and audio",
    "code": "using { /Fortnite.com/AI }\nusing { /Verse.org/Simulation }\nusing { /Fortnite.com/Characters }\nusing { /Fortnite.com/Devices }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Verse.org/Simulation/Tags }\nusing { /Fortnite.com/Game }\nusing { Entities }\n \n# Getting started: https://www.epicgames.com/fortnite/en-US/creative/docs/uefn/Verse/onboarding-guide-to-programming-with-verse-in-unreal-editor-for-fortnite\n\n# A Verse-authored NPC Behavior that can be used within an NPC Character Definition or an NPC Spawner device's NPC Behavior Script Override.\nrush_npc_behavior := class(basic_enemy_npc_behaviour):\n    \n    @editable\n    SpawnVFX: vfx_spawner_device = vfx_spawner_device{}\n    @editable\n    TailVFX: vfx_spawner_device = vfx_spawner_device{}\n\n    var EntityName<override>: string = \"RUSH\"\n    AllKillMessages<override>: []string = array {\n        # \"I SEE YOU\",\n        # \"MY EYES HUNT YOU\",\n        # \"YOU DIDN'T HIDE\"\n        \"You have met Darksight.\\n\\nWhen the lights start flickering,\\nhide in a cupboard.\"\n    }\n\n    SetupNPC<override>(NPCData: entity_data): void =\n        SetupNPCBase(NPCData)\n        if(NPCRushData := rush_data[NPCData]):\n            set PatrolDetails = NPCRushData.PatrolDetails\n            SetupPatrolPoints()\n\n    AnnounceArrival<override>()<suspends>: void =\n        PrintNPC(\"Annoucing arrival\")\n        SpawnVFX.Disable()\n        TailVFX.Disable()\n        StopPlayingAllAudio()\n        ToggleAllAudioDevices(true)\n        MoveToSpawnTransform()\n        # play rush sfx and vfx\n        ToggleAudioPlayAnnounce(true)\n        # flicker lights\n        if:\n            NPCAgent := GetAgent[]\n        then:\n            GlobalEventChannel.RoomEventChannel.BroadcastChannel(event_names.LIGHTS_FLICKER_START, event_lights_flicker_start{}, option{NPCAgent})\n\n        Sleep(2.0)\n        if:\n            SpawnVFX.TeleportTo[SpawnVFX.GetTransform().Translation, SpawnVFX.GetTransform().Rotation]\n            TailVFX.TeleportTo[TailVFX.GetTransform().Translation, TailVFX.GetTransform().Rotation]\n        SpawnVFX.Enable()\n        \n        Sleep(1.0)\n        PrintNPC(\"Arrival done\")\n\n        ToggleNPCVisible(true)\n        SpawnVFX.Disable()\n        ToggleNPCSystems(true)\n        ToggleAudioPlayIdle(true)\n\n        TailVFX.Enable()\n        \n        StartPatroling()\n        RunNPCStateMachine()\n\n    StartNPCBehaviour<override>(): void =\n        spawn{AnnounceArrival()}\n\n        # spawn{RunNPCStateMachine()}\n\n    StartPatroling<override>(): void = \n        (super:)StartPatroling()     \n\n    ResetNPC<override>(): void =\n        (super:)ResetNPC()\n        StopPlayingAllAudio()\n        SpawnVFX.Disable()\n        TailVFX.Disable()\n\n    RunNPCStateMachine<override>()<suspends>: void =\n        if:\n            NPCAgent := GetAgent[]\n            NPCCharacter := NPCAgent.GetFortCharacter[]\n            NPCFocus := NPCCharacter.GetFocusInterface[]\n            NPCNavigatable := NPCCharacter.GetNavigatable[]\n        then:\n            loop:\n                if(not IsNPCActive[] or IsPlayerDead[]):\n                    PrintNPC(\"break state machine loop\")\n                    break\n                \n                # PrintCurrentState()\n                case (CurrentNPCBehaviourState):\n                    NPC_BEHAVIOUR_STATE.DISABLED => \n                        PrintNPC(\"Waiting for announcement to finish\")\n                    NPC_BEHAVIOUR_STATE.IDLE =>\n                        PrintNPC(\"NPC Idling\")\n                        Sleep(2.0)\n                    NPC_BEHAVIOUR_STATE.PATROL =>\n                        PrintNPC(\"GoToNextPatrolPoint\")\n                        GoToNextPatrolPoint(NPCAgent, NPCCharacter, NPCFocus, NPCNavigatable)\n                    NPC_BEHAVIOUR_STATE.CHASE =>\n                        RushHasSeenPlayer()\n                    _ => # default\n                        PrintNPC(\"How RunNPCStateMachine reached here?\")\n                        break\n                \n                Sleep(0.1)\n\n    # OnPlayerSeen<override>(Agent: agent): void =\n    #     if(not IsPlayerDead[] and NPCEntityData.ReactsToPlayer?):\n    #         PrintNPC(\"Player SEEN\")\n    #         if:\n    #             NPCAgent := GetAgent[]\n    #             NPCCharacter := NPCAgent.GetFortCharacter[]\n\n    #             PlayerCharacter := Agent.GetFortCharacter[]\n    #         then:\n    #             if(NPCCharacter.IsActive[]):\n    #                 set SeenPlayerCharacter = option{PlayerCharacter}\n    #                 StartChasing()\n\n    # OnPlayerLost<override>(Agent: agent): void =\n    #     if(not IsPlayerDead[] and NPCEntityData.ReactsToPlayer?):\n    #         PrintNPC(\"Basic: Player LOST {IsPlayerDead.ToString()}\")\n    #         set SeenPlayerCharacter = false\n    #         StopChasing()\n\n    StopChasing<override>(): void =\n        if(not IsPlayerDead[]):\n            if:\n                NPCAgent := GetAgent[]\n                NPCCharacter := NPCAgent.GetFortCharacter[]\n                NPCNavigatable := NPCCharacter.GetNavigatable[]\n            then:\n                # set IsPlayerSeen = false\n                set SeenPlayerCharacter = false\n                NPCNavigatable.StopNavigation()\n                ToggleAudioPlaySeenPlayer(false)\n                # ToggleAudioPlayIdle(true)\n                ResumePatroling()\n\n    RushHasSeenPlayer()<suspends>: void =\n        if:\n            NPCAgent := GetAgent[]\n            NPCCharacter := NPCAgent.GetFortCharacter[]\n            NPCFocus := NPCCharacter.GetFocusInterface[]\n        then:\n            PrintNPC(\"I SEE YOU...\")\n            # ToggleAudioPlayIdle(false)\n            ToggleAudioPlaySeenPlayer(true)\n            race:\n                block:\n                    if(SeenPlayerCharacter?, PlayerAgent := SeenPlayerCharacter?.GetAgent[]):\n                        PrintNPC(\"Maintaining focus...\")\n                        NPCFocus.MaintainFocus(PlayerAgent)\n                block:\n                    IsPlayerHiding := NPCEntityData.PlayerData.CheckIsHiding()\n                    if(not IsPlayerHiding?):\n                        Sleep(2.0)\n                        PrintNPC(\"still see you, BOOM\")\n                        if(SeenPlayerCharacter?, PlayerCharacter := SeenPlayerCharacter?):\n                            PlayerKill(PlayerCharacter)\n                    else:\n                        PrintNPC(\"can't see you, must've hidden :(\")\n                        StopChasing()\n                block:\n                    PlayerLostEvent.Await()\n                    PrintNPC(\"but I lost you :(\")\n                    StopChasing()\n                block:\n                    PlayerStartedHidingEvent.Await()\n                    PrintNPC(\"but you hid :(\")\n                    StopChasing()\n\n    OnEliminatedNPC<override>(EliminationResult : elimination_result): void =\n        # PrintNPC(\"OnEliminatedNPC 1\")\n        (super:)OnEliminatedNPC(EliminationResult)\n        # PrintNPC(\"OnEliminatedNPC 2: roomindex {NPCEntityData.SpawnDetails.SpawnRoomIndex}\")\n        GlobalEventChannel.RoomEventChannel.BroadcastChannel(event_names.LIGHTS_FLICKER_END, event_lights_flicker_end{\n            LightsDieOnEnd := true,\n            RoomIndex := NPCEntityData.SpawnDetails.SpawnRoomIndex\n        }, false)\n        # PrintNPC(\"OnEliminatedNPC 3\")\n\n    ToggleAudioPlayAnnounce(Play: logic): void =\n        if(RushAudioAnnounce := NPCAudioDevices[0]):\n            if(Play?):\n                RushAudioAnnounce.Play()\n            else:\n                RushAudioAnnounce.Stop()\n\n    ToggleAudioPlayIdle(Play: logic): void =\n        if(RushAudioIdle := NPCAudioDevices[1]):\n            if(Play?):\n                RushAudioIdle.Play()\n            else:\n                RushAudioIdle.Stop()\n\n    ToggleAudioPlaySeenPlayer(Play: logic): void =\n        if(RushAudioSeenPlayer := NPCAudioDevices[2]):\n            if(Play?):\n                RushAudioSeenPlayer.Play()\n            else:\n                RushAudioSeenPlayer.Stop()",
    "external_calls": [
      "basic_enemy_npc_behaviour",
      "vfx_spawner_device",
      "entity_data",
      "rush_data",
      "agent",
      "fort_character",
      "focus_interface",
      "navigatable",
      "elimination_result",
      "NPC_BEHAVIOUR_STATE",
      "event_names",
      "event_lights_flicker_start",
      "event_lights_flicker_end",
      "audio_player_device",
      "PrintNPC",
      "Sleep",
      "Print"
    ]
  }
] 