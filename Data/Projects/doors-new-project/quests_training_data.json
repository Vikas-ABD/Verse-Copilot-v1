[
  {
    "file_name": "quests.verse",
    "questions": [
      "How can I create a generic, reusable quest system in Verse?",
      "What is the Verse code for a quest marker that can be triggered by time, volumes, buttons, or events?",
      "I need a script for a quest system with states like INACTIVE, ACTIVE, and COMPLETED, using tracker and map indicator devices.",
      "How do I implement a flexible quest trigger system in Verse using enums and event subscriptions?"
    ],
    "explanation": "This script provides a generic and reusable quest management system for creating in-game objectives. It features a `quest_marker` class that encapsulates all the logic for a single quest, including its state, UI representation, and trigger conditions. The system is designed to be highly configurable and event-driven, making it a versatile tool for any gameplay designer.\n\n**Core Components:**\n- `quest_marker`: The main class representing a single quest.\n- `incident_trigger_details`: A helper class to define how a quest is triggered.\n- `incident_trigger_type`: An enum defining the various ways a quest can be initiated (e.g., after a set time, entering a volume).\n- `quest_state`: An enum to manage the lifecycle of a quest (`INACTIVE`, `ACTIVE`, `COMPLETED`).\n\n**Key Features:**\n1. **Generic and Reusable**: The `quest_marker` class is designed to be easily configured for any type of quest.\n2. **Flexible Trigger System**: Quests can be triggered by multiple conditions:\n    - `AFTER_SECONDS`: Starts after a specified delay.\n    - `ON_ENTER_VOLUME`: Starts when a player enters a `mutator_zone_device`.\n    - `ON_BUTTON_INTERACT`: Starts when a player interacts with a `button_device`.\n    - `ON_TRIGGER`: Starts when a `trigger_device` is activated.\n    - `ON_EVENT`: Placeholder for custom event-based triggers.\n3. **State Management**: Each quest tracks its own state (`INACTIVE`, `ACTIVE`, `COMPLETED`), preventing logic conflicts and redundant operations.\n4. **UI Integration**: Uses `tracker_device` to display the quest objective in the player's HUD and `map_indicator_device` to show a location on the map, with an optional pulse effect.\n5. **Event-Driven**: Uses events (`QuestCompletedEvent`, device events) for clean, decoupled communication between the quest and other game systems.\n6. **Automatic Cleanup**: The system automatically unsubscribes from trigger events once the quest is shown to prevent redundant activations.\n\n**Workflow:**\n1. **Configuration**: A `quest_marker` is configured in the editor with a `tracker_device`, a `map_indicator_device`, and `incident_trigger_details`.\n2. **Setup**: `SetupQuest(Agent)` is called to initialize the quest for a specific player. This sets the quest state to `INACTIVE` and subscribes to the configured trigger event.\n3. **Activation**: When the trigger condition is met (e.g., player enters the trigger volume), the corresponding handler (`ShowQuestOnVolumeOrButton`) calls `ShowQuest(Agent)`.\n4. **Display**: `ShowQuest` changes the state to `ACTIVE` and uses the `tracker_device` and `map_indicator_device` to make the quest visible to the player.\n5. **Completion**: The player completes the objective, which is handled by the `tracker_device`. The tracker's `CompleteEvent` fires, calling `QuestCompleted`.\n6. **Cleanup**: `QuestCompleted` updates the state to `COMPLETED`, signals its own `QuestCompletedEvent` for other systems to listen to, and deactivates the map pulse. The initial trigger subscription is also cancelled upon first activation.\n\n**Use Cases:**\n- Creating tutorial objectives for new players.\n- Building main story quests or optional side quests.\n- Implementing dynamic objectives that appear based on player actions or location.\n- Any scenario requiring a structured, trackable task for the player.",
    "code": "using { /Verse.org/Simulation }\nusing { /Fortnite.com/Devices }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\n\nquests_log := class(log_channel){}\n\nincident_trigger_details := class:\n    @editable\n    TriggerType: incident_trigger_type = incident_trigger_type.NONE\n    @editable\n    TriggerSeconds: float = 0.0\n    @editable\n    TriggerVolume: mutator_zone_device = mutator_zone_device{}\n    @editable\n    TriggerButton: button_device = button_device{}\n    @editable\n    TriggerTrigger: trigger_device = trigger_device{}\n\nquest_marker := class:\n    @editable\n    TrackerDevice: tracker_device = tracker_device{}\n    @editable\n    MapIndicatorDevice: map_indicator_device = map_indicator_device{}\n    @editable\n    ShowObjectivePulse: logic = false\n    @editable\n    ShowQuestOn: incident_trigger_details = incident_trigger_details{}\n\n    var ShowQuestSubscribedCancelable: ?cancelable = false\n    QuestCompletedEvent: event() = event(){}\n\n    var QuestState: quest_state = quest_state.INACTIVE\n    Logger : log = log{Channel := quests_log}\n\n    SetupQuest(Agent: agent): void =\n        Logger.Print(\"SetupQuest\")\n        set QuestState = quest_state.INACTIVE\n        case (ShowQuestOn.TriggerType):\n            incident_trigger_type.AFTER_SECONDS =>\n                spawn{ShowQuestAfterSeconds(Agent)}\n\n            incident_trigger_type.ON_ENTER_VOLUME =>\n                set ShowQuestSubscribedCancelable = option{ShowQuestOn.TriggerVolume.AgentEntersEvent.Subscribe(ShowQuestOnVolumeOrButton)}\n\n            incident_trigger_type.ON_BUTTON_INTERACT =>\n                set ShowQuestSubscribedCancelable = option{ShowQuestOn.TriggerButton.InteractedWithEvent.Subscribe(ShowQuestOnVolumeOrButton)}\n                \n            incident_trigger_type.ON_TRIGGER =>\n                set ShowQuestSubscribedCancelable = option{ShowQuestOn.TriggerTrigger.TriggeredEvent.Subscribe(ShowQuestOnTrigger)}\n\n            incident_trigger_type.ON_EVENT =>\n                Logger.Print(\"quest ON_EVENT\")\n\n            _ => # default\n                Logger.Print(\"Default case in quest\")\n\n        TrackerDevice.CompleteEvent.Subscribe(QuestCompleted)\n\n    ShowQuest(Agent: agent): void =\n        if(QuestState = quest_state.INACTIVE):\n            Logger.Print(\"ShowQuest\")\n            set QuestState = quest_state.ACTIVE\n            if(ShowObjectivePulse?):\n                MapIndicatorDevice.ActivateObjectivePulse(Agent)\n            else:\n                MapIndicatorDevice.DeactivateObjectivePulse(Agent)\n\n            TrackerDevice.Assign(Agent)\n\n    CompleteQuest(Agent: agent): void =\n        if(QuestState = quest_state.ACTIVE):\n            TrackerDevice.Complete(Agent)\n\n    QuestCompleted(Agent: agent): void =\n        Logger.Print(\"QuestCompleted???\")\n        if(QuestState = quest_state.ACTIVE):\n            Logger.Print(\"QuestCompleted\")\n            QuestCompletedEvent.Signal()\n            set QuestState = quest_state.COMPLETED\n            MapIndicatorDevice.DeactivateObjectivePulse(Agent)\n\n    ShowQuestAfterSeconds(Agent: agent)<suspends>: void =\n        race:\n            block:\n                Sleep(ShowQuestOn.TriggerSeconds)\n                if(QuestState = quest_state.ACTIVE):\n                    ShowQuest(Agent)\n            block:\n                QuestCompletedEvent.Await()\n\n    ShowQuestOnVolumeOrButton(Agent: agent): void =\n        ShowQuest(Agent)\n        CancelShowQuestSubscription()\n\n    ShowQuestOnTrigger(Agent: ?agent): void =\n        if(AAgent := Agent?):\n            ShowQuest(AAgent)\n\n        CancelShowQuestSubscription()\n\n    CancelShowQuestSubscription(): void =\n        if(Cancelable := ShowQuestSubscribedCancelable?):\n            Cancelable.Cancel()",
    "external_calls": [
      "log_channel",
      "mutator_zone_device",
      "button_device",
      "trigger_device",
      "tracker_device",
      "map_indicator_device",
      "cancelable",
      "event",
      "log",
      "agent",
      "incident_trigger_type",
      "quest_state",
      "Print",
      "spawn",
      "Subscribe",
      "CompleteEvent",
      "ActivateObjectivePulse",
      "DeactivateObjectivePulse",
      "Assign",
      "Complete",
      "Signal",
      "race",
      "block",
      "Sleep",
      "Await",
      "Cancel"
    ]
  }
] 