[
  {
    "file_name": "figure_npc_behavior.verse",
    "questions": [
      "How can I create a Figure NPC behavior with skilled interaction mechanics and hovering system in Verse?",
      "What is the Verse code for implementing a horror game entity called 'FIGURE' that uses skilled interaction device for player detection?",
      "I need a script that handles an NPC with patrol behavior, hiding detection, and skilled interaction challenges.",
      "How do I create an NPC behavior with hover mechanics that responds to player hiding and uses skilled interaction for elimination?"
    ],
    "explanation": "This script provides a specialized figure NPC behavior for a horror game entity called 'FIGURE', extending the basic_enemy_npc_behaviour class with unique skilled interaction mechanics, hovering system, and enhanced hiding detection. The entity patrols normally but switches to hovering mode when players hide, initiating skilled interaction challenges that determine player survival.\n\n**Core Components:**\n- figure_npc_behavior: Specialized NPC behavior extending basic_enemy_npc_behaviour\n- Skilled interaction system with success/failure event handling\n- Hovering mechanics for hiding spot detection\n- Enhanced patrol and search behavior integration\n- Transform-based positioning for hover targets\n- Event-driven skilled interaction management\n- HOVER state integration with existing state machine\n\n**Key Features:**\n1. **Skilled Interaction System**: Interactive challenge system for player elimination\n2. **Hovering Mechanics**: Navigation to hiding spots with skilled interaction initiation\n3. **Hiding Detection**: Enhanced response to player hiding with transform tracking\n4. **Patrol Integration**: Standard patrol behavior with figure-specific configurations\n5. **Event-Driven Architecture**: Success/failure event handling for skilled interactions\n6. **State Machine Extension**: HOVER state for specialized hiding response\n7. **Transform Management**: HoverTransform tracking for precise positioning\n8. **Interactive Challenges**: BeginInteraction/EndInteraction system for player tests\n\n**Inheritance Architecture:**\n- **Extends basic_enemy_npc_behaviour**: Inherits all base AI functionality including patrol, chase, and search\n- **Selective Overrides**: Customizes hiding response and state machine behavior\n- **State Machine Extension**: Adds HOVER state for skilled interaction scenarios\n- **Data Integration**: Works with figure_data for specialized patrol and search configurations\n\n**Skilled Interaction System:**\n- **skilled_interaction_device**: Core device for interactive challenges\n- **InteractionSucceededEvent**: Event fired when player successfully completes interaction\n- **InteractionFailedEvent**: Event fired when player fails interaction challenge\n- **BeginInteraction()**: Initiates skilled interaction with specific player\n- **EndInteraction()**: Terminates skilled interaction session\n- **Enable()/Disable()**: Controls skilled interaction device availability\n\n**Hovering System:**\n- **HoverTransform**: Stores target transform for hovering navigation\n- **StartHovering()**: Initiates hover mode and navigation to hiding spot\n- **DoAHover()**: Executes hovering behavior with skilled interaction initiation\n- **StopHovering()**: Terminates hover mode and returns to patrol\n- **HOVER State**: Dedicated state machine state for hovering behavior\n\n**Hiding Detection Enhancement:**\n- **OnPlayerHidden()**: Enhanced override that captures exit transform\n- **EventHideSuccessData**: Contains exit transform for hover target positioning\n- **Transform Tracking**: Stores player's hiding exit location for navigation\n- **Conditional Hovering**: Only triggers hover during CHASE or SEARCH states\n- **ReactsToPlayer Management**: Disables player reaction during hiding\n\n**State Machine Integration:**\n- **HOVER State**: New state specifically for hovering behavior\n- **SkilledInteractionActive**: Flag to prevent concurrent skilled interactions\n- **State Transitions**: Smooth transitions between hover and other states\n- **Conditional Execution**: Hover behavior only when skilled interaction inactive\n\n**Transform Management:**\n- **HoverTransform**: Persistent transform storage for hover targets\n- **ExitTransform**: Captured from hiding success event data\n- **Navigation Targeting**: Converts transform to navigation target\n- **Transform Reset**: Clears hover transform on reset and stop\n\n**Skilled Interaction Flow:**\n1. **Initialization**: Subscribe to success/failure events during Initialize()\n2. **Hover Navigation**: Navigate to hiding spot using HoverTransform\n3. **Interaction Start**: Enable device and begin interaction with player\n4. **Challenge Phase**: Player must complete skilled interaction challenge\n5. **Success Path**: \"must have been the wind\" - stop hovering, resume patrol\n6. **Failure Path**: \"I GOT YOU\" - eliminate player, reset to idle\n\n**Event System:**\n- **InteractionSucceededEvent**: Triggers SkilledInteractionSuccess()\n- **InteractionFailedEvent**: Triggers SkilledInteractionFailure()\n- **Event Subscription**: Proper event subscription during initialization\n- **Event Handling**: Dedicated functions for success/failure scenarios\n\n**Navigation System:**\n- **NavigateTo()**: Standard navigation to hover transform location\n- **MakeNavigationTarget()**: Converts transform translation to navigation target\n- **ReachRadius**: 10.0 unit reach radius for hover navigation\n- **AllowPartialPath**: Permits partial navigation paths\n- **movement_types.Walking**: Walking movement for hover approach\n\n**Figure-Specific Configuration:**\n- **figure_data**: Specialized data structure for figure configuration\n- **PatrolDetails**: Figure-specific patrol point and behavior configuration\n- **SearchDetails**: Figure-specific search behavior parameters\n- **ResumePatrolType**: CLOSEST_PATROL_POINT for efficient patrol resumption\n\n**State Machine Behavior:**\n- **DISABLED**: Waiting for announcement completion\n- **IDLE**: Standard idling with 2-second sleep\n- **PATROL**: Standard patrol point navigation\n- **CHASE**: Standard chase behavior (inherited)\n- **SEARCH**: Standard search behavior (inherited)\n- **HOVER**: Skilled interaction hovering behavior\n\n**Skilled Interaction Management:**\n- **SkilledInteractionActive**: Prevents concurrent interactions\n- **StartSkilledInteraction()**: Enables device and begins player interaction\n- **StopSkilledInteraction()**: Ends interaction and disables device\n- **Player Validation**: Ensures seen player character exists before interaction\n- **Agent Conversion**: Converts player character to agent for device interaction\n\n**Reset and Cleanup:**\n- **ResetNPC()**: Clears hover transform and skilled interaction state\n- **Transform Reset**: Returns hover transform to default state\n- **Device Cleanup**: Disables skilled interaction device\n- **Flag Reset**: Clears skilled interaction active flag\n\n**Hover Navigation Logic:**\n- **Conditional Execution**: Only executes when skilled interaction inactive\n- **Navigation Result**: Checks for successful navigation to hover location\n- **Interaction Trigger**: Starts skilled interaction upon reaching hover location\n- **Error Handling**: Graceful handling of navigation failures\n\n**Player Detection Integration:**\n- **SeenPlayerCharacter**: Tracks currently seen player for interactions\n- **Player Validation**: Ensures player exists before interaction attempts\n- **Agent Extraction**: Converts player character to agent for device operations\n- **State Coordination**: Coordinates player tracking with skilled interaction\n\n**Elimination System:**\n- **Success Response**: \"must have been the wind\" - player survives\n- **Failure Response**: \"I GOT YOU\" - player elimination\n- **DoPlayerDamage()**: Inherited damage system for player elimination\n- **State Transition**: Returns to IDLE after elimination\n\n**Patrol Behavior:**\n- **StartPatroling()**: Initiates standard patrol behavior\n- **ResumePatroling()**: Returns to patrol after hover completion\n- **PatrolDetails**: Figure-specific patrol configuration\n- **SetupPatrolPoints()**: Configures patrol points from figure data\n\n**Integration Points:**\n- **Global Event Channel**: Inherits event system integration\n- **Player Hiding System**: Enhanced integration with hiding mechanics\n- **Audio System**: Inherits audio management from base class\n- **Perception System**: Inherits player detection and perception\n\n**Technical Implementation:**\n- **Event Subscription**: Proper event subscription in Initialize()\n- **Transform Mathematics**: Position and rotation calculations\n- **State Management**: Robust state machine with hover integration\n- **Device Management**: Skilled interaction device lifecycle\n\n**Performance Considerations:**\n- **Conditional Execution**: Hover behavior only when needed\n- **Event-Based Updates**: Efficient event-driven skilled interaction\n- **State Optimization**: Minimal state machine overhead\n- **Device Lifecycle**: Proper enable/disable for skilled interaction\n\n**Gameplay Mechanics:**\n- **Risk/Reward**: Skilled interaction creates survival opportunity\n- **Tension Building**: Hover approach creates anticipation\n- **Skill-Based Survival**: Player skill determines outcome\n- **Interactive Challenge**: Engaging skilled interaction system\n\n**Error Handling:**\n- **Player Validation**: Checks for valid player before interactions\n- **Navigation Fallback**: Handles navigation failures gracefully\n- **State Consistency**: Maintains consistent state across operations\n- **Device Safety**: Safe enable/disable of skilled interaction device\n\n**Use Cases:**\n- **Hide-and-Seek Horror**: Enhanced hiding detection with challenges\n- **Skill-Based Encounters**: Interactive challenges for survival\n- **Patrol-Based AI**: Standard patrol with specialized hiding response\n- **Interactive Horror**: Player engagement through skilled interactions\n\n**Comparison with Other Behaviors:**\n- **vs. Basic Enemy**: Adds skilled interaction and hover capabilities\n- **vs. Rush/Freeze**: More interactive, less immediate elimination\n- **vs. Blink**: Stationary interaction vs. teleportation mechanics\n- **vs. Seek**: Patrol-based vs. chase-focused behavior\n\n**Development Benefits:**\n- **Configurable Interactions**: Skilled interaction device flexibility\n- **Modular Design**: Clear separation of hover and interaction logic\n- **Event-Driven**: Responsive skilled interaction system\n- **Extensible**: Easy to add new skilled interaction types\n\n**How It Works:**\n1. **Initialization**: SetupNPC() configures figure-specific patrol and search parameters\n2. **Normal Behavior**: Standard patrol, chase, and search behavior\n3. **Hiding Detection**: OnPlayerHidden() captures exit transform and triggers hover\n4. **Hover Navigation**: DoAHover() navigates to hiding spot location\n5. **Skilled Interaction**: StartSkilledInteraction() initiates player challenge\n6. **Challenge Resolution**: Player completes or fails skilled interaction\n7. **Outcome Processing**: Success resumes patrol, failure eliminates player\n\n**Behavioral Flow:**\n1. **Patrol Phase**: Standard patrol behavior until player detection\n2. **Chase/Search Phase**: Normal chase or search behavior\n3. **Hiding Trigger**: Player hides, OnPlayerHidden() captures exit location\n4. **Hover Initiation**: StartHovering() switches to HOVER state\n5. **Navigation Phase**: DoAHover() navigates to hiding spot\n6. **Interaction Phase**: StartSkilledInteraction() begins player challenge\n7. **Resolution Phase**: Success/failure determines player fate\n8. **Return Phase**: StopHovering() returns to patrol or elimination\n\n**Strategic Gameplay:**\n- **Hiding Strategy**: Players must consider skilled interaction risk\n- **Timing Awareness**: Skilled interaction timing affects survival\n- **Skill Requirement**: Player skill determines interaction success\n- **Risk Management**: Balancing hiding safety with interaction risk\n\n**Technical Advantages:**\n- **Interactive Engagement**: More engaging than simple elimination\n- **Skill-Based Outcome**: Player agency in survival\n- **Flexible Configuration**: Configurable skilled interaction parameters\n- **Event-Driven Design**: Responsive and efficient event handling\n\n**Entity Characteristics:**\n- **Entity Name**: \"FIGURE\" for identification and messaging\n- **Behavior Type**: Patrol-based with skilled interaction capabilities\n- **Elimination Method**: Skilled interaction failure\n- **Survival Method**: Skilled interaction success\n- **Movement Style**: Walking navigation to hover locations\n\n**State Machine Extensions:**\n- **HOVER Integration**: Seamless integration with existing state machine\n- **Conditional Logic**: Hover behavior only when skilled interaction inactive\n- **State Transitions**: Smooth transitions between hover and other states\n- **Loop Integration**: Proper integration with main state machine loop\n\n**Transform System:**\n- **HoverTransform Storage**: Persistent storage of hover target location\n- **ExitTransform Capture**: Captures player hiding exit location\n- **Navigation Integration**: Converts transforms to navigation targets\n- **Reset Handling**: Proper transform cleanup on reset\n\n**Skilled Interaction Lifecycle:**\n1. **Device Setup**: Initialize skilled interaction device\n2. **Event Subscription**: Subscribe to success/failure events\n3. **Activation**: Enable device when hover navigation completes\n4. **Player Binding**: Begin interaction with specific player\n5. **Challenge Phase**: Player attempts skilled interaction\n6. **Result Processing**: Handle success or failure outcome\n7. **Cleanup**: End interaction and disable device\n\n**Integration Architecture:**\n- **Base Class Extension**: Builds upon basic_enemy_npc_behaviour\n- **Data Integration**: Uses figure_data for configuration\n- **Event System**: Integrates with global event channel\n- **Device Integration**: Skilled interaction device integration\n- **State Machine**: Extends existing state machine with HOVER\n\n**Gameplay Impact:**\n- **Increased Engagement**: Interactive challenges vs. simple elimination\n- **Skill-Based Survival**: Player skill affects outcome\n- **Strategic Depth**: Adds hiding risk/reward consideration\n- **Tension Management**: Builds suspense through skilled interaction\n\n**Technical Robustness:**\n- **Error Handling**: Graceful handling of edge cases\n- **State Consistency**: Maintains consistent state across operations\n- **Memory Management**: Proper cleanup of transforms and events\n- **Performance Optimization**: Efficient event-driven design",
    "code": "using { /Fortnite.com/AI }\nusing { /Fortnite.com/Characters }\nusing { /Verse.org }\nusing { /Verse.org/Colors }\nusing { /Verse.org/Random }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Fortnite.com/Devices }\nusing { Entities }\n\n# A Verse-authored NPC Behavior that can be used within an NPC Character Definition or a NPC Spawner device's NPC Behavior Script Override.\nfigure_npc_behavior := class(basic_enemy_npc_behaviour):\n\n    @editable\n    SkilledInteraction: skilled_interaction_device = skilled_interaction_device{}\n\n    var EntityName<override>: string = \"FIGURE\"\n    var HoverTransform: transform = transform{}\n    var SkilledInteractionActive: logic = false\n\n    Initialize<override>(): void =\n        (super:)Initialize()\n        \n        SkilledInteraction.InteractionSucceededEvent.Subscribe(SkilledInteractionSuccess)\n        SkilledInteraction.InteractionFailedEvent.Subscribe(SkilledInteractionFailure)\n\n    SetupNPC<override>(NPCData: entity_data): void =\n        SetupNPCBase(NPCData)\n        if(NPCFigureData := figure_data[NPCData]):\n            set PatrolDetails = NPCFigureData.PatrolDetails\n            set SearchDetails = NPCFigureData.SearchDetails\n            SetupPatrolPoints()\n\n    StartNPCBehaviour<override>(): void =\n        MoveToSpawnTransform()\n        StartPatroling()\n        spawn{RunNPCStateMachine()}\n\n    RunNPCStateMachine<override>()<suspends>: void =\n        if:\n            NPCAgent := GetAgent[]\n            NPCCharacter := NPCAgent.GetFortCharacter[]\n            NPCFocus := NPCCharacter.GetFocusInterface[]\n            NPCNavigatable := NPCCharacter.GetNavigatable[]\n        then:\n            loop:\n                if(not NPCCharacter.IsActive[] or IsPlayerDead[]):\n                    PrintNPC(\"break state machine loop\")\n                    break\n                \n                case (CurrentNPCBehaviourState):\n                    NPC_BEHAVIOUR_STATE.DISABLED => \n                        PrintNPC(\"Waiting for announcement to finish\")\n                    NPC_BEHAVIOUR_STATE.IDLE =>\n                        PrintNPC(\"NPC Idling\")\n                        Sleep(2.0)\n                    NPC_BEHAVIOUR_STATE.PATROL =>\n                        PrintNPC(\"GoToNextPatrolPoint\")\n                        GoToNextPatrolPoint(NPCAgent, NPCCharacter, NPCFocus, NPCNavigatable)\n                    NPC_BEHAVIOUR_STATE.CHASE =>\n                        DoAChase(NPCAgent, NPCCharacter, NPCFocus, NPCNavigatable)\n                    NPC_BEHAVIOUR_STATE.SEARCH =>\n                        DoASearch(NPCAgent, NPCCharacter, NPCFocus, NPCNavigatable)\n                    NPC_BEHAVIOUR_STATE.HOVER =>\n                        if(not SkilledInteractionActive?):\n                            DoAHover(NPCAgent, NPCCharacter, NPCFocus, NPCNavigatable)\n                    # _ => # default\n                    #     PrintNPC(\"How RunNPCStateMachine reached here?\")\n                    #     break\n                \n                Sleep(0.5)\n\n    ResetNPC<override>(): void =\n        (super:)ResetNPC()\n        set HoverTransform = transform{}\n        SkilledInteraction.Disable()\n        set SkilledInteractionActive = false\n                \n    OnPlayerHidden<override>(EventHideSuccessData: event_player_hide_success): void =\n        PrintNPC(\"OnPlayerHidden\")\n        set NPCEntityData.ReactsToPlayer = false\n\n        if((CurrentNPCBehaviourState = NPC_BEHAVIOUR_STATE.CHASE or CurrentNPCBehaviourState = NPC_BEHAVIOUR_STATE.SEARCH) and SeenPlayerCharacter?):\n            PrintNPC(\"Player hidden but I GOT YOU\")\n            set HoverTransform = EventHideSuccessData.ExitTransform\n            StartHovering()\n\n    StartHovering(): void =\n        PrintNPC(\"Hover to the hiding spot\")\n        if:\n            NPCAgent := GetAgent[]\n            NPCCharacter := NPCAgent.GetFortCharacter[]\n            NPCNavigatable := NPCCharacter.GetNavigatable[]\n        then:\n            NPCNavigatable.StopNavigation()\n            SetNPCBehaviourState(NPC_BEHAVIOUR_STATE.HOVER)\n\n    DoAHover(NPCAgent: agent, NPCCharacter: fort_character, NPCFocus: focus_interface, NPCNavigatable: navigatable)<suspends>: void =\n        if(not SkilledInteractionActive?):\n            PrintNPC(\"Doing a hover\")\n            NPCNavigatable.StopNavigation()\n\n            HoverNavigationTarget := MakeNavigationTarget(HoverTransform.Translation)\n            NPCNavResult := NPCNavigatable.NavigateTo(HoverNavigationTarget, ?MovementType := movement_types.Walking, ?ReachRadius := 10.0, ?AllowPartialPath := true)\n            PrintNavigationResult(NPCNavResult, \"Hover\")\n            \n            if(NPCNavResult = navigation_result.Reached):\n                PrintNPC(\"Start hover skilled interaction\")\n                # do sleep or race on event from skilled interaction device\n                StartSkilledInteraction()\n                # race:\n                #     SkilledInteraction.InteractionSucceededEvent.Await()\n                #     SkilledInteraction.InteractionFailedEvent.Await()\n                # # Sleep(5.0)\n                # if(CurrentNPCBehaviourState = NPC_BEHAVIOUR_STATE.HOVER):\n                #     StopHovering()\n            # else:\n            #     StopHovering()\n\n    StopHovering(): void =\n        if:\n            NPCAgent := GetAgent[]\n            NPCCharacter := NPCAgent.GetFortCharacter[]\n            NPCNavigatable := NPCCharacter.GetNavigatable[]\n        then:\n            NPCNavigatable.StopNavigation()\n            StopSkilledInteraction()\n            set HoverTransform = transform{}\n            ResumePatroling()\n\n    StartSkilledInteraction(): void =\n        PrintNPC(\"StartSkilledInteraction\")\n        SkilledInteraction.Enable()\n        if:\n            PlayerCharacter := SeenPlayerCharacter?\n            PlayerAgent := PlayerCharacter.GetAgent[]\n            SkilledInteraction.BeginInteraction[PlayerAgent]\n            set SkilledInteractionActive = true\n        else:\n            StopSkilledInteraction()\n\n    StopSkilledInteraction(): void =\n        if:\n            PlayerCharacter := SeenPlayerCharacter?\n            PlayerAgent := PlayerCharacter.GetAgent[]\n            SkilledInteraction.EndInteraction[PlayerAgent]\n\n        SkilledInteraction.Disable()\n        set SkilledInteractionActive = false\n\n    SkilledInteractionSuccess(Agent: agent): void =\n        PrintNPC(\"must have been the wind\")\n        StopHovering()\n\n    SkilledInteractionFailure(Agent: agent): void =\n        PrintNPC(\"I GOT YOU\")\n        SetNPCBehaviourState(NPC_BEHAVIOUR_STATE.IDLE)\n        StopSkilledInteraction()\n        if(PlayerCharacter := SeenPlayerCharacter?, Character := Agent.GetFortCharacter[]):\n            DoPlayerDamage(Character)",
    "external_calls": [
      "basic_enemy_npc_behaviour",
      "skilled_interaction_device",
      "entity_data",
      "figure_data",
      "agent",
      "fort_character",
      "focus_interface",
      "navigatable",
      "event_player_hide_success",
      "transform",
      "NPC_BEHAVIOUR_STATE",
      "movement_types",
      "navigation_result",
      "patrol_details",
      "search_details",
      "MakeNavigationTarget",
      "PrintNPC",
      "PrintNavigationResult",
      "Sleep",
      "SetupNPCBase",
      "SetupPatrolPoints",
      "MoveToSpawnTransform",
      "StartPatroling",
      "ResumePatroling",
      "GetAgent",
      "GetFortCharacter",
      "GetFocusInterface",
      "GetNavigatable",
      "IsPlayerDead",
      "SetNPCBehaviourState",
      "GoToNextPatrolPoint",
      "DoAChase",
      "DoASearch",
      "StopNavigation",
      "NavigateTo",
      "BeginInteraction",
      "EndInteraction",
      "DoPlayerDamage"
    ]
  }
] 