[
  {
    "file_name": "game_manager.verse",
    "questions": [
      "How can I create a main game controller that manages rooms, players, and game state in Verse?",
      "What is the Verse code for managing multiple rooms with event-driven communication?",
      "I need a script that handles player spawning, room progression, and game analytics in UEFN.",
      "How do I create a game manager that coordinates between different subsystems like persistence, camera, and audio?"
    ],
    "explanation": "This script serves as the central game controller for a horror game experience, managing all major game systems and coordinating between different components.\n\n**Core Components:**\n- game_audio_devices: A struct containing audio players for different game events (headache, death sounds, light flickers)\n- drawer_button_handler: A helper class for managing interactive drawer buttons with custom functions\n- game_manager: The main class that extends event_communicator_device, serving as the central hub\n\n**Key Features:**\n1. **Room Management**: Manages arrays of level rooms and side rooms, tracking current room index and handling room transitions\n2. **Player Management**: Sets up player data, handles spawning/respawning, and manages player state across the game\n3. **Event System**: Subscribes to both room events (room entered, puzzles solved, lights flicker) and player events (start/end run, elimination, entity survival)\n4. **Device Discovery**: Uses tag-based discovery to find and organize game objects (lights, locks, hiding points, etc.) across all rooms\n5. **Analytics Integration**: Tracks player progress, first-time experiences, and various game metrics\n6. **Persistence Integration**: Works with the persistence manager to save/load game progress\n7. **Audio Management**: Coordinates audio playback for different game events\n\n**How It Works:**\n- OnBegin() initializes all systems, sets up event subscriptions, and prepares the game state\n- Room setup uses volume tracing to automatically discover and assign devices to appropriate rooms\n- Event handlers process game events and coordinate responses across different systems\n- The manager maintains game state and ensures proper coordination between all subsystems",
    "code": "using { /Fortnite.com/Devices }\nusing { /Fortnite.com/Characters }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing {UtilityClasses}\n\ngame_audio_devices := struct<concrete>:\n    @editable\n    PlayerHeadache: audio_player_device = audio_player_device{}\n    @editable\n    PlayerDeath1: audio_player_device = audio_player_device{}\n    @editable\n    PlayerDeath2: audio_player_device = audio_player_device{}\n    @editable\n    LightsFlicker: audio_player_device = audio_player_device{}\n\nagent_function_type:= type{_(:agent):void}\ndrawer_button_handler := class:\n    DrawerButton: button_device\n    InteractFunction: agent_function_type\n    OnInteract(Agent: agent): void =\n        InteractFunction(Agent)\n        DrawerButton.Disable()\n\ngame_manager := class(event_communicator_device):\n\n    @editable\n    var AllRoomsData: []level_room_data = array{}\n\n    @editable\n    var AllSideRoomsData: []side_room_data = array{}\n\n    @editable\n    ResetInput : input_trigger_device = input_trigger_device{}\n\n    @editable\n    CameraManager: camera_manager = camera_manager{}\n\n    @editable\n    AccoladesManager: accolades_manager = accolades_manager{}\n\n    @editable\n    HUDMessagePlayerDeath: hud_message_device = hud_message_device{}\n\n    @editable\n    HUDMessageJumpscare: hud_message_device = hud_message_device{}\n\n    @editable\n    TrackerJumpscare: tracker_device = tracker_device{}\n\n    @editable\n    TeamSettings: team_settings_and_inventory_device = team_settings_and_inventory_device{}\n\n    @editable\n    GameAudioDevices: game_audio_devices = game_audio_devices{}\n\n    @editable\n    StartRunVolume: mutator_zone_device = mutator_zone_device{}\n\n    @editable\n    EndRunVolume: mutator_zone_device = mutator_zone_device{}\n\n    @editable\n    ResetRunTrigger: trigger_device = trigger_device{}\n\n    @editable\n    BlockAndHidePlayer : trigger_device = trigger_device{}\n\n    @editable\n    UnBlockAndShowPlayer: trigger_device = trigger_device{}\n\n    @editable\n    PlayerSpawnerLobby: player_spawner_device = player_spawner_device{}\n\n    @editable\n    GameEnteredAnalytics: analytics_device = analytics_device{}\n\n    @editable\n    ReceptionEnterVolume: mutator_zone_device = mutator_zone_device{}\n\n    @editable\n    ReceptionEnteredAnalytics: analytics_device = analytics_device{}\n\n    @editable\n    LobbyReturnAnalytics: analytics_device = analytics_device{}\n\n    @editable\n    ChestSearchedAnalytics: analytics_device = analytics_device{}\n    \n\n    var CurrentRoomIndex : int = -1\n    var PlayerData: player_data = player_data{}\n    var PlayerAgent: ?agent = false\n    PersistenceManager: persistence_manager = persistence_manager{}\n\n    var AllEyesProp : ?generator(creative_object_interface) = false\n    var AllLockDevice : ?generator(creative_object_interface) = false\n    var AllLockConditionalButtonDevice : ?generator(creative_object_interface) = false\n    var AllLockIcons : ?generator(creative_object_interface) = false\n    var AllLights : ?generator(creative_object_interface) = false\n    var AllEnterVolumes : ?generator(creative_object_interface) = false\n    var AllHidingPoints : ?generator(creative_object_interface) = false\n    var AllExitPoints : ?generator(creative_object_interface) = false\n    var AllHidingButtons : ?generator(creative_object_interface) = false\n    var AllChaseManagers : ?generator(creative_object_interface) = false\n    var AllEnterAnalyticsDevices : ?generator(creative_object_interface) = false\n    var AllRoomDeathAnalyticsDevices : ?generator(creative_object_interface) = false\n    var AllDrawerButtons : ?generator(creative_object_interface) = false\n\n    OnBegin<override>()<suspends> : void=\n        # Finding Global Event Channel\n        Setup()\n        # Setting Up PlayerReference, Make sure to add player_spawner tag on each player spawner in the island\n        SetupPlayer()\n        # Setting Up Rooms, Make sure to add all the required tag for volume tracing\n        SetupRooms()\n        SetupSideRooms()\n\n        SetupDrawerButtons()\n\n        SetupGameEnteredAnalytics()\n\n        SubscribeToRoomEvent(NewRoomEvent, \"GM\")\n        SubscribeToPlayerEvent(NewPlayerEvent, \"GM\")\n\n        StartRunVolume.AgentEntersEvent.Subscribe(StartRunElevatorEntered)\n        EndRunVolume.AgentEntersEvent.Subscribe(EndRunElevatorEntered)\n        ResetInput.PressedEvent.Subscribe(EndRunElevatorEntered)\n        BlockAndHidePlayer.TriggeredEvent.Subscribe(HideAndBlockPlayer)\n        UnBlockAndShowPlayer.TriggeredEvent.Subscribe(ShowAndUnblockPlayer)\n\n        PersistenceManager.InitializeGameSaveData(PlayerReference)\n\n    Setup<override>() : void=\n        (super:)Setup()\n        set AllLights = option{FindCreativeObjectsWithTag(customizable_light{})}\n        set AllEnterVolumes = option{FindCreativeObjectsWithTag(room_enter_volume{})}\n        set AllEyesProp = option{FindCreativeObjectsWithTag(eyes_tag{})}\n        set AllLockDevice = option{FindCreativeObjectsWithTag(door_lock_device{})}\n        set AllLockConditionalButtonDevice = option{FindCreativeObjectsWithTag(door_lock_conditional_button_device{})}\n        set AllLockIcons = option{FindCreativeObjectsWithTag(door_lock_icon{})}\n        set AllHidingPoints = option{FindCreativeObjectsWithTag(hiding_point{})}\n        set AllExitPoints = option{FindCreativeObjectsWithTag(exit_point{})}\n        set AllHidingButtons = option{FindCreativeObjectsWithTag(hiding_button{})}\n        set AllChaseManagers = option{FindCreativeObjectsWithTag(entity_chase_manager_seek{})}\n        set AllEnterAnalyticsDevices = option{FindCreativeObjectsWithTag(room_enter_analytics_device{})}\n        set AllRoomDeathAnalyticsDevices = option{FindCreativeObjectsWithTag(room_death_analytics_device{})}\n        set AllDrawerButtons = option{FindCreativeObjectsWithTag(drawer_button{})}\n        \n    NewRoomEvent(EventName: event_names, Data: event_data, Agent: ?agent): void =\n        case (EventName):\n            event_names.NEW_ROOM_ENTERED =>\n                if(EventData := event_player_entered_room[Data]):\n                    RoomEntered(EventData)\n            event_names.NEW_SIDE_ROOM_ENTERED =>\n                if(EventData := event_player_entered_room[Data]):\n                    SideRoomEntered(EventData)\n            event_names.PLAYER_SOLVED_PUZZLE =>\n                Print(\"Puzzle : {CurrentRoomIndex}\", ?Duration:=6.0)\n                    if:\n                        CurrentRoomData := AllRoomsData[CurrentRoomIndex]\n                    then:\n                        Print(\"Current Room : {CurrentRoomIndex}\", ?Duration:=6.0)\n                        if(PuzzleData := event_puzzle_solved[Data]):\n                            Print(\"PLAYER_SOLVED_PUZZLE\", ?Duration:=6.0)\n                            CurrentRoomData.UnlockDoor()\n\n            event_names.LIGHTS_FLICKER_START =>\n                if(EventData:= event_lights_flicker_start[Data]): \n                    if:\n                        CurrentRoomData := AllRoomsData[CurrentRoomIndex]\n                    then:\n                        spawn{CurrentRoomData.FlickerLights(EventData)}\n            event_names.LIGHTS_FLICKER_END =>\n                Print(\"event_names.LIGHTS_FLICKER_END\")\n                if(EventData:= event_lights_flicker_end[Data]):\n                    Print(\"event_names.LIGHTS_FLICKER_END: {EventData.RoomIndex}\") \n                    if:\n                        SomeRoomData := AllRoomsData[EventData.RoomIndex]\n                    then:\n                        SomeRoomData.ToggleAllLights(logic{not EventData.LightsDieOnEnd?})\n            _ =>\n                return\n    \n    NewPlayerEvent(EventName: event_names, Data: event_data, Agent: ?agent): void =\n        case (EventName):\n            event_names.PLAYER_START_RUN =>\n                StartRun()\n            event_names.PLAYER_END_RUN =>\n                EndRun()\n            event_names.PLAYER_ELIMINATED =>\n                if(CurrentRoomData := AllRoomsData[CurrentRoomIndex]):\n                    CurrentRoomData.RoomDeath()\n            event_names.PLAYER_SURVIVED_ENTITY =>\n                if(EventData := event_player_survived_entity[Data]):\n                    PlayerSurvivedEntity(EventData)\n            _ =>\n                return\n\n    RoomEntered(EventData: event_player_entered_room): void =\n        set CurrentRoomIndex = EventData.RoomIndex\n        if:\n            CurrentRoomData := AllRoomsData[CurrentRoomIndex]\n            PreviousRoomData := AllRoomsData[CurrentRoomIndex - 1]\n        then:\n            PreviousRoomData.RoomExited()\n            Print(\"sending entity data from room {CurrentRoomIndex - 1} to room {CurrentRoomIndex}\")\n            CurrentRoomData.SetupRoomTransferDetails(last_entity_details{\n                LastEntitySpawnedType := PreviousRoomData.EntitySpawned.EntityType,\n                LastEntitySpawnedInRoomIndex := PreviousRoomData.RoomIndex\n            })\n\n            IsNewRoom := PlayerData.NewRoomEntered(CurrentRoomIndex)\n            if(IsNewRoom?, ActualPlayer := PlayerReference?):\n                spawn{AccoladesManager.SpawnRoomEnterAccolade(ActualPlayer, CurrentRoomIndex)}\n\n            PersistenceManager.PrintGameSaveData()\n            if(SaveData := PersistenceManager.GetGameSaveData[], SaveData.MaxRoomIndexReached < CurrentRoomIndex):\n                CurrentRoomData.SendAnalyticsRoomEntered()                \n                PersistenceManager.UpdateSaveMaxRoom(CurrentRoomIndex)\n\n    SideRoomEntered(EventData: event_player_entered_room): void =\n        SideRoomIndex := EventData.RoomIndex\n        Print(\"Side room entered {SideRoomIndex}\")\n        if:\n            CurrentSideRoomData := AllSideRoomsData[SideRoomIndex]\n        then:\n            PersistenceManager.PrintGameSaveData()\n            if(SaveData := PersistenceManager.GetGameSaveData[]):\n                if(IsSideRoomChecked := SaveData.SideRoomChecked[SideRoomIndex]):\n                    Print(\"Side room {SideRoomIndex} already entered\")\n                else:\n                    Print(\"Side room {SideRoomIndex} new!\")\n                    CurrentSideRoomData.SendAnalyticsSideRoomEntered()\n                    PersistenceManager.UpdateSaveSideRoom(SideRoomIndex)\n            \n\n    SetupPlayer(): void =\n        CurrentPlaySpace := GetPlayspace()\n        AllPlayers := CurrentPlaySpace.GetPlayers()\n\n        for(APlayer : AllPlayers):\n            set PlayerData = MakePlayerData(option{APlayer}, 0)\n            PlayerData.SetupPlayer(\n                GlobalEventChannel,\n                CameraManager,\n                GameAudioDevices,\n                HUDMessagePlayerDeath,\n                HUDMessageJumpscare,\n                TrackerJumpscare\n            )\n            set PlayerReference = option{APlayer}\n\n        TeamSettings.TeamMemberSpawnedEvent.Subscribe(OnPlayerSpawned)\n    \n    HideAndBlockPlayer(Agent : ?agent) : void=\n        if:\n            FCharacter := PlayerReference?.GetFortCharacter[]\n        then:\n            FCharacter.Hide()\n            FCharacter.PutInStasis(stasis_args{})\n\n    ShowAndUnblockPlayer(Agent : ?agent) : void=\n        if:\n            FCharacter := PlayerReference?.GetFortCharacter[]\n        then:\n            FCharacter.Show()\n            FCharacter.ReleaseFromStasis()\n\n\n    SetupRooms() : void=\n        if:\n            Eyes := AllEyesProp?\n            Lights := AllLights?\n            EnterVolumes := AllEnterVolumes?\n            LockDevices := AllLockDevice?\n            LockConditionalButtonDevices := AllLockConditionalButtonDevice?\n            LockIcons := AllLockIcons?\n            HidingPoints := AllHidingPoints?\n            ExitPoints := AllExitPoints?\n            HidingButtons := AllHidingButtons?\n            ChaseManagers := AllChaseManagers?\n            EnterAnalyticsDevices := AllEnterAnalyticsDevices?\n            RoomDeathAnalyticsDevices := AllRoomDeathAnalyticsDevices?\n        then:\n            for(RoomIndex -> RoomData: AllRoomsData):\n                RoomTracingVolume := MakeTracingVolume(RoomData.TracerVolumeProp)\n                set RoomData.TracerVolume = RoomTracingVolume\n\n                FindRoomEyes := RoomData.TracerVolume.FindAllPropUnderTheVolume(Eyes)\n                FindRoomHidingPoints := RoomData.TracerVolume.FindAllPropUnderTheVolume(HidingPoints)\n                FindRoomExitPoints := RoomData.TracerVolume.FindAllPropUnderTheVolume(ExitPoints)\n                set RoomData.EyesSpawnTransforms = FindRoomEyes\n\n                FindRoomLights := RoomData.TracerVolume.FindAnythingUnderTheVolume(Lights)\n                FindRoomEnterVolumes := RoomData.TracerVolume.FindAnythingUnderTheVolume(EnterVolumes)\n                FindRoomLockDevice := RoomData.TracerVolume.FindAnythingUnderTheVolume(LockDevices)\n                FindRoomLockConditionalButtonDevice := RoomData.TracerVolume.FindAnythingUnderTheVolume(LockConditionalButtonDevices)\n                FindRoomLockIcon := RoomData.TracerVolume.FindAnythingUnderTheVolume(LockIcons)\n                FindRoomHidingButtons := RoomData.TracerVolume.FindAnythingUnderTheVolume(HidingButtons)\n                FindChaseManagers := RoomData.TracerVolume.FindAnythingUnderTheVolume(ChaseManagers)\n                FindEnterAnalyticsDevices := RoomData.TracerVolume.FindAnythingUnderTheVolume(EnterAnalyticsDevices)\n                FindRoomDeathAnalyticsDevices := RoomData.TracerVolume.FindAnythingUnderTheVolume(RoomDeathAnalyticsDevices)\n\n                Print(\"ROOM {RoomIndex}\\nLights : {FindRoomLights.Length}\\nVolumes : {FindRoomEnterVolumes.Length}\\nLockDevices : {FindRoomLockDevice.Length}\\nLockIcons : {FindRoomLockIcon.Length}\\nEyeProps : {FindRoomEyes.Length}\\nChaseManagers : {FindChaseManagers.Length}\", ?Duration:=6.0)\n\n                RoomData.AddToDeviceList(FindRoomLights, devices_type.LIGHTS)\n                RoomData.AddToDeviceList(FindRoomEnterVolumes, devices_type.ENTER_VOLUME)\n                RoomData.AddToDeviceList(FindRoomLockDevice, devices_type.LOCK)\n                RoomData.AddToDeviceList(FindRoomLockConditionalButtonDevice, devices_type.LOCK_CONDITIONAL_BUTTON_DEVICE)\n                RoomData.AddToDeviceList(FindRoomLockIcon, devices_type.LOCK_ICON)\n                RoomData.AddToDeviceList(FindChaseManagers, devices_type.SEEK_CHASE_MANAGER)\n                RoomData.AddToDeviceList(FindEnterAnalyticsDevices, devices_type.ENTER_ANALYTICS_DEVICE)\n                RoomData.AddToDeviceList(FindRoomDeathAnalyticsDevices, devices_type.ROOM_DEATH_ANALYTICS_DEVICE)\n\n                RoomData.MakeCupboard(FindRoomHidingButtons, FindRoomHidingPoints, FindRoomExitPoints)\n                RoomData.InitializeRoom(GlobalEventChannel, RoomIndex)\n                RoomData.AddDirectDevices(GameAudioDevices)\n\n    SetupSideRooms(): void =\n        for(SideRoomIndex -> SideRoomData: AllSideRoomsData):\n            SideRoomData.InitializeSideRoom(GlobalEventChannel, SideRoomIndex)\n            \n\n    TriggerResetRun(): void =\n        ResetRunTrigger.Trigger()\n\n    DummyStartRun(Agent: agent): void =\n        StartRunElevatorEntered(Agent)\n\n    StartRunElevatorEntered(Agent: agent): void =\n        StartRunVolume.Disable()\n        GlobalEventChannel.PlayerEventChannel.BroadcastChannel(event_names.PLAYER_START_RUN, event_data{}, option{Agent})\n\n    StartRun() : void=\n        Print(\"Starting run...\")\n        EndRunVolume.Enable()\n        TriggerResetRun()\n        GlobalEventChannel.PlayerEventChannel.BroadcastChannel(event_names.PLAYER_DATA_READY, event_player_data_ready{ NewPlayerData := PlayerData }, PlayerReference)\n        for(RoomIndex -> RoomData: AllRoomsData):\n            RoomData.RoomStartRun()\n        for(SideRoomIndex -> SideRoomData: AllSideRoomsData):\n            SideRoomData.SideRoomStartRun()\n\n        if:\n            DrawerButtons := AllDrawerButtons?\n        then:\n            for(RawDrawerButton : DrawerButtons, DrawerButton := button_device[RawDrawerButton]):\n                DrawerButton.Enable()\n\n    EndRunElevatorEntered(Agent: agent): void =\n        EndRunVolume.Disable()\n        if(SaveData := PersistenceManager.GetGameSaveData[], not SaveData.FirstRunCompleted?):\n            LobbyReturnAnalytics.Submit(Agent)\n            PersistenceManager.UpdateFirstRunCompleted()\n\n        GlobalEventChannel.PlayerEventChannel.BroadcastChannel(event_names.PLAYER_END_RUN, event_data{}, option{Agent})\n\n    EndRun(): void =\n        Print(\"Ending run. Returning back to lobby...\")\n        if(ActualPlayer := PlayerReference?):\n            AccoladesManager.FullRunComplete.Award(ActualPlayer)\n        StartRunVolume.Enable()\n                \n    OnPlayerSpawned(Agent: agent): void =\n        set PlayerAgent = option{Agent}\n        GlobalEventChannel.PlayerEventChannel.BroadcastChannel(event_names.PLAYER_SPAWNED, event_data{}, option{Agent})\n\n    GetPlayerData<public>(): player_data = \n        return PlayerData\n    \n    PlayerSurvivedEntity(EventData: event_player_survived_entity): void =\n        if(ActualPlayer := PlayerReference?):\n            case (EventData.EntityType):\n                entity_type.RUSH =>\n                    AccoladesManager.EscapeRush.Award(ActualPlayer)\n                entity_type.FREEZE =>\n                    AccoladesManager.EscapeFreeze.Award(ActualPlayer)\n                entity_type.SEEK =>\n                    AccoladesManager.EscapeSeek.Award(ActualPlayer)\n                _ => # default\n                    Print(\"Default case body\")\n\n\n    SetupDrawerButtons(): void =\n        if:\n            DrawerButtons := AllDrawerButtons?\n        then:\n            for(RawDrawerButton : DrawerButtons, DrawerButton := button_device[RawDrawerButton]):\n                DrawerButtonHandler := drawer_button_handler {\n                    DrawerButton := DrawerButton,\n                    InteractFunction := DrawerSearched\n                }\n                DrawerButton.InteractedWithEvent.Subscribe(DrawerButtonHandler.OnInteract)\n\n    DrawerSearched(Agent: agent): void =\n        ChestSearchedAnalytics.Submit(Agent)\n\n    SetupGameEnteredAnalytics(): void =\n        PlayerSpawnerLobby.SpawnedEvent.Subscribe(PlayerSpawnedInLobby)\n        ReceptionEnterVolume.AgentEntersEvent.Subscribe(PlayerEnteredReception)\n\n    PlayerSpawnedInLobby(Agent: agent): void =\n        if(SaveData := PersistenceManager.GetGameSaveData[], not SaveData.FirstTimeGameEntered?):\n            GameEnteredAnalytics.Submit(Agent)\n            PersistenceManager.UpdateSaveFirstTimeGameEntered()\n\n    PlayerEnteredReception(Agent: agent): void =\n        if(SaveData := PersistenceManager.GetGameSaveData[], not SaveData.ReceptionEntered?):\n            ReceptionEnteredAnalytics.Submit(Agent)\n            PersistenceManager.UpdateSaveReceptionEntered()",
    "external_calls": [
      "event_communicator_device",
      "level_room_data",
      "side_room_data",
      "player_data",
      "persistence_manager",
      "camera_manager",
      "accolades_manager",
      "MakePlayerData",
      "MakeTracingVolume"
    ]
  }
] 