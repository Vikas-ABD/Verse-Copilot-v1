[
  {
    "file_name": "seek_npc_behavior.verse",
    "questions": [
      "How can I create a Seek NPC behavior with chase-only mechanics and chase manager integration in Verse?",
      "What is the Verse code for implementing a horror game entity called 'SEEK' that uses chase manager for cinematic sequences?",
      "I need a script that handles an NPC with simplified chase-only behavior without patrol or search states.",
      "How do I create an NPC behavior that immediately starts chasing and integrates with chase manager cinematics?"
    ],
    "explanation": "This script provides a specialized seek NPC behavior for a horror game entity called 'SEEK' (also known as 'Hunter'), extending the basic_enemy_npc_behaviour class with a simplified chase-only approach and deep integration with the chase manager system for cinematic sequences. Unlike other NPCs that have patrol or search behaviors, SEEK immediately starts chasing and relies on the chase manager for all visual effects, cinematics, and player elimination.\n\n**Core Components:**\n- seek_npc_behavior: Specialized NPC behavior extending basic_enemy_npc_behaviour\n- Chase-only state machine with minimal state handling\n- Deep integration with chase_manager for cinematics and VFX\n- Simplified behavior focused purely on chasing mechanics\n- Custom kill messages with competitive gaming references\n- Player character setup and tracking system\n- Minimal override approach for maximum performance\n\n**Key Features:**\n1. **Chase-Only Behavior**: Exclusively focused on chasing without patrol or search\n2. **Chase Manager Integration**: Deep integration with cinematic chase sequences\n3. **Simplified State Machine**: Minimal state handling for performance\n4. **Custom Kill Messages**: Competitive gaming-themed elimination messages\n5. **Player Setup**: Direct player character assignment during setup\n6. **Minimal Overrides**: Only overrides necessary methods for efficiency\n7. **Performance Optimized**: Streamlined for high-performance chase scenarios\n8. **Event Handling**: Disabled player seen/lost events for chase manager control\n\n**Inheritance Architecture:**\n- **Extends basic_enemy_npc_behaviour**: Inherits base AI functionality but simplifies implementation\n- **Selective Overrides**: Only overrides essential methods, relies on base class for most functionality\n- **Simplified State Machine**: Removes idle, patrol, and search states for pure chase focus\n- **Chase Manager Dependency**: Offloads cinematics and VFX to external chase manager\n\n**Chase-Only Design:**\n- **Immediate Chase Start**: StartNPCBehaviour() immediately calls StartChasing()\n- **Single State Focus**: RunNPCStateMachine() only handles CHASE state\n- **No Patrol/Search**: Eliminates patrol and search states entirely\n- **Streamlined Logic**: Minimal state transitions for maximum performance\n- **Chase Manager Control**: Delegates complex behavior to chase manager\n\n**State Machine Simplification:**\n- **CHASE State Only**: Only processes NPC_BEHAVIOUR_STATE.CHASE\n- **Default Case Handling**: Breaks state machine loop on unexpected states\n- **Minimal Sleep**: 0.5 second sleep for performance optimization\n- **Error Handling**: Graceful handling of unexpected state machine states\n- **Loop Control**: Proper loop termination on NPC death or inactivity\n\n**Player Character Setup:**\n- **Direct Assignment**: SetupNPC() directly assigns player character\n- **Player Data Integration**: Uses NPCEntityData.PlayerData for player access\n- **Character Extraction**: Extracts FortCharacter from player for tracking\n- **Option Wrapping**: Safely wraps player character in option type\n- **Setup Inheritance**: Calls super SetupNPC() for base functionality\n\n**Event Handling Overrides:**\n- **OnPlayerSeen()**: Empty override - chase manager handles player detection\n- **OnPlayerLost()**: Empty override - chase manager handles player loss\n- **OnPlayerHidden()**: Empty override - chase manager handles hiding\n- **Event Delegation**: All events delegated to chase manager for centralized control\n\n**Chase Manager Integration:**\n- **seek_data**: Specialized data structure containing chase manager reference\n- **StartChase()**: Chase manager initiates cinematic chase sequence\n- **Cinematic Control**: Chase manager handles all visual effects and cinematics\n- **Player Elimination**: Chase manager handles player death and messaging\n- **VFX Management**: Chase manager controls spawn VFX, background VFX, and audio\n\n**Kill Messages:**\n- **\"TOO SLOW\"**: Speed-focused competitive gaming reference\n- **\"EYES AHEAD\"**: Attention and focus gaming reference\n- **\"SKILL ISSUE\"**: Popular competitive gaming phrase\n- **Gaming Culture**: Messages reflect competitive gaming terminology\n- **AllKillMessages Override**: Replaces base class kill messages\n\n**Performance Optimizations:**\n- **Minimal State Handling**: Only processes necessary states\n- **Reduced Overrides**: Minimal method overrides for efficiency\n- **Streamlined Logic**: Simplified decision trees\n- **Chase Manager Delegation**: Offloads complex operations to specialized manager\n- **Efficient Sleep**: Optimized sleep intervals for responsiveness\n\n**Chase Manager Features:**\n- **Cinematic Sequences**: Full cinematic chase sequences with camera work\n- **VFX Coordination**: Spawn VFX, background VFX, and particle effects\n- **Audio Management**: Chase music, end music, and sound effects\n- **Camera Control**: Dynamic camera movements and transitions\n- **Player Elimination**: Handles player death with cinematic flair\n- **Room Analytics**: Tracks player progress through chase rooms\n\n**Behavioral Flow:**\n1. **Setup Phase**: SetupNPC() assigns player character and calls base setup\n2. **Start Phase**: StartNPCBehaviour() moves to spawn and starts chasing\n3. **State Machine**: RunNPCStateMachine() exclusively handles CHASE state\n4. **Chase Execution**: DoAChase() inherited from base class handles pursuit\n5. **Chase Manager Control**: External chase manager handles cinematics and elimination\n\n**Integration Architecture:**\n- **entity_npc_seek**: Specialized entity class for SEEK behavior\n- **seek_data**: Data structure containing chase manager reference\n- **entity_manager_device**: Manages SEEK entity lifecycle\n- **StartSeek()/StopSeek()**: Entity manager controls SEEK activation\n- **Chase Manager Coordination**: Seamless integration with chase manager\n\n**Comparison with Other Behaviors:**\n- **vs. Basic Enemy**: Simplified to chase-only behavior\n- **vs. Rush/Freeze**: No special mechanics, pure chase focus\n- **vs. Figure/Blink**: No patrol or interaction systems\n- **vs. Other NPCs**: Most streamlined and performance-optimized\n\n**Entity Characteristics:**\n- **Entity Name**: \"SEEK\" for identification and messaging\n- **Behavior Type**: Pure chase behavior without additional mechanics\n- **Elimination Method**: Chase manager handles player elimination\n- **Visual Style**: Cinematic chase sequences with VFX\n- **Audio Profile**: Dynamic chase music and sound effects\n\n**Chase Manager States:**\n- **CHASE_STOPPED**: Chase inactive, ready to start\n- **CHASE_STARTED**: Active chase with cinematics\n- **CHASE_STOPPING**: Chase ending with cleanup\n- **State Coordination**: Synchronized with NPC behavior state\n\n**Cinematic Features:**\n- **Start Cutscene**: Cinematic introduction with camera work\n- **Spawn VFX**: Visual effects for entity appearance\n- **Background VFX**: Continuous visual effects during chase\n- **End Cutscene**: Cinematic conclusion for survival or death\n- **Camera Transitions**: Smooth camera movements and transitions\n\n**Player Elimination System:**\n- **Distance-Based**: Elimination triggered by proximity\n- **Cinematic Death**: Full cinematic sequence for player death\n- **Death Analytics**: Tracks player death locations and statistics\n- **Kill Messages**: Displays competitive gaming-themed messages\n- **Cutscene Views**: Specialized camera angles for death scenes\n\n**Room Analytics:**\n- **Chase Rooms**: Tracks player progress through chase sequence\n- **Death Analytics**: Records player elimination statistics\n- **Room Progression**: Monitors player advancement through rooms\n- **Performance Metrics**: Analyzes chase sequence effectiveness\n\n**Audio System:**\n- **Chase Music**: Dynamic music during chase sequences\n- **End Music**: Specialized music for chase conclusion\n- **Sound Effects**: Audio cues for various chase events\n- **Audio Transitions**: Smooth audio transitions between states\n\n**VFX System:**\n- **Spawn VFX**: Visual effects for entity appearance\n- **Background VFX**: Continuous atmospheric effects\n- **Particle Systems**: Dynamic particle effects during chase\n- **Effect Coordination**: Synchronized VFX with chase progression\n\n**Navigation System:**\n- **Chase Navigation**: Inherited from basic_enemy_npc_behaviour\n- **Player Pursuit**: Standard navigation to player location\n- **Movement Types**: Running movement for chase sequences\n- **Reach Radius**: Standard 10.0 unit reach for player contact\n\n**Error Handling:**\n- **State Machine Safety**: Graceful handling of unexpected states\n- **Player Validation**: Checks for valid player character\n- **NPC Activity**: Monitors NPC active state\n- **Loop Control**: Proper loop termination conditions\n\n**Memory Management:**\n- **Minimal State Storage**: Reduced memory footprint\n- **Efficient Updates**: Optimized update cycles\n- **Resource Cleanup**: Proper cleanup on NPC termination\n- **Performance Monitoring**: Efficient resource utilization\n\n**Development Benefits:**\n- **Simplified Implementation**: Easier to understand and maintain\n- **Performance Focused**: Optimized for high-performance scenarios\n- **Modular Design**: Clear separation of concerns with chase manager\n- **Extensible**: Easy to add new chase manager features\n\n**Use Cases:**\n- **Pure Chase Scenarios**: Situations requiring immediate pursuit\n- **Cinematic Sequences**: Chase scenes with full cinematics\n- **Performance-Critical**: High-performance chase requirements\n- **Competitive Gaming**: Fast-paced competitive horror scenarios\n\n**Technical Advantages:**\n- **Minimal Overhead**: Reduced computational overhead\n- **Streamlined Logic**: Simplified decision trees\n- **Specialized Purpose**: Focused on single behavior type\n- **Manager Integration**: Leverages specialized chase manager\n\n**Gameplay Impact:**\n- **Immediate Threat**: Creates immediate sense of danger\n- **Cinematic Experience**: Provides movie-like chase sequences\n- **Competitive Feel**: Gaming-focused elimination messages\n- **High Intensity**: Maintains high tension throughout chase\n\n**Integration Points:**\n- **Entity Manager**: Managed by entity_manager_device\n- **Global Events**: Integrates with global event system\n- **Player Data**: Accesses player data for character tracking\n- **Chase Manager**: Deep integration with chase management system\n\n**State Machine Efficiency:**\n- **Single State Focus**: Only processes CHASE state\n- **Minimal Branching**: Reduced conditional logic\n- **Fast Execution**: Optimized for quick state processing\n- **Error Recovery**: Graceful handling of edge cases\n\n**Player Interaction:**\n- **Immediate Engagement**: No waiting or patrol periods\n- **Continuous Pressure**: Maintains constant chase pressure\n- **Cinematic Presentation**: Enhanced visual presentation\n- **Competitive Messaging**: Gaming-focused feedback\n\n**Technical Implementation:**\n- **Inheritance Optimization**: Minimal override strategy\n- **Event Delegation**: Delegates events to chase manager\n- **State Simplification**: Removes unnecessary state complexity\n- **Performance Tuning**: Optimized for high-performance scenarios\n\n**Behavioral Characteristics:**\n- **Relentless Pursuit**: Continuous chasing behavior\n- **No Distractions**: Focused purely on player pursuit\n- **Cinematic Integration**: Seamless integration with visual effects\n- **Competitive Edge**: Gaming-focused personality\n\n**How It Works:**\n1. **Entity Setup**: entity_manager_device creates SEEK entity with seek_data\n2. **NPC Initialization**: SetupNPC() assigns player character and calls base setup\n3. **Behavior Start**: StartNPCBehaviour() moves to spawn location and starts chasing\n4. **State Machine**: RunNPCStateMachine() exclusively processes CHASE state\n5. **Chase Execution**: DoAChase() inherited from base class handles player pursuit\n6. **Chase Manager**: External chase manager handles cinematics, VFX, and elimination\n7. **Player Elimination**: Chase manager detects proximity and eliminates player\n8. **Cleanup**: Entity manager handles NPC cleanup and reset\n\n**Strategic Design:**\n- **Separation of Concerns**: NPC handles basic chase, manager handles cinematics\n- **Performance Focus**: Optimized for high-performance chase scenarios\n- **Modular Architecture**: Clear boundaries between components\n- **Extensibility**: Easy to enhance chase manager without NPC changes\n\n**Competitive Gaming Elements:**\n- **Kill Messages**: Reflects competitive gaming terminology\n- **Fast-Paced**: Optimized for quick, intense gameplay\n- **Skill-Based**: Rewards player movement and decision-making\n- **Performance Metrics**: Tracks player performance through analytics\n\n**Entity Lifecycle:**\n1. **Creation**: entity_manager_device creates SEEK entity\n2. **Setup**: SetupNPC() configures player tracking\n3. **Activation**: StartNPCBehaviour() initiates chase\n4. **Execution**: State machine handles chase behavior\n5. **Termination**: StopNPC() or player elimination ends lifecycle\n6. **Cleanup**: Resources cleaned up and entity destroyed\n\n**Chase Manager Coordination:**\n- **Synchronized States**: NPC state synchronized with chase manager\n- **Event Coordination**: Events handled by chase manager\n- **Resource Sharing**: Shared resources between NPC and manager\n- **Lifecycle Management**: Coordinated lifecycle between components\n\n**Performance Characteristics:**\n- **Low Latency**: Minimal processing delays\n- **High Throughput**: Efficient state processing\n- **Resource Efficient**: Minimal memory and CPU usage\n- **Scalable**: Performs well in complex scenarios\n\n**Behavioral Patterns:**\n- **Immediate Response**: No delay in chase initiation\n- **Continuous Pursuit**: Maintains constant player pressure\n- **Cinematic Integration**: Seamless visual presentation\n- **Competitive Focus**: Gaming-oriented personality and messaging",
    "code": "using { /Fortnite.com/AI }\nusing { /Verse.org/Simulation }\nusing { /Fortnite.com/Characters }\nusing { /Fortnite.com/Devices }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Verse.org/Simulation/Tags }\nusing { Entities }\n \n# Getting started: https://www.epicgames.com/fortnite/en-US/creative/docs/uefn/Verse/onboarding-guide-to-programming-with-verse-in-unreal-editor-for-fortnite\n\n# A Verse-authored NPC Behavior that can be used within an NPC Character Definition or an NPC Spawner device's NPC Behavior Script Override.\nseek_npc_behavior := class(basic_enemy_npc_behaviour):\n\n    var EntityName<override>: string = \"SEEK\"\n    AllKillMessages<override>: []string = array {\n        \"TOO SLOW\",\n        \"EYES AHEAD\",\n        \"SKILL ISSUE\"\n    }\n\n    SetupNPC<override>(NPCData: entity_data): void =\n        (super:)SetupNPC(NPCData)\n        MaybeReceivedPlayer := NPCEntityData.PlayerData.GetPlayer()\n        if:\n            ReceivedPlayerCharacter := MaybeReceivedPlayer?.GetFortCharacter[]\n            set SeenPlayerCharacter = option{ReceivedPlayerCharacter}\n\n    StartNPCBehaviour<override>(): void =\n        MoveToSpawnTransform()\n        StartChasing()\n        spawn{RunNPCStateMachine()}\n\n    RunNPCStateMachine<override>()<suspends>: void =\n        if:\n            NPCAgent := GetAgent[]\n            NPCCharacter := NPCAgent.GetFortCharacter[]\n            NPCFocus := NPCCharacter.GetFocusInterface[]\n            NPCNavigatable := NPCCharacter.GetNavigatable[]\n        then:\n            loop:\n                if(not NPCCharacter.IsActive[] or IsPlayerDead[]):\n                    PrintNPC(\"break state machine loop\")\n                    break\n                \n                case (CurrentNPCBehaviourState):\n                    # NPC_BEHAVIOUR_STATE.IDLE =>\n                    #     PrintNPC(\"NPC Idling\")\n                    #     Sleep(2.0)\n                    NPC_BEHAVIOUR_STATE.CHASE =>\n                        DoAChase(NPCAgent, NPCCharacter, NPCFocus, NPCNavigatable)\n                    _ => # default\n                        PrintNPC(\"How RunNPCStateMachine reached here?\")\n                        break\n                \n                Sleep(0.5)\n\n    OnPlayerSeen<override>(Agent: agent): void =\n        return\n\n    OnPlayerLost<override>(Agent: agent): void =\n        return\n\n    StopChasing<override>(): void =\n        if(not IsPlayerDead[]):\n            PrintNPC(\"Basic: Stop chasing\")\n            if:\n                NPCAgent := GetAgent[]\n                NPCCharacter := NPCAgent.GetFortCharacter[]\n                NPCNavigatable := NPCCharacter.GetNavigatable[]\n            then:\n                # set IsPlayerSeen = false\n                NPCNavigatable.StopNavigation()\n\n    OnPlayerHidden<override>(EventHideSuccessData: event_player_hide_success): void =\n        return",
    "external_calls": [
      "basic_enemy_npc_behaviour",
      "entity_data",
      "seek_data",
      "chase_manager",
      "agent",
      "fort_character",
      "focus_interface",
      "navigatable",
      "event_player_hide_success",
      "NPC_BEHAVIOUR_STATE",
      "player_data",
      "player",
      "PrintNPC",
      "Sleep",
      "GetAgent",
      "GetFortCharacter",
      "GetFocusInterface",
      "GetNavigatable",
      "IsPlayerDead",
      "MoveToSpawnTransform",
      "StartChasing",
      "DoAChase",
      "StopNavigation",
      "GetPlayer",
      "IsActive"
    ]
  }
] 