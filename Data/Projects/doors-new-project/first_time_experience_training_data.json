[
  {
    "file_name": "first_time_experience.verse",
    "questions": [
      "How can I create a first-time player experience with a quest system in Verse?",
      "What is the Verse code for implementing a quest manager that uses persistence to track first-time players?",
      "I need a script that shows quests to new players and checks for a `FirstRunCompleted` flag.",
      "How do I create a first-time experience device that integrates with a quest system and persistence manager?"
    ],
    "explanation": "This script provides a first-time player experience system for a horror game, designed to guide new players through initial quests. It integrates with a persistence system to track whether a player has completed their first run and uses a quest system to display objectives. The core logic is currently commented out but demonstrates how to set up and show quests for new players.\n\n**Core Components:**\n- first_time_experience: Main device extending event_communicator_device\n- quest_marker: Reusable class for creating and managing quests\n- Persistence Integration: Checks for `FirstRunCompleted` flag from persistence data\n- Quest Management: Sets up and displays quests for new players\n- Commented-Out Logic: The main implementation is commented out, serving as a template\n\n**Key Features:**\n1. **New Player Detection**: Checks `PersistenceData.FirstRunCompleted` to identify new players\n2. **Quest System Integration**: Uses `quest_marker` to create and manage quests\n3. **Quest Setup and Display**: `SetupQuest()` and `ShowQuest()` methods for quest management\n4. **Multiple Quest Handling**: Manages multiple quests through an array of `quest_marker`\n5. **Extensible Design**: Inherits from `event_communicator_device` for event handling\n6. **Commented-Out Implementation**: Provides a clear template for implementation\n7. **Persistence-Driven**: Behavior is driven by persistent player data\n8. **Onboarding Experience**: Designed to create a smooth onboarding experience for new players\n\n**Quest System Architecture:**\n- **quest_marker Class**: A reusable class for defining individual quests\n- **Tracker and Map Indicator**: Uses `tracker_device` and `map_indicator_device` for UI\n- **Incident Triggers**: Quests can be triggered by various events (time, volume, button, etc.)\n- **State Management**: `quest_state` enum (INACTIVE, ACTIVE, COMPLETED) for quest status\n- **Event-Driven**: Quests can be triggered and completed via events\n\n**Persistence Integration:**\n- **PersistenceData**: The script relies on a `PersistenceData` object (not shown in this file)\n- **FirstRunCompleted**: A boolean flag indicating if the player has completed their first run\n- **Data-Driven Logic**: The entire experience is conditional on this persistent flag\n- **SetupPersistent()**: A placeholder for setting up the persistence link (commented out)\n\n**Implementation (Commented Out):**\n- **OnBegin()**: The main entry point for the device logic\n- **Player Check**: Retrieves a reference to the current player\n- **First Run Check**: `if(not PersistenceData.FirstRunCompleted?)` checks for new players\n- **Quest Setup**: `ElevatorEnterQuest.SetupQuest(Player)` prepares the quest for the player\n- **Quest Display**: `ElevatorEnterQuest.ShowQuest(Player)` displays the quest to the player\n- **Multiple Quests**: Demonstrates handling multiple quests from the `AllQuests` array\n\n**Quest Configuration:**\n- **ElevatorEnterQuest**: A `quest_marker` for the initial elevator quest\n- **DarksightHideQuest**: A `quest_marker` for a quest related to hiding from Darksight (Rush)\n- **AllQuests**: An array to hold all quests for easy management\n- **@editable Properties**: Quests are configured in the editor using `@editable`\n\n**Event Communication:**\n- **event_communicator_device**: Inherits from this class for event handling capabilities\n- **Setup()**: Placeholder for setting up event subscriptions\n\n**Workflow:**\n1. **Device Starts**: `OnBegin()` is called when the game starts.\n2. **Persistence Check**: It checks if `FirstRunCompleted` is false.\n3. **Player Reference**: It gets a reference to the current player.\n4. **Quest Initialization**: If it's the first run, it initializes and displays the quests.\n5. **Player Guidance**: The quest system guides the new player through the initial experience.\n6. **Run Completion**: Another part of the system (e.g., `game_manager`) sets `FirstRunCompleted` to true when the player finishes their first run.\n7. **Subsequent Runs**: On subsequent runs, the quest system is skipped.\n\n**Development Context:**\n- This script is part of a larger system that includes quest management and data persistence.\n- The commented-out code indicates that this feature might be in development or has been temporarily disabled.\n- To make this script functional, the comments would need to be removed, and the `PersistenceData` and `PlayerReference` would need to be properly initialized.\n\n**Use Cases:**\n- **New Player Onboarding**: Guiding new players through their first experience\n- **Tutorial Systems**: Creating tutorial quests and objectives\n- **Conditional Content**: Displaying content only to new players\n- **Achievement-Based Quests**: Triggering quests based on player achievements or progress",
    "code": "using { /Fortnite.com/Devices }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/Diagnostics }\n\n# See https://dev.epicgames.com/documentation/en-us/uefn/create-your-own-device-in-verse for how to create a verse device.\n\n# A Verse-authored creative device that can be placed in a level\nfirst_time_experience := class(event_communicator_device):\n    @editable\n    ElevatorEnterQuest: quest_marker = quest_marker{}\n\n    @editable\n    DarksightHideQuest: quest_marker = quest_marker{}\n\n    @editable\n    AllQuests: []quest_marker = array{}\n\n    # Runs when the device is started in a running game\n    # OnBegin<override>()<suspends>:void=\n    #     Setup()\n    #     SetupPersistent()\n    #     if(not PersistenceData.FirstRunCompleted?):\n    #         if:\n    #             Player := PlayerReference?\n    #         then:\n    #             # Print(\"quests: ElevatorEnterQuest\")\n    #             # ElevatorEnterQuest.SetupQuest(Player)\n    #             # ElevatorEnterQuest.ShowQuest(Player)\n                \n    #             # Print(\"quests: DarksightHideQuest\")\n    #             # DarksightHideQuest.SetupQuest(Player)\n\n    #             Sleep(5.0)\n\n    #             if(ElevatorEnterQuest1 := AllQuests[0]):\n    #                 Print(\"quests: ElevatorEnterQuest1\")\n    #                 ElevatorEnterQuest1.SetupQuest(Player)\n    #                 ElevatorEnterQuest1.ShowQuest(Player)\n                \n    #             if(DarksightHideQuest1 := AllQuests[1]):\n    #                 Print(\"quests: DarksightHideQuest1\")\n    #                 DarksightHideQuest1.SetupQuest(Player)",
    "external_calls": [
      "event_communicator_device",
      "quest_marker"
    ]
  }
] 