[
  {
    "file_name": "notes_manager.verse",
    "questions": [
      "How do I create a system for displaying readable notes with a typewriter effect in Verse?",
      "What is the code for a UI that shows text letter-by-letter, triggered by a button interaction?",
      "I need a script that displays a custom UI canvas with a background image and an exit button when a player interacts with an object.",
      "How can I use a global event channel to send text from multiple buttons to a single UI manager?"
    ],
    "explanation": "This script creates a system for displaying readable notes to the player. It features an interactive UI with a background image and a typewriter effect that reveals the text character by character, accompanied by a sound effect. The system is modular, allowing multiple `note_button` instances in the world, each capable of displaying its own unique message through a central `notes_manager`.\n\n**Core Components:**\n- `notes_manager`: The main device that manages the creation, display, and removal of the note UI. It listens for events and controls the typewriter effect.\n- `note_button`: A helper class that links a physical `button_device` to a specific string of text. When interacted with, it broadcasts an event to the `notes_manager`.\n- `canvas`: The main UI widget that holds the note's visual elements.\n- `overlay`: Used within the canvas to layer the background texture, the text block, and the exit button on top of each other.\n- `PlayTypeWriterEffect`: A coroutine that implements the typewriter effect by appending the message to a `text_block` one character at a time with a small delay.\n\n**Key Features:**\n1. **Typewriter Text Effect**: The `PlayTypeWriterEffect` function creates an immersive reading experience by displaying the text dynamically, character by character, complete with an audio cue for each letter.\n2. **Event-Driven Architecture**: The system is decoupled. `note_button` objects don't directly reference the manager; instead, they broadcast a `PLAYER_NOTE_OPEN` event, which the `notes_manager` subscribes to. This makes the system scalable and easy to maintain.\n3. **Custom UI with Layering**: It uses an `overlay` widget to place a `texture_block` (for the note's paper background), a `text_block` (for the content), and a `button_quiet` (for exiting) in the same space, creating a complete and interactive UI panel.\n4. **Dynamic Newlines**: The script cleverly uses a custom `AddLineWhen` character (defaulting to '+') in the editable string, which it replaces with a newline character (`\\n`) at setup. This allows designers to format text with line breaks directly in the UEFN editor.\n5. **Interruptible Effect**: The typewriter effect can be stopped mid-sequence if the player closes the note, as the loop checks an `IsActive` flag before processing the next character.\n\n**Workflow:**\n1. **Initialization**: On `OnBegin`, the `notes_manager` sets itself up, including creating the UI canvas and subscribing to the player event channel. It also calls `Setup` on all associated `note_button` instances.\n2. **Button Setup**: Each `note_button` subscribes to its own `InteractedWithEvent` and formats its note text, replacing the `AddLineWhen` character with newlines.\n3. **Player Interaction**: A player presses a `button_device` in the game.\n4. **Event Broadcast**: The corresponding `note_button`'s `OnButtonPressed` function is called, which broadcasts the `PLAYER_NOTE_OPEN` event, passing its specific `NoteToShow` text as payload.\n5. **Event Reception**: The `notes_manager.OnNotePressReceived` function catches the event.\n6. **UI Display**: `HandleNoteReceivedEvent` is called. It adds the `NoteCanvas` to the player's UI (making it visible) and starts the `PlayTypeWriterEffect` coroutine.\n7. **Typewriter Sequence**: The coroutine begins displaying the text letter by letter in the `NoteTextBlock`.\n8. **Player Exits**: The player clicks the 'Exit' button on the note UI. This triggers `HandleExitNoteButton`, which sets `IsActive` to false (stopping the typewriter effect), clears the text, and removes the canvas from the player's UI.\n\n**Use Cases:**\n- Displaying lore, instructions, or narrative content to the player.\n- Creating interactive story elements that players can find and read in the game world.\n- A template for any UI system that needs to display formatted text triggered by in-game interactions.",
    "code": "using { /Fortnite.com/Devices }\nusing { /Fortnite.com/UI }\nusing { /Verse.org/Simulation }\nusing { /UnrealEngine.com/Temporary/UI }\nusing { /UnrealEngine.com/Temporary/SpatialMath }\nusing { /Verse.org/Colors }\n\nnote_button := class(event_communicator):\n    @editable\n    Button : button_device = button_device{}\n\n    @editable\n    var NoteToShow:string = \"This is a short message!+\"\n\n    @editable\n    AddLineWhen : string = \"+\"\n\n    Setup<override>(NewGlobalEventChannel : global_event_channel) : void=\n        (super:)Setup(NewGlobalEventChannel)\n        set NoteToShow = NoteToShow.ReplaceAll(AddLineWhen, \"\\n\")\n        Button.InteractedWithEvent.Subscribe(OnButtonPressed)\n\n    OnButtonPressed(Agent : agent) : void=\n        GlobalEventChannel.PlayerEventChannel.BroadcastChannel(event_names.PLAYER_NOTE_OPEN, event_note_open{Text := NoteToShow}, option{Agent})\n\nnotes_manager := class(event_communicator_device):\n    @editable\n    NoteButtons : []note_button = array{}\n    @editable\n    TimeBetweenSentences : float = 0.5\n    @editable\n    TimeBetweenLetters : float = 0.01\n    @editable\n    TypewriterSoundEffect : audio_player_device = audio_player_device{}\n\n    var NoteCanvas : canvas = canvas{}\n    var NoteTextBlock : text_block = text_block{DefaultTextColor := NamedColors.Black, DefaultJustification := text_justification.Center}\n    var ExitEventHandle : event() = event(){}\n    var IsActive : logic = true\n\n    OnBegin<override>()<suspends> : void=\n        Setup()\n        SubscribeToPlayerEvent(OnNotePressReceived, \"notes_manager\")\n\n    Setup<override>() : void=\n        (super:)Setup()\n        for(NoteButton : NoteButtons):\n            NoteButton.Setup(GlobalEventChannel)\n        ExitButton : button_quiet = button_quiet{DefaultText := StringToMessage(\"Exit\")}\n        ExitButton.OnClick().Subscribe(HandleExitNoteButton)\n\n        set NoteCanvas = canvas:\n            Slots := array:\n                canvas_slot:\n                    Anchors:=anchors{Minimum:=vector2{X:=0.5,Y:=0.5},Maximum:=vector2{X:=0.5,Y:=0.5}}\n                    Alignment:=vector2{X:=0.5,Y:=0.5}\n                    SizeToContent:=true\n                    Widget := overlay:\n                        Slots := array:\n                            overlay_slot:\n                                HorizontalAlignment := horizontal_alignment.Center\n                                VerticalAlignment := vertical_alignment.Center\n                                Widget := texture_block{DefaultImage := Textures_01.NotePng, DefaultDesiredSize := vector2{X := 600.0, Y := 740.0}}\n                            overlay_slot:\n                                HorizontalAlignment := horizontal_alignment.Center\n                                VerticalAlignment := vertical_alignment.Center\n                                Widget := NoteTextBlock\n                            overlay_slot:\n                                HorizontalAlignment := horizontal_alignment.Center\n                                VerticalAlignment := vertical_alignment.Bottom\n                                Padding := margin{Bottom := 10.0}\n                                Widget := ExitButton\n\n    OnNotePressReceived(EventName : event_names, EventData : event_data, Agent : ?agent) : void=\n        case (EventName):\n            event_names.PLAYER_NOTE_OPEN =>\n                if(Data := event_note_open[EventData], Player := player[Agent?]):\n                    HandleNoteReceivedEvent(Data.Text, Player)\n            _ => # default\n                return\n\n    HandleNoteReceivedEvent(Message : string, Player : player) : void=\n        Print(\"{Message}\", ?Duration:=6.0)\n        set IsActive = true\n        # NoteTextBlock.SetText(Message)\n        if(PlayerUI := GetPlayerUI[Player]):\n            PlayerUI.AddWidget(NoteCanvas, player_ui_slot{InputMode := ui_input_mode.All})\n        spawn:\n            PlayTypeWriterEffect(Message)\n\n    HandleExitNoteButton(Message : widget_message) : void=\n        set IsActive = false\n        NoteTextBlock.SetText(StringToMessage(\"\"))\n        if(PlayerUI := GetPlayerUI[Message.Player]):\n            PlayerUI.RemoveWidget(NoteCanvas)\n\n    PlayTypeWriterEffect(Message : string)<suspends>: void=\n        var LetterIndex : int = 0\n        TextLength := Message.Length\n        var FullText : string = \"\"\n        loop:\n            if(not IsActive?):\n                NoteTextBlock.SetText(StringToMessage(\"\"))\n                break\n            if(LetterIndex >= TextLength):\n                break\n            if:\n                Latter := Message[LetterIndex]\n            then:\n                set FullText += array{Latter}\n                NoteTextBlock.SetText(StringToMessage(FullText))\n                TypewriterSoundEffect.Play()\n                Sleep(TimeBetweenLetters)\n                TypewriterSoundEffect.Stop()\n                set LetterIndex += 1\n                if(Latter = ',' or Latter = '.'):\n                    Sleep(TimeBetweenSentences)",
    "external_calls": [
      "event_communicator",
      "button_device",
      "string",
      "global_event_channel",
      "Setup",
      "ReplaceAll",
      "Subscribe",
      "agent",
      "BroadcastChannel",
      "event_names",
      "event_note_open",
      "event_communicator_device",
      "note_button",
      "audio_player_device",
      "canvas",
      "text_block",
      "NamedColors",
      "text_justification",
      "event",
      "logic",
      "OnBegin",
      "SubscribeToPlayerEvent",
      "button_quiet",
      "StringToMessage",
      "OnClick",
      "canvas_slot",
      "anchors",
      "vector2",
      "overlay",
      "overlay_slot",
      "horizontal_alignment",
      "vertical_alignment",
      "texture_block",
      "Textures_01",
      "margin",
      "event_data",
      "player",
      "HandleNoteReceivedEvent",
      "Print",
      "GetPlayerUI",
      "AddWidget",
      "player_ui_slot",
      "ui_input_mode",
      "spawn",
      "PlayTypeWriterEffect",
      "widget_message",
      "SetText",
      "RemoveWidget",
      "loop",
      "Length",
      "Play",
      "Sleep",
      "Stop"
    ]
  }
] 